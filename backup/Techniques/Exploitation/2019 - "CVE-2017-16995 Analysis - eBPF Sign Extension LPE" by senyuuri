<!DOCTYPE html>
<html lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>CVE-2017-16995 Analysis - eBPF Sign Extension LPE | senyuuri's blog</title>
<meta name="generator" content="VuePress 1.8.2">
<link rel="alternate" type="application/rss+xml" href="https://blog.senyuuri.info/rss.xml" title="senyuuri's blog RSS Feed">
<meta name="description" content="
eBPF(Enhanced Berkeley Packet Filter) is an in-kernel virtual machine that is used as an interface to data link layers, allowing packets on the network to be filtered by rules. A userspace process ...">
<link rel="preload" href="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/0.css" as="style"><link rel="preload" href="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/app.js" as="script"><link rel="preload" href="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/18.js" as="script"><link rel="preload" href="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4.js" as="script"><link rel="preload" href="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3.js" as="script"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/10.a52cc58f.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/11.6ca87b31.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/12.7aa12d8b.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/13.8ee9edf1.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/14.8c56eaca.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/15.b7cd96bb.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/16.628e3367.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/17.d6ce5c8c.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/19.2fbb98f6.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/20.b137a4f8.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/21.4113897a.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/22.2fc83dd8.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/5.c4029f0a.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/6.542d3b29.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/7.96fad87d.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/8.b81530e8.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/9.0ae8fd25.js"><link rel="prefetch" href="https://blog.senyuuri.info/assets/js/vuejs-paginate.1ce67ec9.js">
<link rel="stylesheet" href="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/0.css">
<style type="text/css">.medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}</style><script charset="utf-8" src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3.js"></script><script charset="utf-8" src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/18.js"></script><script charset="utf-8" src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4.js"></script></head>
<body>
<div id="app"><div class="wrapper"><div class="md:flex rounded"><div class="flex-none"><div class="m-3 md:m-10 md:mt-20"><div class="flex items-center justify-between"><a href="https://blog.senyuuri.info/" class="flex flex-shrink-0 block md:m-4 md:mb-10 inline no-underline text-black hover:text-yellow-700 font-sans font-normal uppercase tracking-widest">@senyuuri</a> <div class="flex block justify-end md:hidden"><button class="flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400"><svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="fill-current h-3 w-3"><title>Menu</title><path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"></path></svg></button></div></div> <div class="-ml-4 mt-3 md:m-0"><span class="md:block hidden"><a href="https://blog.senyuuri.info/" class="block mx-4 md:m-4 inline md:block no-underline text-black hover:text-yellow-700 font-sans font-normal uppercase tracking-widest">
            About
            </a></span><span class="md:block hidden"><a href="https://blog.senyuuri.info/posts" class="block mx-4 md:m-4 inline md:block no-underline text-black hover:text-yellow-700 font-sans font-normal uppercase tracking-widest">
            Blog
            </a></span><span class="md:block hidden"><a href="https://blog.senyuuri.info/1970/01/01/music" class="block mx-4 md:m-4 inline md:block no-underline text-black hover:text-yellow-700 font-sans font-normal uppercase tracking-widest">
            Music
            </a></span><span class="md:block hidden"><a href="https://blog.senyuuri.info/rss.xml" class="block mx-4 md:m-4 inline md:block no-underline text-black hover:text-yellow-700 font-sans font-normal uppercase tracking-widest">
            Feed
            </a></span></div></div></div> <div class="flex-1"><div class="min-w-0 flex-auto px-4 sm:px-6 xl:px-8 pt-5 sm:pt-24 pb-24 lg:pb-16"><div class="markdown-body"><div><div class="bg-white rounded text-grey-content"><p class="no-underline mb-0 text-2xl text-grey-content font-custom">CVE-2017-16995 Analysis - eBPF Sign Extension LPE</p> <div class="flex my-1 pb-2"><span class="inline-block py-1 m-2 mt-3 ml-0 text-xs font-sans tracking-wide">2019/01/19</span> <div><span class="inline-block bg-grey-lightest rounded-full px-3 py-1 m-1 mt-3 text-xs text-grey-darker font-sans tracking-wide">Kernel</span></div><div><span class="inline-block bg-grey-lightest rounded-full px-3 py-1 m-1 mt-3 text-xs text-grey-darker font-sans tracking-wide">CVE</span></div><div><span class="inline-block bg-grey-lightest rounded-full px-3 py-1 m-1 mt-3 text-xs text-grey-darker font-sans tracking-wide">eBPF</span></div></div> <div class="font-sans content__default"><h2 id="ebpf-background"><a href="#ebpf-background" class="header-anchor">#</a> eBPF Background</h2> <p><em>eBPF(Enhanced Berkeley Packet Filter)</em>
 is an in-kernel virtual machine that is used as an interface to data 
link layers, allowing packets on the network to be filtered by rules. A 
userspace process will supply a filter program to specify which packets 
it wants to receive and eBPF will return packets that pass its filtering
 process.</p> <p>Each BPF memory instructions are made up of 64 bits (8 
bytes). 8 bits for opcode, 4 bits for source register, 4 bits for 
destination register, 16 bits for offset and 32 bits for immediate 
value.</p> <p>eBPF consists of 10 64-bit register known as <code>r0 - r10</code>. <code>r0</code>  stores the return value, <code>r1</code> to <code>r5</code> is reserved for arguments, <code>r6</code> to <code>r9</code> is reserved for storing callee saved registers and <code>r10</code> stores read-only frame pointer.</p> <p>In
 order to keep state between invocations of eBPF programs, allow sharing
 data between eBPF kernel programs and also between kernel and 
user-space applications, eBPF utilizes different types of maps in the 
form of key-value pair. Two bpf functions, <code>BPF_MAP_LOOKUP_ELEM</code> and <code>BPF_MAP_UPDATE_ELEM</code> , are provided to facilitate sharing of data between programs.</p> <h2 id="overview"><a href="#overview" class="header-anchor">#</a> Overview</h2> <div class="language- extra-class"><pre class="language-text"><code>CVSS v3 Score: 7.8
Confidentiality: High
Integrity: High
Authority: High
</code></pre></div><p>The vulnerability is caused by a sign extension 
from a signed 32-bit integer to an unsigned 64-bit integer, bypassing 
eBPF verifier and leading to local privilege escalation.</p> <p>Before each of the BPF program runs, two passes of verifications are conducted to ensure its correctness. The first pass <code>check_cfg()</code> ensures the code is loop-free using depth-first search. The second pass <code>do_check()</code>
 runs a static analysis to emulate the execution of all possible paths 
derived from the first instruction. The program will be terminated if 
any invalid instruction or memory violation is found.</p> <p>In the 
exploit, a set of BPF instructions are carefully crafted to bypass this 
filtering process through an unintentional sign extension from 32 bits 
to 64 bits. As a result, a few lines of malicious code attached managed 
to execute in the kernel space, resulting in privilege escalation.</p> <p>This
 vulnerability allows attacker to have full control of the system with 
root access. The low complexity of the attack and low privileges 
required to perform this exploit makes it a high priority to fix.</p> <h2 id="code-analysis"><a href="#code-analysis" class="header-anchor">#</a> Code Analysis</h2> <h3 id="_1-ebpf-instruction-set"><a href="#_1-ebpf-instruction-set" class="header-anchor">#</a> 1. eBPF Instruction Set</h3> <p>User-supplied
 eBPF programs are written in a special machine language that runs on 
the eBPF virtual machine. The VM follows the generic Reduced Instruction
 Set Computer(RISC) design and has 10 general purpose registers and 
several named registers.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_014.png" width="400" align="left"> <br clear="left"> <p><em>fig 3.1 Register Definitions in the eBPF VM, from /kernel/bpf/core.c</em></p> <p>Each
 BPF instruction on x64 platform is of 64-bit long. They are internally 
represented by a bpf_insn struct which contains the following fields 
(fig 3.2). Given the limited size of the opcode field, instructions are 
categorised into 8 classes(fig 3.3). For instance, <code>BPF_MOV</code> shares the same opcode with <code>BPF_ALU64</code> and <code>BPF_X</code> by definition(fig 3.4).</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_006.png" width="450" align="left"> <br clear="left"> <p><em>fig 3.2 Structure of a BPF instruction, from /include/uapi/linux/bpf.h</em></p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_005.png" width="350" align="left"> <br clear="left"> <p><em>fig 3.3 BPF instruction classes, from /include/uapi/linux/bpf_common.h</em></p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3.png" width="450" align="left"> <br clear="left"> <p><em>fig 3.4 Definition of BPF_MOV64_REG, from /include/linux/filter.h</em></p> <h3 id="_2-source-code-analysis"><a href="#_2-source-code-analysis" class="header-anchor">#</a> 2. Source Code Analysis</h3> <p>The
 exploit of CVE-2017-16995 boils down to a mere 40 eBPF instructions. We
 will be focusing on the first two instructions because they are mainly 
used to bypass the verification mechanism of eBPF.</p> <p><img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_002.png" alt="Kernel-eBPF/3.5.png"> <em>fig 3.5 eBPF code in the exploit of CVE-2017-16995 with annotation</em></p> <p>As
 mentioned before, eBPF performs a two round verification before 
actually running the user-supplied code. For this CVE we are only 
interested in second round check which is done in the <code>do_check()</code> function. When the first instruction <code>BEF_MOV32_IMM</code> is evaluated, it is passed to <code>check_alu_op()</code> to process since <code>BEF_MOV32_IMM</code> belongs to the <code>BPF_ALU</code> group (fig 3.6). The immediate value <code>(0xFFFFFFFF)</code> from the first instruction is then stored in the register <code>BPF_REG_9</code> (fig 3.7).</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_009.png" width="500" align="left"> <br clear="left"> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_008.png" width="500" align="left"> <br clear="left"> <p><em>fig 3.6 do_check(), from /kernel/bpf/verifier.c</em></p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_018.png" width="500" align="left"> <br clear="left"> <p><em>fig 3.7 check_alu_op() from /kernel/bpf/verifier.c</em></p> <p>To
 make things clearer, we can take a look at how registers in eBPF are 
represented. The registered are stored in an array of structs named <code>reg_state</code>. The immediate value <code>0xFFFFFFFF</code> is stored in a 64-bit int <code>imm</code>, which becomes <code>0x00000000FFFFFFFF</code> in memory.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_020.png" width="500" align="left"> <br clear="left"> <p><em>fig 3.8 struct reg_state, from /kernel/bpf/verifier.c</em></p> <p>Now the second instruction <code>BPF_JMP_IMM(BPF_JNE, BPF_REG_9, 0xFFFFFFFF, 2)</code> is evaluated. The instruction compares the immediate value <code>0xFFFFFFFF</code> with the content inside <code>BPF_REG_9</code>, and jump to the place that is 2 instructions away if the two values do not equal.</p> <p>This time <code>do_check()</code> calls <code>check_cond_jmp_op()</code> to check for both type and value in dst_reg, which is <code>BPF_REG_9</code> in this case (fig. 3.9). Clearly <code>(int)0x00000000FFFFFFFF = (s32)0xFFFFFFFF</code> and <code>opcode != JEQ</code>, it falls under the case <code>imm != imm</code> and the jump is not performed. The program continues until it hits <code>BPF_EXIT_INST()</code> on line 4 and exit.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_003.png" width="500" align="left"> <br clear="left"> <p><em>fig 3.9 check_cond_jmp_op(), from /kernel/bpf/verifier.c</em></p> <p>Usually,
 the eBPF verifier uses a stack to keep tracking branches that have not 
been evaluated and revise them later(fig 3.9, line 1236). However, since
 the integer comparison on line 1220 always equals, the code continue 
from line 1232 and the other branch is never pushed to the stack.</p> <p>When the verifier evaluate <code>BPF_EXIT</code>,
 it tries to pop all uncheck branches from the stack(fig 3.10). The 
verification process will stop here since it knows the stack is empty. 
As a result, only the first 4 instructions in the exploit are verified 
while the rest 36 remain unchecked.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_017.png" width="500" align="left"> <br clear="left"> <p><em>Fig 3.10 Evaluation of instruction BPF_EXIT, from /kernel/bpf/verifier.c</em></p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_012.png" width="300" align="left"> <br clear="left"> <br> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_016.png" width="500" align="left"> <br clear="left"> <br> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_013.png" width="300" align="left"> <br clear="left"> <br> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_004.png" width="400" align="left"> <br clear="left"> <p><em>Fig 3.11 regs definition and __bpf_prog_run(), from /kernel/bpf/core.c</em></p> <p>After verification, eBPF runs the program through <code>__bpf_prog_run()</code> in <code>core.c</code>
 where eBPF instructions are translated to machine instructions using a 
jump table. Notice the type of regs here is u64. Using the same first 
two instructions in <code>exploit.c</code>, the sign extension occurs when we evaluate the first instruction <code>BPF_MOV32_IMM</code>. More specifically, it happens when we run <code>DST = (u32)IMM</code> in line 350:</p> <ul><li>On the right hand side, <code>IMM</code> is equivalent to <code>insn-&gt;imm</code>. imm is a signed 32-bit integer defined in <code>bpf_insn</code>(fig 3.2). Here <code>IMM = 0xFFFFFFFF</code>. We cast it to an unsigned 32-bit integer which is still <code>0xFFFFFFFF</code>.</li> <li>On the left hand side, <code>DST</code> is defined as <code>regs[insn-&gt;dst_reg]</code>, which is an unsigned 64-bit integer. When we let <code>DST = (u32) IMM</code>, sign extension applies and <code>DST</code> becomes <code>0xFFFFFFFFFFFFFFFF</code>.</li></ul> <p>Now if we evaluate the second instruction <code>JMP_JNE_K</code>, <code>DST</code> becomes not equal to <code>IMM</code> since <code>0xFFFFFFFFFFFFFFFF != 0xFFFFFFFF</code>.
 This is different from what we have seen in the verifier. As a result, 
the jump is taken and the program continue to run the malicious 
instructions from line 5 onwards.</p> <h3 id="_3-explanation-for-the-exploit"><a href="#_3-explanation-for-the-exploit" class="header-anchor">#</a> 3. Explanation for the Exploit</h3> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_004.png" width="500" align="left"> <br clear="left"> <p><em>Fig 3.13 Data flow in the exploit</em></p> <p>As
 mentioned earlier, eBPF uses shared memory for the kernel program to 
communicate with user applications. If we think about this carefully, 
this could be a potential channel for us to pass instructions to the 
kernel and to sneak kernel information to the outside. We shall soon see
 how the exploit uses this eBPF map to complete arbitrary kernel 
read/write in a short while.</p> <p>To put it simply, the exploit 
comprises two parts: an eBPF filter programming running in the kernel 
and a helper program running in the user space. The attack can be 
generalised into the following steps:</p> <ul><li><p><code>exploit.c</code> creates a eBPF map of size 3 using <code>bpf_creat_map()</code> and loads the eBPF instructions <code>char *prog</code> into the kernel using <code>bpf_prog_load()</code>.</p></li> <li><p>The
 eBPF instructions serve as a agent which takes commands from the map 
and perform read/write in the kernel space accordingly. The layout of 
the map is defined as follows:</p> <table><thead><tr><th>Index of eBPF map</th> <th>To read from kernel</th> <th>To get the current frame pointer</th> <th>To write to kernel</th></tr></thead> <tbody><tr><td>0 (opcode)</td> <td>0</td> <td>1</td> <td>2</td></tr> <tr><td>1 (address)</td> <td>Target address</td> <td>0</td> <td>Target address</td></tr> <tr><td>2  (value)</td> <td>(Content at the address)</td> <td>0</td> <td>0</td></tr></tbody></table></li> <li><p>To trigger a read/write operation, <code>exploit.c</code> firstly store the parameters in the map using <code>bpf_update_elem()</code>. It will then call <code>writemsg()</code> which sends a few dummy packets to the socket and force the eBPF program to run.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_010.png" width="400" align="left"></li></ul> <br clear="left"> <p><em>Fig 3.14 __update_elem() from exploit.c</em></p> <ul><li><p>Given
 the helper tools above, now we can get the address of the current  
frame pointer by instructing the BPF program to perform opcode 1. The 
return value is stored in the map at index 2.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_015.png" width="400" align="left"> <br clear="left"> <p><em>Fig 3.15 __get_fp() from exploit.c</em></p></li> <li><p>After obtaining the frame pointer, it will be used to find the pointer of  <code>task_struct</code> in the kernel stack(fig 3.16), which is inside a struct named <code>thread_info</code>.
 Since the stack size is 8KB, masking out the least significant 13 bits 
will give the address of thread_info. Hence, the value read from the 
address of <code>thread_info</code> will be the address for <code>task_struct *task</code>.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_019.png" width="400" align="left"> <br clear="left"> <p><em>Fig. 3.16 pwn() from exploit.c</em></p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_011.png" width="500" align="left"> <br clear="left"> <p><em>Fig 3.17 struct thread_info, from /arch/ia64/alpha/include/asm/thread_info.h</em></p></li> <li><p>Using the address of <code>task_struct</code>, we will be able to obtain the address of struct cred base as it is part of <code>task_struct</code>. In the struct cred, there will be a <code>uid_t uid</code> which can be set to <code>0</code> base on the offset from the address of <code>struct cred</code>. When this <code>uid</code> is set to <code>0</code>, the process will be able to run its program with root privileges.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3_007.png" width="500" align="left"> <br clear="left"> <p><em>Fig 3.18 pwn() from exploit.c</em></p></li></ul> <h2 id="the-patch"><a href="#the-patch" class="header-anchor">#</a> The Patch</h2> <h3 id="_1-official-kernel-patch"><a href="#_1-official-kernel-patch" class="header-anchor">#</a> 1. Official Kernel Patch</h3> <p><img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4.png" alt="Kernel-eBPF/4.1-1.png"></p> <p><img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4_004.png" alt="Kernel-eBPF/4.1-2.png"></p> <p><em>Fig4.1. Patch on verifier.c</em></p> <p>To resolve the inconsistent execution paths between the verifier and <code>__bpf_prog_run()</code>, the patch forces to convert any immediate in <code>BPF_MOV</code> or <code>BPF_X</code>
 to the type of u64 at the verification stage. As such, malicious 
payload that tries to read or write to kernel memory space will always 
be detected before it runs.</p> <p>More specifically, when the verifier reads the s32 immediate value from the instruction struct i.e. <code>insn-&gt;imm</code>, the value is firstly casted to <code>u32</code> and then passed to <code>__mark_reg_known()</code> as an <code>u64</code> parameter. The sign-extended <code>u64</code>
 immediate value is stored in its various possible sign/unsigned forms 
in the register. This ensures all conditional checks will use the 
sign-extended form of imm for comparison.</p> <h3 id="_2-our-implementation"><a href="#_2-our-implementation" class="header-anchor">#</a> 2. Our Implementation</h3> <p>Given the inspiration from the official patch,  we also developed our own implementation which is simpler but still effective.</p> <img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4_002.png" width="500" align="left"> <br clear="left"> <p><em>Fig 4.2  Patch implementation (Casting immediate value to unsigned 64 bits)</em></p> <p>From
 the source analysis, the vulnerability of the program is due to the 
sign extension of the  immediate value failing the comparison of the 
value stored in the register and immediate value. Hence, in order to 
prevent this bug from being exploited, we ensure that any 32 bit signed 
immediate value is casted to unsigned 64 bit immediate value before 
storing and using it for comparison as shown in Fig 4.2. With the 
implemented patch, the immediate value will always be sign extended when
 it is evaluated in the verifier.</p> <p><img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4_005.png" alt="Kernel-eBPF/4.3.png"></p> <p><em>Fig 4.3 Exploit runs successfully before the patch</em></p> <p><img src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4_003.png" alt="Kernel-eBPF/4.4.png"></p> <p><em>Fig 4.4  Exploit.c Demo with our patch implementation</em></p> <p>To
 demonstrate, before applying the patch, the exploit was done 
successfully after running the exploit.c(fig 4.3). This can be done as 
the kernel address for the frame pointer is leaked to find the top stack
 pointer <code>thread_info</code>. The <code>task_struct</code> address (<code>0xffff880074c4c600</code>) is found from an offset from the top stack pointer while the address of the <code>uidptr</code> (<code>0xffff88001d5b0604</code>) can be found from an offset from the struct cred which is within the <code>task_struct</code>. After calling the <code>id</code> command, the uid has been successfully set to 0, resulting in a local privilege escalation.</p> <p>After re-compiling the kernel with our patch implementation, another attempt to execute the <code>exploit.c</code> was made. Instead of obtaining the root shell, an error <code>error: Permission denied</code>
 as shown in Fig 4.4 was thrown demonstrating that the exploit has 
failed. This is because the verifier now compares the sign-extended 
value <code>0xFFFFFFFFFFFFFFFF</code> in <code>BPF_REG_9</code> with the immediate value <code>0xFFFFFFFF</code> when verifying the second eBPF instruction <code>BPF_JMP_IMM</code>.
 This results in a jump on not equal and the rest of the malicious eBPF 
payload is checked against by the verifier. Hence, the exploit will be 
effectively stopped from running.</p> <h2 id="references"><a href="#references" class="header-anchor">#</a> References</h2> <p><a href="http://man7.org/linux/man-pages/man2/bpf.2.html" target="_blank" rel="noopener noreferrer">Man page of bpf()<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://github.com/iovisor/bpf-docs/blob/master/eBPF.md" target="_blank" rel="noopener noreferrer">Unofficial eBPF Specification<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://elixir.bootlin.com/linux/v4.4.31/source/kernel/bpf" target="_blank" rel="noopener noreferrer">BFP Source Code in Linux Kernel<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-16995.html" target="_blank" rel="noopener noreferrer">CVE-2017-16995 Patch Status on Ubuntu<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://github.com/iBearcat/CVE-2017-16995/blob/master/exploit.c" target="_blank" rel="noopener noreferrer">Exploit of CVE-2017-16995<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel" target="_blank" rel="noopener noreferrer">Building Ubuntu Kernel<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://dangokyo.me/2018/05/24/analysis-on-cve-2017-16995/" target="_blank" rel="noopener noreferrer">dangokyo.me - Analysis Report of CVE-2017-16995<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p> <p><a href="https://xz.aliyun.com/t/2212" target="_blank" rel="noopener noreferrer">xz.aliyun.com - Analysis Report of CVE-2017-16995<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></p></div> <div class="sticker vuepress-toc"><div class="vuepress-toc-item vuepress-toc-h2 active"><a href="#ebpf-background" title="eBPF Background">eBPF Background</a></div><div class="vuepress-toc-item vuepress-toc-h2"><a href="#overview" title="Overview">Overview</a></div><div class="vuepress-toc-item vuepress-toc-h2"><a href="#code-analysis" title="Code Analysis">Code Analysis</a></div><div class="vuepress-toc-item vuepress-toc-h3"><a href="#_1-ebpf-instruction-set" title="1. eBPF Instruction Set">1. eBPF Instruction Set</a></div><div class="vuepress-toc-item vuepress-toc-h3"><a href="#_2-source-code-analysis" title="2. Source Code Analysis">2. Source Code Analysis</a></div><div class="vuepress-toc-item vuepress-toc-h3"><a href="#_3-explanation-for-the-exploit" title="3. Explanation for the Exploit">3. Explanation for the Exploit</a></div><div class="vuepress-toc-item vuepress-toc-h2"><a href="#the-patch" title="The Patch">The Patch</a></div><div class="vuepress-toc-item vuepress-toc-h3"><a href="#_1-official-kernel-patch" title="1. Official Kernel Patch">1. Official Kernel Patch</a></div><div class="vuepress-toc-item vuepress-toc-h3"><a href="#_2-our-implementation" title="2. Our Implementation">2. Our Implementation</a></div><div class="vuepress-toc-item vuepress-toc-h2"><a href="#references" title="References">References</a></div></div> <div class="vssue content__default"><svg style="display: none;"><symbol id="vssue-icon-bitbucket" viewBox="0 0 1024 1024"><path d="M579.5522464 489.45249493q4.8371808 38.38537173-30.81752427 61.55702827t-67.95459093 3.66689493q-23.79580907-10.37653333-32.6119616-35.34262826t-0.31207573-50.01020907 31.67573333-35.34262827q21.92335253-11.00068587 44.1587808-7.33379093t39.00952427 21.61127573 16.77409493 41.1160384zM647.19476053 476.65737173q-8.50407573-65.22392427-68.8908192-99.9424t-120.07131413-7.9579424q-38.38537173 17.08617173-61.24495253 53.9111616t-21.0651424 78.95527574q2.41859093 55.4715424 47.20152426 94.48106666t100.87862827 34.1723424q55.4715424-4.8371808 92.60860907-51.18049493t30.50544746-102.43900907zM792.93434133 146.32472427q-12.17097173-16.4620192-34.1723424-27.15062827t-35.34262826-13.41927573-43.30057174-7.64586667q-177.33729493-28.63299093-345.00022826 1.24830507-26.2144 4.29104747-40.25782827 7.33379093t-33.54819093 13.41927573-30.50544747 26.2144q18.2564576 17.08617173 46.34331413 27.6967616t44.78293334 13.41927574 53.36502826 7.02171413q138.95192427 17.71032427 273.06666667 0.62415253 38.38537173-4.8371808 54.53531413-7.33379093t44.1587808-13.1072 45.7191616-28.32091413zM827.65281813 777.10872427q-4.8371808 15.83786667-9.44030506 46.65539093t-8.50407574 51.18049493-17.39824746 42.6764192-35.34262827 34.4064q-52.4288 29.2571424-115.46819093 43.61264747t-123.1140576 13.41927573-122.8019808-11.3127616q-28.0088384-4.8371808-49.69813334-11.00068586t-46.65539093-16.4620192-44.4708576-26.52647574-31.67573333-37.4491424q-15.21371413-58.51428587-34.71847574-177.96144746l3.66689494-9.7523808 11.00068586-5.46133334q135.9091808 90.1900192 308.72137174 90.1900192t309.34552426-90.1900192q12.79512427 3.66689493 14.5895616 14.04342827t-3.0427424 27.46270507-4.8371808 22.54750506zM937.97175147 191.41973333q-15.83786667 101.8148576-67.64251414 399.22346667-3.0427424 18.2564576-16.4620192 34.1723424t-26.52647573 24.3419424-33.23611413 18.88060907q-153.61950507 76.7707424-371.8387808 53.67710506-151.12289493-16.4620192-240.14262827-84.72868586-9.12822827-7.33379093-15.52579093-16.1499424t-10.37653334-21.2992-5.46133333-20.75306667-3.66689493-24.10788587-3.3548192-21.2992q-5.46133333-30.50544747-16.1499424-91.43832426t-17.08617174-98.4600384-14.35550506-89.8779424-13.41927574-96.27550507q1.7944384-15.83786667 10.68860907-29.5692192t19.19268587-22.8595808 27.46270506-18.2564576 28.0088384-13.73135253 29.2571424-11.3127616q76.22460907-28.0088384 190.75657174-39.00952427 231.0144-22.54750507 412.01859093 30.50544747 94.48106667 28.0088384 131.072 74.35215253 9.7523808 12.17097173 10.0644576 31.0515808t-3.3548192 32.9240384z"></path></symbol> <symbol id="vssue-icon-gitea" viewBox="0 0 1024 1024"><path d="M184.31868985 236.10860742C106.94832667 235.94086648 3.32655508 285.13080468 9.02973665 408.46209936c8.93218827 192.65010787 206.32096845 210.5144844 285.20099725 212.06608453 8.63864186 36.14810496 101.48307766 160.77938883 170.21479898 167.32127321h301.09442177c180.57278288-11.99345499 315.77172611-546.07960359 215.54670217-548.09249109-165.7696721 7.79993906-264.02374305 11.74184405-348.27147151 12.41280591v166.69224585l-26.25140843-11.61603761-0.16773997-154.99233728c-96.70246985-0.04193548-181.83083757-4.52899687-343.4069947-12.49667687-20.21274496-0.12580547-48.39316992-3.5644886-78.67035236-3.64835859z m10.94507577 68.14462849h9.22573371c10.98701124 98.75729283 28.85138778 156.50200291 64.99949274 244.73357185-92.25734394-10.90314029-170.75995634-37.69970509-185.18564974-137.75698809-7.46445813-51.78991757 17.69663558-105.84433456 110.96042329-107.01851827z m358.83913087 97.07988723c6.29027343 0.08386999 12.70635233 1.25805468 18.74501482 4.02577499l31.40943263 13.54505513-22.51917887 41.05451824a28.18042496 25.03528825 0 0 0-10.10637297 1.59353561 28.18042496 25.03528825 0 0 0-16.98373825 32.038459 28.18042496 25.03528825 0 0 0 4.69673781 7.29671718l-38.83195528 70.70267333a28.18042496 25.03528825 0 0 0-9.30960467 1.59353659 28.18042496 25.03528825 0 0 0-16.98373825 32.038459 28.18042496 25.03528825 0 0 0 36.06423497 15.09665623 28.18042496 25.03528825 0 0 0 16.94180276-32.08039449 28.18042496 25.03528825 0 0 0-6.62575434-9.22573468l37.82551056-68.85752581a28.18042496 25.03528825 0 0 0 12.28700044-1.25805469 28.18042496 25.03528825 0 0 0 8.93218826-4.69673783c14.59343435 6.12253248 26.54495386 11.11281671 35.14166122 15.34826717 12.91602778 6.37414341 17.48696012 10.60959485 18.87082027 15.30633169 1.38386015 4.61286685-0.12580547 13.50312062-7.42252263 29.10299872-5.45157063 11.61603859-14.46762889 28.09655497-25.11915823 47.51253164a28.18042496 25.03528825 0 0 0-10.52572486 1.59353659 28.18042496 25.03528825 0 0 0-16.98373826 32.038459 28.18042496 25.03528825 0 0 0 36.06423498 15.09665623 28.18042496 25.03528825 0 0 0 16.94180278-32.03845901 28.18042496 25.03528825 0 0 0-5.74511608-8.47090188c10.52572388-19.20630122 19.58371762-35.72875308 25.41270465-48.14155897 7.88380904-16.85793279 11.99345499-29.39654416 8.38703091-41.51580463-3.60642311-12.11926046-14.67730434-20.0030695-29.35460966-27.25785217-9.6450856-4.73867233-21.68047607-9.77089106-36.06423399-15.80955357a28.18042496 25.03528825 0 0 0-1.59353562-10.022502 28.18042496 25.03528825 0 0 0-6.08059796-8.7644483l22.14176246-40.38355541 122.61839638 52.96410227c22.14176247 9.6031511 31.2836262 33.12877372 20.54822685 52.8382968l-84.28966393 154.32137544c-10.77733482 19.66758857-37.23841869 27.80300855-59.38018118 18.24179293l-173.48574115-74.98005927c-22.14176247-9.5612156-31.32556167-33.12877372-20.54822687-52.83829679l84.28966395-154.27943995c7.38058716-13.54505513 22.22563246-21.59660511 37.951317-22.22563246h2.68384935z"></path></symbol> <symbol id="vssue-icon-gitee" viewBox="0 0 1024 1024"><path d="M978.404275 409.561604H455.061338c-25.117645 0-45.499734 20.382089-45.499734 45.499734l-0.031997 113.781333c0 25.117645 20.350092 45.499734 45.499734 45.531731h318.594132c25.117645 0 45.499734 20.382089 45.499734 45.499735v22.749867a136.5312 136.5312 0 0 1-136.5312 136.5312H250.248539a45.499734 45.499734 0 0 1-45.499734-45.499734V341.343999a136.5312 136.5312 0 0 1 136.5312-136.5312L978.308284 204.780802c25.117645 0 45.499734-20.350092 45.499734-45.467738L1023.904009 45.531731h0.031997A45.499734 45.499734 0 0 0 978.468269 0h-0.031997L341.343999 0.031997C152.84967 0.031997 0.031997 152.84967 0.031997 341.343999v637.092273c0 25.117645 20.382089 45.499734 45.499734 45.499734h671.233072a307.171203 307.171203 0 0 0 307.171203-307.171203v-261.671468c0-25.117645-20.382089-45.499734-45.499734-45.499734z"></path></symbol> <symbol id="vssue-icon-github" viewBox="0 0 1024 1024"><path d="M512 20.4425c-278.334 0-504 225.6345-504 504 0 222.6735 144.4275 411.6105 344.673 478.233 25.2 4.662 34.461-10.9305 34.461-24.255 0-12.0015-0.4725-51.723-0.693-93.8385-140.238 30.492-169.8165-59.472-169.8165-59.472-22.932-58.2435-55.944-73.7415-55.944-73.7415-45.738-31.2795 3.465-30.6495 3.465-30.6495 50.589 3.5595 77.238 51.9435 77.238 51.9435 44.9505 77.049 117.9045 54.7785 146.664 41.895 4.5045-32.571 17.577-54.81 32.004-67.41-111.951-12.726-229.635-55.9755-229.635-249.0705 0-55.0305 19.6875-99.981 51.9435-135.2925-5.229-12.6945-22.491-63.945 4.8825-133.371 0 0 42.336-13.545 138.6315 51.66 40.194-11.1825 83.3175-16.758 126.1575-16.9785 42.8085 0.189 85.9635 5.796 126.252 16.9785 96.201-65.205 138.4425-51.66 138.4425-51.66 27.4365 69.426 10.1745 120.6765 4.9455 133.371 32.319 35.28 51.8805 80.262 51.8805 135.2925 0 193.5675-117.9045 236.187-230.139 248.6925 18.081 15.6555 34.1775 46.305 34.1775 93.3345 0 67.4415-0.5985 121.716-0.5985 138.3165 0 13.419 9.072 29.1375 34.6185 24.192 200.151-66.717 344.3895-255.5595 344.3895-478.17 0-278.3655-225.666-504-504-504z"></path></symbol> <symbol id="vssue-icon-gitlab" viewBox="0 0 1024 1024"><path d="M66.61375986 405.11600042L512.11376028 976.03999972 23.84576 621.65599958a39.312 39.312 0 0 1-14.07600042-43.30799944l56.8080007-173.26800028z m259.88400014 0h371.26800014L512.14975986 976.03999972zM215.11376 60.88400042l111.384 344.232H66.61375986l111.384-344.232a19.72800014 19.72800014 0 0 1 37.11600014 0z m742.49999972 344.232l56.8080007 173.2679993a39.23999986 39.23999986 0 0 1-14.07600042 43.30800042l-488.26800028 354.38400014 445.50000042-570.92400028z m0 0h-259.88400014l111.384-344.232a19.72800014 19.72800014 0 0 1 37.11600014 0z"></path></symbol> <symbol id="vssue-icon-loading" viewBox="0 0 1024 1024"><path d="M843.307 742.24c0 3.217 2.607 5.824 5.824 5.824s5.824-2.607 5.824-5.824a5.823 5.823 0 0 0-5.824-5.824 5.823 5.823 0 0 0-5.824 5.824zM714.731 874.912c0 6.398 5.186 11.584 11.584 11.584s11.584-5.186 11.584-11.584-5.186-11.584-11.584-11.584-11.584 5.186-11.584 11.584zM541.419 943.2c0 9.614 7.794 17.408 17.408 17.408s17.408-7.794 17.408-17.408-7.794-17.408-17.408-17.408-17.408 7.794-17.408 17.408z m-186.56-9.152c0 12.795 10.373 23.168 23.168 23.168s23.168-10.373 23.168-23.168-10.373-23.168-23.168-23.168-23.168 10.373-23.168 23.168zM189.355 849.12c0 16.012 12.98 28.992 28.992 28.992s28.992-12.98 28.992-28.992-12.98-28.992-28.992-28.992-28.992 12.98-28.992 28.992zM74.731 704.736c0 19.228 15.588 34.816 34.816 34.816s34.816-15.588 34.816-34.816-15.588-34.816-34.816-34.816-34.816 15.588-34.816 34.816z m-43.008-177.28c0 22.41 18.166 40.576 40.576 40.576s40.576-18.166 40.576-40.576-18.166-40.576-40.576-40.576-40.576 18.166-40.576 40.576z m35.392-176.128c0 25.626 20.774 46.4 46.4 46.4s46.4-20.774 46.4-46.4c0-25.626-20.774-46.4-46.4-46.4-25.626 0-46.4 20.774-46.4 46.4z m106.176-142.016c0 28.843 23.381 52.224 52.224 52.224s52.224-23.381 52.224-52.224c0-28.843-23.381-52.224-52.224-52.224-28.843 0-52.224 23.381-52.224 52.224z m155.904-81.344c0 32.024 25.96 57.984 57.984 57.984s57.984-25.96 57.984-57.984-25.96-57.984-57.984-57.984-57.984 25.96-57.984 57.984z m175.104-5.056c0 35.24 28.568 63.808 63.808 63.808s63.808-28.568 63.808-63.808c0-35.24-28.568-63.808-63.808-63.808-35.24 0-63.808 28.568-63.808 63.808z m160.32 72.128c0 38.421 31.147 69.568 69.568 69.568s69.568-31.147 69.568-69.568-31.147-69.568-69.568-69.568-69.568 31.147-69.568 69.568z m113.92 135.488c0 41.638 33.754 75.392 75.392 75.392s75.392-33.754 75.392-75.392-33.754-75.392-75.392-75.392-75.392 33.754-75.392 75.392z m45.312 175.488c0 44.854 36.362 81.216 81.216 81.216s81.216-36.362 81.216-81.216c0-44.854-36.362-81.216-81.216-81.216-44.854 0-81.216 36.362-81.216 81.216z"></path></symbol> <symbol id="vssue-icon-like" viewBox="0 0 1024 1024"><path d="M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 0 0-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4-20.5-21.5-48.1-33.4-77.9-33.4-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-0.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81z m636.4-353l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4c4.6 8.4 6.9 17.6 6.9 27.3 0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5c5.2-18.9 22.5-32.2 42.2-32.3 7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z"></path></symbol> <symbol id="vssue-icon-unlike" viewBox="0 0 1024 1024"><path d="M885.9 490.3c3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-28.3-9.3-55.5-26.1-77.7 3.6-12 5.4-24.4 5.4-37 0-51.6-30.7-98.1-78.3-118.4-8.3-3.6-17.2-5.4-26.5-5.4H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h129.3l85.8 310.8C372.9 889 418.9 924 470.9 924c29.7 0 57.4-11.8 77.9-33.4 20.5-21.5 31-49.7 29.5-79.4l-6-122.9h239.9c12.1 0 23.9-3.2 34.3-9.3 40.4-23.5 65.5-66.1 65.5-111 0-28.3-9.3-55.5-26.1-77.7zM184 456V172h81v284h-81z m627.2 160.4H496.8l9.6 198.4c0.6 11.9-4.7 23.1-14.6 30.5-6.1 4.5-13.6 6.8-21.1 6.7-19.6-0.1-36.9-13.4-42.2-32.3L329 459.2V172h415.4c20.4 9.2 33.6 29.4 33.6 51.8 0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 9.7-2.3 18.9-6.9 27.3l-13.9 25.4 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 9.7-2.3 18.9-6.9 27.3l-14 25.5 21.9 19c12.5 10.8 19.6 26.5 19.6 43 0 19.1-11 37.5-28.8 48.4z"></path></symbol> <symbol id="vssue-icon-heart" viewBox="0 0 1024 1024"><path d="M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z"></path></symbol> <symbol id="vssue-icon-edit" viewBox="0 0 1024 1024"><path d="M723.2 917.76H286.72c-65.28 0-118.4-51.2-118.4-113.92V261.76C168.32 198.4 221.44 147.2 286.72 147.2h375.04c17.92 0 32 14.08 32 32s-14.08 32-32 32H286.72c-30.08 0-54.4 22.4-54.4 49.92v542.08c0 27.52 24.32 49.92 54.4 49.92H723.2c30.08 0 54.4-22.4 54.4-49.92V440.32c0-17.92 14.08-32 32-32s32 14.08 32 32v363.52c0 62.72-53.12 113.92-118.4 113.92z"></path> <path d="M499.84 602.24c-7.68 0-14.72-2.56-21.12-7.68-13.44-11.52-14.72-32-3.2-45.44L780.16 198.4c11.52-13.44 32-14.72 45.44-3.2s14.72 32 3.2 45.44L524.16 591.36c-6.4 7.04-15.36 10.88-24.32 10.88z"></path></symbol> <symbol id="vssue-icon-delete" viewBox="0 0 1024 1024"><path d="M677.647059 256l0-90.352941c0-37.436235-23.461647-60.235294-61.771294-60.235294L408.094118 105.411765c-38.249412 0-61.741176 22.799059-61.741176 60.235294l0 90.352941-180.705882 0 0 60.235294 60.235294 0 0 512c0 54.272 33.972706 90.352941 90.352941 90.352941l391.529412 0c55.085176 0 90.352941-33.490824 90.352941-90.352941l0-512 60.235294 0 0-60.235294L677.647059 256zM406.588235 165.647059l210.823529 0-1.264941 90.352941L406.588235 256 406.588235 165.647059zM737.882353 858.352941l-451.764706 0 0-542.117647 451.764706 0L737.882353 858.352941zM466.823529 376.470588l-58.729412 0-1.505882 391.529412 60.235294 0L466.823529 376.470588zM617.411765 376.470588l-60.235294 0 0 391.529412 60.235294 0L617.411765 376.470588z"></path></symbol> <symbol id="vssue-icon-reply" viewBox="0 0 1024 1024"><path d="M426.666667 384 426.666667 213.333333 128 512 426.666667 810.666667 426.666667 635.733333C640 635.733333 789.333333 704 896 853.333333 853.333333 640 725.333333 426.666667 426.666667 384Z"></path></symbol> <symbol id="vssue-icon-error" viewBox="0 0 1024 1024"><path d="M512 720m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z"></path> <path d="M480 416v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z"></path> <path d="M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48z m-783.5-27.9L512 239.9l339.8 588.2H172.2z"></path></symbol></svg> <div class="vssue-header"><a target="_blank" rel="noopener noreferrer" class="vssue-header-comments-count"><span>
      Comments
    </span></a> <span class="vssue-header-powered-by"><span>Powered by</span> <span><a href="https://github.com/" title="GitHub API v3" target="_blank" rel="noopener noreferrer">
        GitHub
      </a> <span>&amp;</span></span> <a href="https://github.com/meteorlxy/vssue" title="Vssue v1.4.8" target="_blank" rel="noopener noreferrer">
      Vssue
    </a></span></div> <div class="vssue-body"><div class="vssue-new-comment"><div class="vssue-comment-avatar"><svg aria-hidden="true" class="vssue-icon vssue-icon-github"><title>Login with GitHub account to leave a comment</title><use xlink:href="#vssue-icon-github"></use></svg></div> <div class="vssue-new-comment-body"><textarea rows="5" disabled="disabled" placeholder="Login to leave a comment. Styling with Markdown is supported. " spellcheck="false" aria-label="leave a comment" class="vssue-new-comment-input"></textarea></div> <div class="vssue-new-comment-footer"><span class="vssue-current-user">
      Login with GitHub account to leave a comment
    </span> <div class="vssue-new-comment-operations"><button title="Login with GitHub account to leave a comment" class="vssue-button-login vssue-button vssue-button-primary">
        Login with GitHub
      </button></div></div></div> <div class="vssue-notice"><div class="vssue-progress" style="width: 0%; transition: all 200ms linear 0s; display: none;"></div> <div class="vssue-alert" style="display: none;"></div></div> <div class="vssue-status"><!----> <p class="vssue-status-info"><a>
        Click to create issue
      </a></p></div></div></div></div></div></div></div></div></div> <script type="text/javascript" async="" src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/analytics.js"></script><script async="async" src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/js.js"></script> <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'UA-161835814-1');
    </script></div><div class="global-ui"></div></div>
<script src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/app.js" defer="defer"></script><script src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/18.js" defer="defer"></script><script src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/4.js" defer="defer"></script><script src="2019%20-%20%22CVE-2017-16995%20Analysis%20-%20eBPF%20Sign%20Extension%20LPE%22%20by%20senyuuri_files/3.js" defer="defer"></script>


</body></html>