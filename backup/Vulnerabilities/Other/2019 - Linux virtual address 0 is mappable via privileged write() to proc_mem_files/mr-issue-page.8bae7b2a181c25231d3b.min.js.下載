(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{185:function(e,t,s){"use strict";var i=s(0),r=s(1),a=s.n(r),n=s(83),o=s.n(n),l=s(85),c=s.n(l),d=s(191),h=s(296),p=s(9),u=s(15),m=s(20),g=s(6),f=s(11),b=s(291),v=s(295),y=s(292);function _(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,i)}return s}function w(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function x(){return(x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(e[i]=s[i])}return e}).apply(this,arguments)}function $(e){return function(e){if(Array.isArray(e))return k(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return k(e,t);var s=Object.prototype.toString.call(e).slice(8,-1);"Object"===s&&e.constructor&&(s=e.constructor.name);if("Map"===s||"Set"===s)return Array.from(e);if("Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s))return k(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,i=new Array(t);s<t;s++)i[s]=e[s];return i}function O(e){var t=e.label,s=e.options,i=e.value,r=void 0===i?void 0:i,n=e.fixedValues,o=void 0===n?[]:n,l=e.inputType,c=void 0===l?"text":l,d=e.multiple,h=void 0!==d&&d,p=e.placeholder,u=void 0===p?"":p,m=e.onChange,g=void 0===m?function(){}:m,f=e.getOptionDescription,v=void 0===f?function(){return""}:f,y=e.getOptionLabel,_=void 0===y?function(e){return String(e)}:y;return r=r||(h?[]:""),a.a.createElement(b.a,{id:t,autoHighlight:!0,autoSelect:!0,filterOptions:I(v),filterSelectedOptions:h,freeSolo:!0,getOptionLabel:_,multiple:h,onChange:j(o,h,g),onKeyDown:C,options:s,renderInput:S(c,u),renderOption:E(v,_),renderTags:N(o,_),style:{width:"var(--mr-edit-field-width)"},value:h?[].concat($(o),$(r)):r})}function I(e){return function(t,s){var i=s.inputValue,r=s.getOptionLabel;if(!i.length)return[];var a=R(i);return t.filter((function(t){return r(t).match(a)||e(t).match(a)})).slice(0,100)}}function j(e,t,s){return function(i,r,a,n){t&&(r=r.filter((function(t){return!e.includes(t)}))),s(i,r,a,n)}}function C(e){" "===e.key&&(e.key="Enter")}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"text",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return function(s){return a.a.createElement(y.a,x({},s,{variant:"standard",size:"small",type:e,placeholder:t}))}}function E(e,t){return function(s,i,r){var n=r.inputValue,o=t(i),l=o.match(R(n)),c=a.a.createElement(a.a.Fragment,null,o);l&&(c=a.a.createElement(a.a.Fragment,null,l[1],a.a.createElement("strong",null,l[2]),l[3]));var d=e(i),h=d&&d.match(R(n)),p=a.a.createElement(a.a.Fragment,null,d);return h&&(p=a.a.createElement(a.a.Fragment,null,h[1],a.a.createElement("strong",null,h[2]),h[3])),a.a.createElement("li",x({},s,{className:"".concat(s.className," autocomplete-option"),style:{display:"flex",flexDirection:"row",wordWrap:"break-word"}}),a.a.createElement("span",{style:{display:"block",width:d?"40%":"100%"}},c),d&&a.a.createElement("span",{style:{display:"block",boxSizing:"border-box",paddingLeft:"8px",width:"60%"}},p))}}function N(e,t){return function(s,i){return s.map((function(s,r){var n=function(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?_(Object(s),!0).forEach((function(t){w(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):_(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}({},i({index:r})),o=e.includes(s);o&&delete n.onDelete;var l=t(s);return a.a.createElement(v.a,x({},n,{key:l,label:l,disabled:o,size:"small"}))}))}}function R(e){var t=e.replace(/([\^*+\-\$\\\{\}\(\)\[\]\#?\.])/g,"\\$1");return new RegExp("^(.*\\W)?("+t+")(.*)","i")}function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e){return function(e){if(Array.isArray(e))return G(e)}(e)||Y(e)||W(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function P(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var s,i=Q(e);if(t){var r=Q(this).constructor;s=Reflect.construct(i,arguments,r)}else s=i.apply(this,arguments);return M(this,s)}}function M(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?z(e):t}function z(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function B(e){var t,s=H(e.key);"method"===e.kind?t={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?t={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind?t={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(t={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kind?"field":"method",key:s,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:t};return e.decorators&&(i.decorators=e.decorators),"field"===e.kind&&(i.initializer=e.value),i}function L(e,t){void 0!==e.descriptor.get?t.descriptor.get=e.descriptor.get:t.descriptor.set=e.descriptor.set}function V(e){return e.decorators&&e.decorators.length}function q(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function U(e,t){var s=e[t];if(void 0!==s&&"function"!=typeof s)throw new TypeError("Expected '"+t+"' to be a function");return s}function H(e){var t=function(e,t){if("object"!==D(e)||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var i=s.call(e,t||"default");if("object"!==D(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===D(t)?t:String(t)}function W(e,t){if(e){if("string"==typeof e)return G(e,t);var s=Object.prototype.toString.call(e).slice(8,-1);return"Object"===s&&e.constructor&&(s=e.constructor.name),"Map"===s||"Set"===s?Array.from(e):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?G(e,t):void 0}}function G(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,i=new Array(t);s<t;s++)i[s]=e[s];return i}function Y(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function K(e,t,s){return(K="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,s){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Q(e)););return e}(e,t);if(i){var r=Object.getOwnPropertyDescriptor(i,t);return r.get?r.get.call(s):r.value}})(e,t,s||e)}function Q(e){return(Q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var J=function(e,t,s,i){var r=function(){(function(){return e});var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,t){["method","field"].forEach((function(s){t.forEach((function(t){t.kind===s&&"own"===t.placement&&this.defineClassElement(e,t)}),this)}),this)},initializeClassElements:function(e,t){var s=e.prototype;["method","field"].forEach((function(i){t.forEach((function(t){var r=t.placement;if(t.kind===i&&("static"===r||"prototype"===r)){var a="static"===r?e:s;this.defineClassElement(a,t)}}),this)}),this)},defineClassElement:function(e,t){var s=t.descriptor;if("field"===t.kind){var i=t.initializer;s={enumerable:s.enumerable,writable:s.writable,configurable:s.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,t.key,s)},decorateClass:function(e,t){var s=[],i=[],r={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,r)}),this),e.forEach((function(e){if(!V(e))return s.push(e);var t=this.decorateElement(e,r);s.push(t.element),s.push.apply(s,t.extras),i.push.apply(i,t.finishers)}),this),!t)return{elements:s,finishers:i};var a=this.decorateConstructor(s,t);return i.push.apply(i,a.finishers),a.finishers=i,a},addElementPlacement:function(e,t,s){var i=t[e.placement];if(!s&&-1!==i.indexOf(e.key))throw new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,t){for(var s=[],i=[],r=e.decorators,a=r.length-1;a>=0;a--){var n=t[e.placement];n.splice(n.indexOf(e.key),1);var o=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,r[a])(o)||o);e=l.element,this.addElementPlacement(e,t),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var d=0;d<c.length;d++)this.addElementPlacement(c[d],t);s.push.apply(s,c)}}return{element:e,finishers:i,extras:s}},decorateConstructor:function(e,t){for(var s=[],i=t.length-1;i>=0;i--){var r=this.fromClassDescriptor(e),a=this.toClassDescriptor((0,t[i])(r)||r);if(void 0!==a.finisher&&s.push(a.finisher),void 0!==a.elements){e=a.elements;for(var n=0;n<e.length-1;n++)for(var o=n+1;o<e.length;o++)if(e[n].key===e[o].key&&e[n].placement===e[o].placement)throw new TypeError("Duplicated element ("+e[n].key+")")}}return{elements:e,finishers:s}},fromElementDescriptor:function(e){var t={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(t,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"field"===e.kind&&(t.initializer=e.initializer),t},toElementDescriptors:function(e){var t;if(void 0!==e)return(t=e,function(e){if(Array.isArray(e))return e}(t)||Y(t)||W(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){var t=this.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element descriptor"),t}),this)},toElementDescriptor:function(e){var t=String(e.kind);if("method"!==t&&"field"!==t)throw new TypeError('An element descriptor\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+t+'"');var s=H(e.key),i=String(e.placement);if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError('An element descriptor\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+i+'"');var r=e.descriptor;this.disallowProperty(e,"elements","An element descriptor");var a={kind:t,key:s,placement:i,descriptor:Object.assign({},r)};return"field"!==t?this.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(r,"get","The property descriptor of a field descriptor"),this.disallowProperty(r,"set","The property descriptor of a field descriptor"),this.disallowProperty(r,"value","The property descriptor of a field descriptor"),a.initializer=e.initializer),a},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:U(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var t={kind:"class",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(t,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),t},toClassDescriptor:function(e){var t=String(e.kind);if("class"!==t)throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator created a class descriptor with .kind "'+t+'"');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placement","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descriptor"),this.disallowProperty(e,"extras","A class descriptor");var s=U(e,"finisher");return{elements:this.toElementDescriptors(e.elements),finisher:s}},runClassFinishers:function(e,t){for(var s=0;s<t.length;s++){var i=(0,t[s])(e);if(void 0!==i){if("function"!=typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,t,s){if(void 0!==e[t])throw new TypeError(s+" can't have a ."+t+" property.")}};return e}();if(i)for(var a=0;a<i.length;a++)r=i[a](r);var n=t((function(e){r.initializeInstanceElements(e,o.elements)}),s),o=r.decorateClass(function(e){for(var t=[],s=function(e){return"method"===e.kind&&e.key===a.key&&e.placement===a.placement},i=0;i<e.length;i++){var r,a=e[i];if("method"===a.kind&&(r=t.find(s)))if(q(a.descriptor)||q(r.descriptor)){if(V(a)||V(r))throw new ReferenceError("Duplicated methods ("+a.key+") can't be decorated.");r.descriptor=a.descriptor}else{if(V(a)){if(V(r))throw new ReferenceError("Decorators can't be placed on different accessors with for the same property ("+a.key+").");r.decorators=a.decorators}L(a,r)}else t.push(a)}return t}(n.d.map(B)),e);return r.initializeClassElements(n.F,o.elements),r.runClassFinishers(n.F,o.finishers)}(null,(function(e,t){var s=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(i,t);var s=F(i);function i(){var t;P(this,i);for(var r=arguments.length,a=new Array(r),n=0;n<r;n++)a[n]=arguments[n];return t=s.call.apply(s,[this].concat(a)),e(z(t)),t}return i}(t);return{F:s,d:[{kind:"field",decorators:[Object(i.e)()],key:"label",value:function(){return""}},{kind:"field",decorators:[Object(i.e)()],key:"vocabularyName",value:function(){return""}},{kind:"field",decorators:[Object(i.e)({hasChanged:function(e,t){return!c()(e,t)}})],key:"value",value:function(){}},{kind:"field",decorators:[Object(i.e)({hasChanged:function(e,t){return!c()(e,t)}})],key:"fixedValues",value:function(){return[]}},{kind:"field",decorators:[Object(i.e)()],key:"inputType",value:function(){return"text"}},{kind:"field",decorators:[Object(i.e)()],key:"multiple",value:function(){return!1}},{kind:"field",decorators:[Object(i.e)()],key:"placeholder",value:function(){return""}},{kind:"field",decorators:[Object(i.e)()],key:"onChange",value:function(){return function(){}}},{kind:"field",decorators:[Object(i.d)()],key:"_components",value:function(){return new Map}},{kind:"field",decorators:[Object(i.d)()],key:"_labels",value:function(){return new Map}},{kind:"field",decorators:[Object(i.d)()],key:"_members",value:function(){return{}}},{kind:"field",decorators:[Object(i.d)()],key:"_projects",value:function(){return{}}},{kind:"method",key:"createRenderRoot",value:function(){return this}},{kind:"method",key:"updated",value:function(e){K(Q(s.prototype),"updated",this).call(this,e);var t=Object(d.a)({components:{MuiChip:{styleOverrides:{root:{fontSize:13},label:{textOverflow:"ellipsis",maxWidth:"290px"}}}},palette:{action:{disabledOpacity:.6},primary:{main:"#1976d2"}},typography:{fontSize:11.375}}),i=a.a.createElement(h.a,{theme:t},a.a.createElement(O,{label:this.label,options:this._options(),value:this.value,fixedValues:this.fixedValues,inputType:this.inputType,multiple:this.multiple,placeholder:this.placeholder,onChange:this.onChange,getOptionDescription:this._getOptionDescription.bind(this),getOptionLabel:function(e){return e}}));o.a.render(i,this)}},{kind:"method",key:"stateChanged",value:function(e){K(Q(s.prototype),"stateChanged",this).call(this,e),this._components=u.a(e),this._labels=u.k(e),this._members=u.v(e),this._projects=m.k(e)}},{kind:"method",key:"_getOptionDescription",value:function(e){switch(this.vocabularyName){case"component":var t=this._components.get(e);return t&&t.docstring||"";case"label":var s=this._labels.get(e.toLowerCase());return s&&s.docstring||"";default:return""}}},{kind:"method",key:"_options",value:function(){switch(this.vocabularyName){case"component":return A(this._components.keys());case"label":return A(this._labels.values()).map((function(e){return e.label}));case"member":var e=this._members.userRefs,t=void 0===e?[]:e;return Object(g.B)(t);case"owner":var s=this._members,i=s.userRefs,r=void 0===i?[]:i,a=s.groupRefs,n=void 0===a?[]:a,o=Object(g.B)(r),l=Object(g.B)(n);return Object(f.a)(o,l);case"project":var c=this._projects,d=c.ownerOf,h=void 0===d?[]:d,p=c.memberOf,u=void 0===p?[]:p,m=c.contributorTo,b=void 0===m?[]:m;return[].concat(A(h),A(u),A(b));case"":return[];default:throw new Error("Unknown vocabulary name: ".concat(this.vocabularyName))}}}]}}),Object(p.a)(i.a));customElements.define("mr-react-autocomplete",J)},196:function(e,t,s){"use strict";var i=s(0),r=s(9),a=s(16),n=s(14),o=s(33);const l=[n.b,"a_deleted_user"];class c extends(Object(r.a)(i.a)){static get styles(){return[o.c,i.b`
        :host {
          display: inline-block;
          white-space: nowrap;
        }
        i.inline-icon {
          font-size: var(--chops-icon-font-size);
          color: #B71C1C;
          vertical-align: bottom;
          cursor: pointer;
        }
        i.inline-icon-unseen {
          color: var(--chops-purple-700);
        }
        i.material-icons[hidden] {
          display: none;
        }
        .availability-notice {
          color: #B71C1C;
          font-weight: bold;
        }
      `]}static get properties(){return{referencedUsers:{type:Object},showAvailabilityIcon:{type:Boolean},showAvailabilityText:{type:Boolean},userRef:{type:Object,attribute:"userref"}}}constructor(){super(),this.userRef={},this.referencedUsers=new Map,this.showAvailabilityIcon=!1,this.showAvailabilityText=!1}stateChanged(e){this.referencedUsers=a.D(e)}render(){const e=this._getAvailability(),t=this._getUserLink(),s=this.referencedUsers.get(this.userRef.displayName)||{};return i.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <i
        id="availability-icon"
        class="material-icons inline-icon ${s.last_visit_timestamp?"":"inline-icon-unseen"}"
        title="${e}"
        ?hidden="${!(this.showAvailabilityIcon&&e)}"
      >schedule</i>
      <a
        id="user-link"
        href="${t}"
        title="${this.userRef.displayName}"
        ?hidden="${!t}"
      >${this.userRef.displayName}</a>
      <span
        id="user-text"
        ?hidden="${t}"
      >${this.userRef.displayName}</span>
      <div
        id="availability-text"
        class="availability-notice"
        title="${e}"
        ?hidden="${!(this.showAvailabilityText&&e)}"
      >${e}</div>
    `}_getAvailability(){if(!this.userRef||!this.referencedUsers)return"";return(this.referencedUsers.get(this.userRef.displayName)||{}).availability}_getUserLink(){return this.userRef&&this.userRef.displayName&&!l.includes(this.userRef.displayName)?"/u/"+(this.userRef.userId||this.userRef.displayName):""}}customElements.define("mr-user-link",c)},199:function(e,t,s){"use strict";var i=s(0);class r extends i.a{static get styles(){return i.b`
      :host {
        display: flex;
        align-items: center;
        flex-direction: row;
        justify-content: flex-start;
        box-sizing: border-box;
        width: 100%;
        margin: 0.5em 0;
        padding: 0.25em 8px;
        border: 1px solid #B71C1C;
        border-radius: 4px;
        background: #FFEBEE;
      }
      :host([hidden]) {
        display: none;
      }
      i.material-icons {
        color: #B71C1C;
        margin-right: 4px;
      }
    `}render(){return i.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <i class="material-icons">close</i>
      <slot></slot>
    `}}customElements.define("mr-error",r)},202:function(e,t,s){"use strict";var i=s(0),r=s(62),a=s(74),n=s(9),o=s(16),l=s(15),c=s(20),d=s(33),h=s(66),p=s(184);class u extends(Object(n.a)(i.a)){constructor(){super(),this.content="",this.commentReferences=new Map,this.isDeleted=!1,this.projectName="",this.author="",this.prefs={}}static get properties(){return{content:{type:String},commentReferences:{type:Object},revisionUrlFormat:{type:String},isDeleted:{type:Boolean,reflect:!0},projectName:{type:String},author:{type:String},prefs:{type:Object}}}static get styles(){return[d.c,d.b,i.b`
        :host {
          word-break: break-word;
          font-size: var(--chops-main-font-size);
          line-height: 130%;
          font-family: var(--mr-toggled-font-family);
        }
        :host([isDeleted]) {
          color: #888;
          font-style: italic;
        }
        .line {
          white-space: pre-wrap;
        }
        .strike-through {
          text-decoration: line-through;
        }
      `]}render(){if(Object(h.d)({project:this.projectName,author:this.author,enabled:this._renderMarkdown}))return i.c`
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <div class="markdown">
          ${Object(p.a)(Object(h.c)(this.content))}
        </div>
        `;const e=a.a.markupAutolinks(this.content,this.commentReferences,this.projectName,this.revisionUrlFormat).map(e=>{switch(e.tag){case"b":return i.c`<b class="line">${e.content}</b>`;case"br":return i.c`<br>`;case"a":return i.c`<a
            class="line"
            target="_blank"
            href=${e.href}
            class=${e.css}
            title=${Object(r.a)(e.title)}
          >${e.content}</a>`;default:return i.c`<span class="line">${e.content}</span>`}});return i.c`${e}`}get _renderMarkdown(){const{prefs:e}=this;return!e||e.get("render_markdown")}stateChanged(e){this.commentReferences=o.b(e),this.projectName=o.R(e).projectName,this.revisionUrlFormat=l.r(e).revisionUrlFormat,this.prefs=c.j(e)}}customElements.define("mr-comment-content",u)},203:function(e,t,s){"use strict";var i=s(0),r=s(85),a=s.n(r),n=s(14),o=s(11),l=s(100);class c extends i.a{static get styles(){return i.b`
      input[type="checkbox"] {
        width: auto;
        height: auto;
      }
    `}render(){return i.c`
      ${this.options.map(e=>i.c`
        <label title=${e.docstring}>
          <input
            type="checkbox"
            name=${this.name}
            value=${e.optionName}
            ?checked=${this.values.includes(e.optionName)}
            @change=${this._changeHandler}
          />
          ${e.optionName}
        </label>
      `)}
    `}static get properties(){return{values:{type:Array},options:{type:Array},_inputRefs:{type:Object}}}updated(e){e.has("options")&&(this._inputRefs=this.shadowRoot.querySelectorAll("input")),e.has("values")&&this.reset()}reset(){this.setValues(this.values)}getValues(){if(!this._inputRefs)return;const e=[];return this._inputRefs.forEach(t=>{t.checked&&e.push(t.value.trim())}),e}setValues(e){this._inputRefs&&this._inputRefs.forEach(t=>{t.checked=e.includes(t.value)})}_changeHandler(){this.dispatchEvent(new CustomEvent("change"))}}customElements.define("mr-multi-checkbox",c);s(185);class d extends i.a{createRenderRoot(){return this}render(){return i.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <style>
        mr-edit-field {
          display: block;
        }
        mr-edit-field[hidden] {
          display: none;
        }
        mr-edit-field input,
        mr-edit-field select {
          width: var(--mr-edit-field-width);
          padding: var(--mr-edit-field-padding);
        }
      </style>
      ${this._renderInput()}
    `}_renderInput(){switch(this._widgetType){case"CHECKBOX_INPUT":return i.c`
          <mr-multi-checkbox
            .options=${this.options}
            .values=${[...this.values]}
            @change=${this._changeHandler}
          ></mr-multi-checkbox>
        `;case"SELECT_INPUT":return i.c`
          <select
            id="${this.label}"
            class="editSelect"
            aria-label=${this.name}
            @change=${this._changeHandler}
          >
            <option value="">${n.b}</option>
            ${this.options.map(e=>i.c`
              <option
                value=${e.optionName}
                .selected=${this.value===e.optionName}
              >
                ${e.optionName}
                ${e.docstring?" = "+e.docstring:""}
              </option>
            `)}
          </select>
        `;case"AUTOCOMPLETE_INPUT":return i.c`
          <mr-react-autocomplete
            .label=${this.label}
            .vocabularyName=${this.acType||""}
            .inputType=${this._html5InputType}
            .fixedValues=${this.derivedValues}
            .value=${this.multi?this.values:this.value}
            .multiple=${this.multi}
            .onChange=${this._changeHandlerReact.bind(this)}
          ></mr-react-autocomplete>
        `;default:return""}}static get properties(){return{acType:{type:String},type:{type:String},label:{type:String},multi:{type:Boolean},name:{type:String},placeholder:{type:String},initialValues:{type:Array,hasChanged:(e,t)=>!a()(e,t)},values:{type:Array},derivedValues:{type:Array},options:{type:Array}}}constructor(){super(),this.initialValues=[],this.values=[],this.derivedValues=[],this.options=[],this.multi=!1,this.actType="",this.placeholder="",this.type=""}update(e){e.has("initialValues")&&this.reset(),super.update(e)}get value(){return(e=this.values)&&e.length?e[0]:"";var e}get _widgetType(){const e=this.type,t=this.multi;return e===n.g.ENUM_TYPE?t?"CHECKBOX_INPUT":"SELECT_INPUT":"AUTOCOMPLETE_INPUT"}get _html5InputType(){const e=this.type;return e===n.g.INT_TYPE?"number":e===n.g.DATE_TYPE?"date":"text"}reset(){this.values=h(this.initialValues)}getValuesAdded(){return this.values&&this.values.length?Object(o.a)(this.values,this.initialValues,o.e):[]}getValuesRemoved(){return this.multi||this.values&&!(this.values.length>0)?Object(o.a)(this.initialValues,this.values,o.e):[]}_changeHandler(e){if(e instanceof KeyboardEvent&&l.a.has(e.key))return;const t=e.target;if(t.getValues)this.values=t.getValues();else{const e=t.value.trim();this.values=h(e)}this.dispatchEvent(new Event("change"))}_changeHandlerReact(e,t){this.values=h(t),this.dispatchEvent(new Event("change"))}}function h(e){if(!e)return[];let t=e;return Array.isArray(e)||(t=e?[e]:[]),[...t]}customElements.define("mr-edit-field",d)},230:function(e,t,s){"use strict";var i=s(0),r=s(27),a=s.n(r),n=s(9),o=s(23),l=s(33);class c extends(Object(n.a)(i.a)){static get properties(){return{currentIndex:{type:Number},totalCount:{type:Number},prevUrl:{type:String},nextUrl:{type:String},listUrl:{type:String},queryParams:{type:Object}}}constructor(){super(),this.currentIndex=null,this.totalCount=null,this.prevUrl=null,this.nextUrl=null,this.listUrl=null,this.queryParams={}}stateChanged(e){this.queryParams=o.i(e)}updated(e){e.has("queryParams")&&this.fetchFlipperData(a.a.stringify(this.queryParams))}fetchFlipperData(e){fetch("detail/flipper?"+e,{credentials:"include",method:"GET"}).then(e=>e.text()).then(e=>{let t;try{t=JSON.parse(e.substr(5))}catch(e){return void console.error("Error parsing JSON response for flipper: "+e)}this._populateResponseData(t)})}_populateResponseData(e){this.totalCount=e.total_count,this.currentIndex=e.cur_index,this.prevUrl=e.prev_url,this.nextUrl=e.next_url,this.listUrl=e.list_url}static get styles(){return[l.c,i.b`
        :host {
          display: flex;
          justify-content: center;
          flex-direction: column;
        }
        /* Use visibility instead of display:hidden for hiding in order to
        * avoid popping when elements are made visible. */
        .row a[hidden], .counts[hidden] {
          visibility: hidden;
        }
        .counts[hidden] {
          display: block;
        }
        .row a {
          display: block;
          padding: 0.25em 0;
        }
        .row a, .row div {
          flex: 1;
          white-space: nowrap;
          padding: 0 2px;
        }
        .row .counts {
          padding: 0 16px;
        }
        .row {
          display: flex;
          align-items: baseline;
          text-align: center;
          flex-direction: row;
        }
        @media (max-width: 960px) {
          :host {
            display: inline-block;
          }
        }
      `]}render(){return i.c`
      <div class="row">
        <a href="${this.prevUrl}" ?hidden="${!this.prevUrl}" title="Prev" class="prev-url">
          &lsaquo; Prev
        </a>
        <div class="counts" ?hidden=${!this.totalCount}>
          ${this.currentIndex+1} of ${this.totalCount}
        </div>
        <a href="${this.nextUrl}" ?hidden="${!this.nextUrl}" title="Next" class="next-url">
          Next &rsaquo;
        </a>
      </div>
      <div class="row">
        <a href="${this.listUrl}" ?hidden="${!this.listUrl}" title="Back to list" class="list-url">
          Back to list
        </a>
      </div>
    `}}window.customElements.define("mr-flipper",c)},232:function(e,t,s){"use strict";var i=s(0),r=s(9),a=s(20),n=s(15);class o extends i.a{static get styles(){return i.b`
      :host {
        --chops-toggle-bg: none;
        --chops-toggle-color: var(--chops-primary-font-color);
        --chops-toggle-hover-bg: rgba(0, 0, 0, 0.3);
        --chops-toggle-focus-border: hsl(193, 82%, 63%);
        --chops-toggle-checked-bg: rgba(0, 0, 0, 0.6);
        --chops-toggle-checked-color: var(--chops-white);
      }
      label {
        background: var(--chops-toggle-bg);
        color: var(--chops-toggle-color);
        cursor: pointer;
        align-items: center;
        padding: 2px 4px;
        border: var(--chops-normal-border);
        border-radius: var(--chops-button-radius);
      }
      input[type="checkbox"] {
        /* We need the checkbox to be hidden but still accessible. */
        opacity: 0;
        width: 0;
        height: 0;
        position: absolute;
        top: -9999;
        left: -9999;
      }
      input[type="checkbox"]:focus + label {
        /* Make sure an outline shows around this element for
        * accessibility.
        */
        box-shadow: 0 0 5px 1px var(--chops-toggle-focus-border);
      }
      input[type="checkbox"]:hover + label {
        background: var(--chops-toggle-hover-bg);
      }
      input[type="checkbox"]:checked + label {
        background: var(--chops-toggle-checked-bg);
        color: var(--chops-toggle-checked-color);
      }
      input[type="checkbox"]:disabled + label {
        opacity: 0.8;
        cursor: default;
        pointer-events: none;
      }
    `}render(){return i.c`
      <input id="checkbox"
        type="checkbox"
        ?checked=${this.checked}
        ?disabled=${this.disabled}
        @change=${this._checkedChangeHandler}
      >
      <label for="checkbox">
        <slot></slot>
      </label>
    `}static get properties(){return{checked:{type:Boolean},disabled:{type:Boolean}}}click(){super.click(),this.shadowRoot.querySelector("#checkbox").click()}_checkedChangeHandler(e){this._checkedChange(e.target.checked)}_checkedChange(e){if(e===this.checked)return;const t=new CustomEvent("checked-change",{detail:{checked:e}});this.dispatchEvent(t)}}customElements.define("chops-toggle",o);var l=s(52);class c extends(Object(r.a)(i.a)){render(){return i.c`
        <chops-toggle
          ?checked=${this._checked}
          ?disabled=${this._prefsInFlight}
          @checked-change=${this._togglePref}
          title=${this.title}
        >${this.label}</chops-toggle>
      `}static get properties(){return{prefs:{type:Object},userDisplayName:{type:String},initialValue:{type:Boolean},_prefsInFlight:{type:Boolean},label:{type:String},title:{type:String},prefName:{type:String}}}stateChanged(e){this.prefs=a.j(e),this._prefsInFlight=a.n(e).fetchPrefs.requesting||a.n(e).setPrefs.requesting,this._projectName=n.t(e)}constructor(){super(),this.initialValue=!1,this.userDisplayName="",this.label="",this.title="",this.prefName="",this._projectName=""}fetchPrefs(){r.b.dispatch(a.e())}get _checked(){const{prefs:e,initialValue:t}=this;return e&&e.has(this.prefName)?e.get(this.prefName):t}_togglePref(e){const t=e.detail.checked;this.dispatchEvent(new CustomEvent("font-toggle",{detail:{checked:t}}));const s=[{name:this.prefName,value:""+t}];r.b.dispatch(a.o(s,!!this.userDisplayName)),Object(l.b)("mr-pref-toggle",`${this.prefName}: ${t}`,this._projectName)}}customElements.define("mr-pref-toggle",c)},299:function(e,t,s){"use strict";var i=s(0);class r extends i.a{static get properties(){return{focusable:{type:Boolean,reflect:!0},thumbnail:{type:String},buttonIcon:{type:String},buttonLabel:{type:String}}}constructor(){super(),this.focusable=!1,this.thumbnail="",this.buttonIcon="",this.buttonLabel=""}static get styles(){return i.b`
      :host {
        --chops-chip-bg-color: var(--chops-blue-gray-50);
        display: inline-flex;
        padding: 0px 10px;
        line-height: 22px;
        margin: 0 2px;
        border-radius: 12px;
        background: var(--chops-chip-bg-color);
        align-items: center;
        font-size: var(--chops-main-font-size);
        box-sizing: border-box;
        border: 1px solid var(--chops-chip-bg-color);
      }
      :host(:focus), :host(.selected) {
        background: var(--chops-active-choice-bg);
        border: 1px solid var(--chops-light-accent-color);
      }
      :host([hidden]) {
        display: none;
      }
      i.left {
        margin: 0 4px 0 -6px;
      }
      button {
        border-radius: 50%;
        cursor: pointer;
        background: none;
        border: 0;
        padding: 0;
        margin: 0 -6px 0 4px;
        display: inline-flex;
        align-items: center;
        transition: background-color 0.2s ease-in-out;
      }
      button[hidden] {
        display: none;
      }
      button:hover {
        background: var(--chops-gray-300);
      }
      i.material-icons {
        color: var(--chops-primary-icon-color);
        font-size: 14px;
        user-select: none;
      }
    `}render(){return i.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      ${this.thumbnail?i.c`
        <i class="material-icons left">${this.thumbnail}</i>
      `:""}
      <slot></slot>
      ${this.buttonIcon?i.c`
        <button @click=${this.clickButton} aria-label=${this.buttonLabel}>
          <i class="material-icons" aria-hidden="true"}>${this.buttonIcon}</i>
        </button>
      `:""}
    `}update(e){e.has("focusable")&&(this.tabIndex=this.focusable?"0":void 0),super.update(e)}clickButton(e){this.dispatchEvent(new CustomEvent("click-button"))}}customElements.define("chops-chip",r)},303:function(e,t,s){"use strict";var i=s(0);class r extends i.a{static get styles(){return i.b`
      :host {
        display: flex;
        align-items: center;
        flex-direction: row;
        justify-content: flex-start;
        box-sizing: border-box;
        width: 100%;
        margin: 0.5em 0;
        padding: 0.25em 8px;
        border: 1px solid #FF6F00;
        border-radius: 4px;
        background: #FFF8E1;
      }
      :host([hidden]) {
        display: none;
      }
      i.material-icons {
        color: #FF6F00;
        margin-right: 4px;
      }
    `}render(){return i.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <i class="material-icons">warning</i>
      <slot></slot>
    `}}customElements.define("mr-warning",r)},345:function(e,t,s){"use strict";s.r(t),s.d(t,"MrIssuePage",(function(){return De}));var i=s(24),r=s.n(i),a=s(0),n=(s(130),s(230),s(75),s(103),s(9)),o=s(16),l=s(20),c=s(15),d=s(11),h=s(33);s(196),s(235),s(232),s(44);var p=s(6),u=s(5),m=s(66);class g extends(Object(n.a)(a.a)){static get styles(){return[h.c,a.b`
        :host {
          width: 100%;
          margin-top: 0;
          font-size: var(--chops-large-font-size);
          background-color: var(--monorail-metadata-toggled-bg);
          border-bottom: var(--chops-normal-border);
          padding: 0.25em 8px;
          box-sizing: border-box;
          display: flex;
          flex-direction: row;
          justify-content: space-between;
          align-items: center;
        }
        h1 {
          font-size: 100%;
          line-height: 140%;
          font-weight: bolder;
          padding: 0;
          margin: 0;
        }
        mr-flipper {
          border-left: var(--chops-normal-border);
          padding-left: 8px;
          margin-left: 4px;
          font-size: var(--chops-main-font-size);
        }
        mr-pref-toggle {
          margin-right: 2px;
        }
        .issue-actions {
          min-width: fit-content;
          display: flex;
          flex-direction: row;
          align-items: center;
          font-size: var(--chops-main-font-size);
        }
        .issue-actions div {
          min-width: 70px;
          display: flex;
          justify-content: space-between;
        }
        .spam-notice {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          padding: 1px 6px;
          border-radius: 3px;
          background: #F44336;
          color: var(--chops-white);
          font-weight: bold;
          font-size: var(--chops-main-font-size);
          margin-right: 4px;
        }
        .byline {
          display: block;
          font-size: var(--chops-main-font-size);
          width: 100%;
          line-height: 140%;
          color: var(--chops-primary-font-color);
        }
        .role-label {
          background-color: var(--chops-gray-600);
          border-radius: 3px;
          color: var(--chops-white);
          display: inline-block;
          padding: 2px 4px;
          font-size: 75%;
          font-weight: bold;
          line-height: 14px;
          vertical-align: text-bottom;
          margin-left: 16px;
        }
        .main-text-outer {
          flex-basis: 100%;
          display: flex;
          justify-content: flex-start;
          flex-direction: row;
          align-items: center;
        }
        .main-text {
          flex-basis: 100%;
        }
        @media (max-width: 840px) {
          :host {
            flex-wrap: wrap;
            justify-content: center;
          }
          .main-text {
            width: 100%;
            margin-bottom: 0.5em;
          }
        }
      `]}render(){const e=Object(d.o)(this.issue.reporterRef,this.issue.projectName,this.usersProjects),t=m.a.has(this.projectName),s=m.b.has(this.projectName);return a.c`
      <div class="main-text-outer">
        <div class="main-text">
          <h1>
            ${this.issue.isSpam?a.c`
              <span class="spam-notice">Spam</span>
            `:""}
            Issue ${this.issue.localId}: ${this.issue.summary}
          </h1>
          <small class="byline">
            Reported by
            <mr-user-link
              .userRef=${this.issue.reporterRef}
              aria-label="issue reporter"
            ></mr-user-link>
            on <chops-timestamp .timestamp=${this.issue.openedTimestamp}></chops-timestamp>
            ${e?a.c`
              <span class="role-label">Project Member</span>`:""}
          </small>
        </div>
      </div>
      <div class="issue-actions">
        <div>
          <mr-crbug-link .issue=${this.issue}></mr-crbug-link>
          <mr-pref-toggle
            .userDisplayName=${this.userDisplayName}
            label="Code"
            title="Code font"
            prefName="code_font"
          ></mr-pref-toggle>
          ${t?a.c`
            <mr-pref-toggle
              .userDisplayName=${this.userDisplayName}
              initialValue=${s}
              label="Markdown"
              title="Render in markdown"
              prefName="render_markdown"
            ></mr-pref-toggle> `:""}
        </div>
        ${this._issueOptions.length?a.c`
          <mr-dropdown
            .items=${this._issueOptions}
            icon="more_vert"
            label="Issue options"
          ></mr-dropdown>
        `:""}
        <mr-flipper></mr-flipper>
      </div>
    `}static get properties(){return{userDisplayName:{type:String},issue:{type:Object},issuePermissions:{type:Object},isRestricted:{type:Boolean},projectTemplates:{type:Array},projectName:{type:String},usersProjects:{type:Object},_action:{type:String},_targetProjectError:{type:String}}}constructor(){super(),this.issuePermissions=[],this.projectTemplates=[],this.projectName="",this.issue={},this.usersProjects=new Map,this.isRestricted=!1}stateChanged(e){this.issue=o.Q(e),this.issuePermissions=o.z(e),this.projectTemplates=c.u(e),this.projectName=c.t(e),this.usersProjects=l.l(e);const t=o.G(e);this.isRestricted=t&&Object.keys(t).length}get _issueOptions(){const e=[],t=[],s=this.issue.isSpam,i=this.isRestricted,r=this.issuePermissions,a=this.projectTemplates;if(r.includes("editissue")&&(e.push({text:"Edit issue description",handler:this._openEditDescription.bind(this)}),a.length&&t.push({text:"Convert issue template",handler:this._openConvertIssue.bind(this)})),r.includes("deleteissue")&&(t.push({text:"Delete issue",handler:this._deleteIssue.bind(this)}),i||(e.push({text:"Move issue",handler:this._openMoveCopyIssue.bind(this,"Move")}),e.push({text:"Copy issue",handler:this._openMoveCopyIssue.bind(this,"Copy")}))),r.includes("flagspam")){const e=(s?"Un-flag":"Flag")+" issue as spam";t.push({text:e,handler:this._markIssue.bind(this)})}return e.length&&t.length&&e.push({separator:!0}),e.concat(t)}_markIssue(){u.a.call("monorail.Issues","FlagIssues",{issueRefs:[{projectName:this.issue.projectName,localId:this.issue.localId}],flag:!this.issue.isSpam}).then(()=>{n.b.dispatch(o.g({projectName:this.issue.projectName,localId:this.issue.localId}))})}_deleteIssue(){if(confirm("Normally, you would just close issues by setting their status to a closed value.\nAre you sure you want to delete this issue?")){const e=Object(p.o)(this.issue);u.a.call("monorail.Issues","DeleteIssue",{issueRef:e,delete:!0}).then(()=>{n.b.dispatch(o.g(e))})}}_openEditDescription(){this.dispatchEvent(new CustomEvent("open-dialog",{bubbles:!0,composed:!0,detail:{dialogId:"edit-description",fieldName:""}}))}_openMoveCopyIssue(e){this.dispatchEvent(new CustomEvent("open-dialog",{bubbles:!0,composed:!0,detail:{dialogId:"move-copy-issue",action:e}}))}_openConvertIssue(){this.dispatchEvent(new CustomEvent("open-dialog",{bubbles:!0,composed:!0,detail:{dialogId:"convert-issue"}}))}}customElements.define("mr-issue-header",g);class f extends(Object(n.a)(a.a)){static get styles(){return a.b`
      :host {
        width: 100%;
        margin-top: 0;
        background-color: var(--monorail-metadata-toggled-bg);
        border-bottom: var(--chops-normal-border);
        font-size: var(--chops-main-font-size);
        padding: 0.25em 8px;
        box-sizing: border-box;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
      }
      :host([showWarning]) {
        background-color: var(--chops-red-700);
        color: var(--chops-white);
        font-weight: bold;
      }
      :host([showWarning]) i {
        color: var(--chops-white);
      }
      :host([hidden]) {
        display: none;
      }
      i.material-icons {
        color: var(--chops-primary-icon-color);
        font-size: var(--chops-icon-font-size);
      }
      .lock-icon {
        margin-right: 4px;
      }
      i.warning-icon {
        margin-right: 4px;
      }
      i[hidden] {
        display: none;
      }
    `}render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <i
        class="lock-icon material-icons"
        icon="lock"
        ?hidden=${!this._restrictionText}
        title=${this._restrictionText}
      >
        lock
      </i>
      <i
        class="warning-icon material-icons"
        icon="warning"
        ?hidden=${!this.showWarning}
        title=${this._warningText}
      >
        warning
      </i>
      ${this._combinedText}
    `}static get properties(){return{restrictions:Object,prefs:Object,hidden:{type:Boolean,reflect:!0},showWarning:{type:Boolean,reflect:!0}}}constructor(){super(),this.hidden=!0,this.showWarning=!1,this.prefs={}}stateChanged(e){this.restrictions=o.G(e),this.prefs=l.j(e)}update(e){(e.has("prefs")||e.has("restrictions"))&&(this.hidden=!this._combinedText,this.showWarning=!!this._warningText),super.update(e)}get _warningText(){const{restrictions:e,prefs:t}=this;return t&&e?"view"in e&&e.view.length?"":t.get("public_issue_notice")?"Public issue: Please do not post confidential information.":"":""}get _combinedText(){return this._warningText?this._warningText:this._restrictionText}get _restrictionText(){const{restrictions:e}=this;if(e)return"view"in e&&e.view.length?`Only users with ${Object(d.b)(e.view)} permission or issue reporter may view.`:"edit"in e&&e.edit.length?`Only users with ${Object(d.b)(e.edit)} permission may edit.`:"comment"in e&&e.comment.length?`Only users with ${Object(d.b)(e.comment)} permission or issue reporter may comment.`:""}}customElements.define("mr-restriction-indicator",f);var b=s(36);s(202);const v=["audio/","font/","image/","text/plain","video/"],y=[".avi",".avif",".bmp",".csv",".doc",".docx",".email",".eml",".gif",".ico",".jpeg",".jpg",".log",".m4p",".m4v",".mkv",".mov",".mp2",".mp4",".mpeg",".mpg",".mpv",".odt",".ogg",".pdf",".png",".sql",".svg",".tif",".tiff",".txt",".wav",".webm",".wmv"];class _ extends(Object(n.a)(a.a)){static get properties(){return{attachment:{type:Object},projectName:{type:String},localId:{type:Number},sequenceNum:{type:Number},canDelete:{type:Boolean}}}static get styles(){return[h.c,a.b`
        .attachment-view,
        .attachment-download {
          margin-left: 8px;
          display: block;
        }
        .attachment-delete {
          margin-left: 16px;
          color: var(--chops-button-color);
          background: var(--chops-button-bg);
          border-color: transparent;
        }
        .comment-attachment {
          min-width: 20%;
          width: fit-content;
          background: var(--chops-card-details-bg);
          padding: 4px;
          margin: 8px;
          overflow: auto;
        }
        .comment-attachment-header {
          display: flex;
          flex-wrap: nowrap;
        }
        .filename {
          margin-left: 8px;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .filename-deleted {
          margin-right: 4px;
        }
        .filesize {
          margin-left: 8px;
          white-space: nowrap;
        }
        .preview {
          border: 2px solid #c3d9ff;
          padding: 1px;
          max-width: 98%;
        }
        .preview:hover {
          border: 2px solid blue;
        }
      `]}render(){return a.c`
      <div class="comment-attachment">
        <div class="filename">
          ${this.attachment.isDeleted?a.c`
            <div class="filename-deleted">[Deleted]</div>
          `:""}
          <b>${this.attachment.filename}</b>
          ${this.canDelete?a.c`
            <chops-button
              class="attachment-delete"
              @click=${this._deleteAttachment}>
              ${this.attachment.isDeleted?"Undelete":"Delete"}
            </chops-button>
          `:""}
        </div>
        ${this.attachment.isDeleted?"":a.c`
          <div class="comment-attachment-header">
            <div class="filesize">${e=this.attachment.size,e<1024?e+" bytes":e<101376?(e/1024).toFixed(1)+" KB":e<1048576?(e/1024).toFixed(0)+" KB":e<103809024?(e/1024/1024).toFixed(1)+" MB":(e/1024/1024).toFixed(0)+" MB"}</div>
            ${this.attachment.viewUrl?a.c`
              <a
                class="attachment-view"
                href=${this.attachment.viewUrl}
                target="_blank"
              >View</a>
            `:""}
            <a
              class="attachment-download"
              href=${this.attachment.downloadUrl}
              target="_blank"
              ?hidden=${!this.attachment.downloadUrl}
              @click=${this._warnOnDownload}
            >Download</a>
          </div>
          ${this.attachment.thumbnailUrl?a.c`
            <a href=${this.attachment.viewUrl} target="_blank">
              <img
                class="preview" alt="attachment preview"
                src=${this.attachment.thumbnailUrl}>
            </a>
          `:""}
          ${function(e){if(!e)return;return e.startsWith("video/")}(this.attachment.contentType)?a.c`
            <video
              src=${this.attachment.viewUrl}
              class="preview"
              controls
              width="640"
              preload="metadata"
            ></video>
          `:""}
        `}
      </div>
    `;var e}_deleteAttachment(){const e={projectName:this.projectName,localId:this.localId};u.a.call("monorail.Issues","DeleteAttachment",{issueRef:e,sequenceNum:this.sequenceNum,attachmentId:this.attachment.attachmentId,delete:!this.attachment.isDeleted}).then(()=>{n.b.dispatch(o.h(e))},e=>{console.log("Failed to (un)delete attachment",e)})}_warnOnDownload(e){const t=v.some(e=>this.attachment.contentType.startsWith(e)),s=y.some(e=>this.attachment.filename.toLowerCase().endsWith(e));t||s||window.confirm("This file type is not recognized. Are you sure you want to download this attachment?")||e.preventDefault()}}customElements.define("mr-attachment",_);var w=s(47);class x extends a.a{constructor(){super(),this.descriptionList=[],this.selectedIndex=0}static get properties(){return{descriptionList:{type:Array},selectedIndex:{type:Number}}}updated(e){if(super.updated(e),e.has("descriptionList")){if(!this.descriptionList||!this.descriptionList.length)return;this.selectedIndex=this.descriptionList.length-1}}static get styles(){return a.b`
      .select-container {
        text-align: right;
      }
    `}render(){const e=this.selectedDescription;return a.c`
      <div class="select-container">
        <select
          @change=${this._selectChanged}
          ?hidden=${!this.descriptionList||this.descriptionList.length<=1}
          aria-label="Description history menu">
          ${this.descriptionList.map((e,t)=>this._renderDescriptionOption(e,t))}
        </select>
      </div>
      <mr-comment-content
        .content=${e.content}
        .author=${e.commenter.displayName}
      ></mr-comment-content>
      <div>
        ${(e.attachments||[]).map(t=>a.c`
          <mr-attachment
            .attachment=${t}
            .projectName=${e.projectName}
            .localId=${e.localId}
            .sequenceNum=${e.sequenceNum}
            .canDelete=${e.canDelete}
          ></mr-attachment>
        `)}
      </div>
    `}get selectedDescription(){const e=this.descriptionList||[];return e[Math.max(Math.min(this.selectedIndex,e.length-1),0)]||{}}_renderDescriptionOption(e,t){const{commenter:s,timestamp:i}=e||{},r=s?"by "+s.displayName:"";return a.c`
      <option value=${t} ?selected=${t===this.selectedIndex}>
        Description #${t+1} ${r} (${function(e){if(e=Number.parseInt(e),Number.isNaN(e))return;return Object(w.a)(new Date(1e3*e))}(i)})
      </option>
    `}_selectChanged(e){e&&e.target&&(this.selectedIndex=Number.parseInt(e.target.value))}}customElements.define("mr-description",x);var $=s(311);s(200),s(37);const k=["Blocking","Blockedon","Mergedinto"];class O extends a.a{constructor(){super(),this._isExpandedIfDeleted=!1}static get properties(){return{comment:{type:Object},headingLevel:{type:String},highlighted:{type:Boolean,reflect:!0},commenterIsMember:{type:Boolean},_isExpandedIfDeleted:{type:Boolean},_showOriginalContent:{type:Boolean}}}updated(e){super.updated(e),e.has("highlighted")&&this.highlighted&&window.requestAnimationFrame(()=>{this.scrollIntoView(),window.scrollBy(0,-150)})}static get styles(){return[h.c,a.b`
        :host {
          display: block;
          margin: 1.5em 0 0 0;
        }
        :host([highlighted]) {
          border: 1px solid var(--chops-primary-accent-color);
          box-shadow: 0 0 4px 4px var(--chops-active-choice-bg);
        }
        :host([hidden]) {
          display: none;
        }
        .comment-header {
          background: var(--chops-card-heading-bg);
          padding: 3px 1px 1px 8px;
          width: 100%;
          display: flex;
          flex-direction: row;
          justify-content: space-between;
          align-items: center;
          box-sizing: border-box;
        }
        .comment-header a {
          display: inline-flex;
        }
        .role-label {
          background-color: var(--chops-gray-600);
          border-radius: 3px;
          color: var(--chops-white);
          display: inline-block;
          padding: 2px 4px;
          font-size: 75%;
          font-weight: bold;
          line-height: 14px;
          vertical-align: text-bottom;
          margin-left: 16px;
        }
        .comment-options {
          float: right;
          text-align: right;
          text-decoration: none;
        }
        .comment-body {
          margin: 4px;
          box-sizing: border-box;
        }
        .deleted-comment-notice {
          margin-left: 4px;
        }
        .issue-diff {
          background: var(--chops-card-details-bg);
          display: inline-block;
          padding: 4px 8px;
          width: 100%;
          box-sizing: border-box;
        }
      `]}render(){return a.c`
      ${this._renderHeading()}
      ${I(this._isExpandedIfDeleted,this.comment)?a.c`
        ${this._renderDiff()}
        ${this._renderBody()}
      `:""}
    `}_renderHeading(){return a.c`
      <div
        role="heading"
        aria-level=${this.headingLevel}
        class="comment-header">
        <div>
          <a
            href="?id=${this.comment.localId}#c${this.comment.sequenceNum}"
            class="comment-link"
          >Comment ${this.comment.sequenceNum}</a>

          ${this._renderByline()}
        </div>
        ${e=this.comment,e.canDelete||e.canFlag?a.c`
          <div class="comment-options">
            <mr-dropdown
              .items=${this._commentOptions}
              label="Comment options"
              icon="more_vert"
            ></mr-dropdown>
          </div>
        `:""}
      </div>
    `;var e}_renderByline(){return I(this._isExpandedIfDeleted,this.comment)?a.c`
        by
        <mr-user-link .userRef=${this.comment.commenter}></mr-user-link>
        on
        <chops-timestamp
          .timestamp=${this.comment.timestamp}
        ></chops-timestamp>
        ${this.commenterIsMember&&!this.comment.isDeleted?a.c`
          <span class="role-label">Project Member</span>`:""}
      `:a.c`<span class="deleted-comment-notice">Deleted</span>`}_renderDiff(){return this.comment.descriptionNum||this.comment.amendments?a.c`
      <div class="issue-diff">
        ${(this.comment.amendments||[]).map(e=>a.c`
          <strong>${e.fieldName}:</strong>
          ${function(e,t){if(!S(e.fieldName)||!e.newOrDeltaValue)return[];return e.newOrDeltaValue.split(" ").map(e=>{let s=e;s.startsWith("-")&&(s=s.substr(1));return{issue:{...Object(p.n)(s,t)},text:e}})}(e,this.comment.projectName).map(e=>a.c`
            <mr-issue-link
              projectName=${this.comment.projectName}
              .issue=${e.issue}
              text=${e.text}
            ></mr-issue-link>
          `)}
          ${S(e.fieldName)?"":e.newOrDeltaValue}
          ${e.oldValue?`(was: ${e.oldValue})`:""}
          <br>
        `)}
        ${this.comment.descriptionNum?"Description was changed.":""}
      </div><br>
    `:""}_renderBody(){const e=this._showOriginalContent?this.comment.inboundMessage:this.comment.content;return a.c`
      <div class="comment-body">
        <mr-comment-content
          ?hidden=${this.comment.descriptionNum}
          .content=${e}
          .author=${this.comment.commenter.displayName}
          ?isDeleted=${this.comment.isDeleted}
        ></mr-comment-content>
        <div ?hidden=${this.comment.descriptionNum}>
          ${(this.comment.attachments||[]).map(e=>a.c`
            <mr-attachment
              .attachment=${e}
              projectName=${this.comment.projectName}
              localId=${this.comment.localId}
              sequenceNum=${this.comment.sequenceNum}
              ?canDelete=${this.comment.canDelete}
            ></mr-attachment>
          `)}
        </div>
      </div>
    `}get _commentOptions(){const e=[];if((t=this.comment).isSpam&&t.canFlag||t.isDeleted&&t.canDelete){const t=(this._isExpandedIfDeleted?"Hide":"Show")+" comment content";e.push({text:t,handler:this._toggleHideDeletedComment.bind(this)}),e.push({separator:!0})}var t;if(this.comment.canDelete){const t=(this.comment.isDeleted?"Undelete":"Delete")+" comment";e.push({text:t,handler:j.bind(null,this.comment)})}if(this.comment.canFlag){const t=(this.comment.isSpam?"Unflag":"Flag")+" comment";e.push({text:t,handler:C.bind(null,this.comment)})}if(this.comment.inboundMessage){const t=(this._showOriginalContent?"Hide":"Show")+" original email";e.push({text:t,handler:this._toggleShowOriginalContent.bind(this)})}return e}_toggleShowOriginalContent(){this._showOriginalContent=!this._showOriginalContent}_toggleHideDeletedComment(){this._isExpandedIfDeleted=!this._isExpandedIfDeleted}}function I(e,t){return!t.isDeleted||e}async function j(e){const t={projectName:e.projectName,localId:e.localId};await u.a.call("monorail.Issues","DeleteIssueComment",{issueRef:t,sequenceNum:e.sequenceNum,delete:void 0===e.isDeleted}),n.b.dispatch(o.h(t))}async function C(e){const t={projectName:e.projectName,localId:e.localId};await u.a.call("monorail.Issues","FlagComment",{issueRef:t,sequenceNum:e.sequenceNum,flag:void 0===e.isSpam}),n.b.dispatch(o.h(t))}function S(e){return k.includes(e)}customElements.define("mr-comment",O);class E extends(Object(n.a)(a.a)){constructor(){super(),this.commentsShownCount=2,this.comments=[],this.headingLevel=4,this.focusId=null,this.usersProjects=new Map,this._hideComments=!0}static get properties(){return{commentsShownCount:{type:Number},comments:{type:Array},headingLevel:{type:Number},focusId:{type:String},usersProjects:{type:Object},_hideComments:{type:Boolean}}}stateChanged(e){this.focusId=b.c(e),this.usersProjects=l.l(e)}updated(e){if(super.updated(e),!this._hideComments)return;const t=N(this.comments.length,this.commentsShownCount),s=this.comments.slice(0,t);for(const e of s)if("c"+e.sequenceNum===this.focusId){this._hideComments=!1;break}}static get styles(){return[h.c,a.b`
      button.toggle {
        background: none;
        color: var(--chops-link-color);
        border: 0;
        border-bottom: var(--chops-normal-border);
        border-top: var(--chops-normal-border);
        width: 100%;
        padding: 0.5em 8px;
        text-align: left;
        font-size: var(--chops-main-font-size);
      }
      button.toggle:hover {
        cursor: pointer;
        text-decoration: underline;
      }
      button.toggle[hidden] {
        display: none;
      }
      .edit-slot {
        margin-top: 3em;
      }
    `]}render(){const e=N(this.comments.length,this.commentsShownCount);return a.c`
      <button @click=${this._toggleHide}
          class="toggle"
          ?hidden=${e<=0}>
        ${this._hideComments?"Show":"Hide"}
        ${e}
        older
        ${1==e?"comment":"comments"}
      </button>
      ${Object($.a)(this._hideComments?"":a.c`${this.comments.slice(0,e).map(this.renderComment.bind(this))}`)}
      ${this.comments.slice(e).map(this.renderComment.bind(this))}
    `}renderComment(e){const t=Object(d.o)(e.commenter,e.projectName,this.usersProjects);return a.c`
      <mr-comment
          .comment=${e}
          headingLevel=${this.headingLevel}
          ?highlighted=${"c"+e.sequenceNum===this.focusId}
          ?commenterIsMember=${t}
      ></mr-comment>`}_toggleHide(){this._hideComments=!this._hideComments}}function N(e,t){return Math.max(e-t,0)}customElements.define("mr-comment-list",E);var R=s(302),D=s.n(R),A=s(85),P=s.n(A);class T extends a.a{static get styles(){return[h.c,a.b`
        :host {
          display: block;
          width: 100%;
          padding: 0.25em 4px;
          border: 1px dashed var(--chops-gray-300);
          box-sizing: border-box;
          border-radius: 8px;
          transition: background 0.2s ease-in-out,
            border-color 0.2s ease-in-out;
        }
        :host([hidden]) {
          display: none;
        }
        :host([expanded]) {
          /* Expand the drag and drop area when a file is being dragged. */
          min-height: 120px;
        }
        :host([highlighted]) {
          border-color: var(--chops-primary-accent-color);
          background: var(--chops-active-choice-bg);
        }
        input[type="file"] {
          /* We need the file uploader to be hidden but still accessible. */
          opacity: 0;
          width: 0;
          height: 0;
          position: absolute;
          top: -9999;
          left: -9999;
        }
        input[type="file"]:focus + label {
          /* TODO(zhangtiff): Find a way to either mimic native browser focus
           * styles or make focus styles more consistent. */
          box-shadow: 0 0 3px 1px hsl(193, 82%, 63%);
        }
        label.button {
          margin-right: 8px;
          padding: 0.1em 4px;
          display: inline-flex;
          width: auto;
          cursor: pointer;
          border: var(--chops-normal-border);
          margin-left: 0;
        }
        label.button i.material-icons {
          font-size: var(--chops-icon-font-size);
        }
        ul {
          display: flex;
          align-items: flex-start;
          justify-content: flex-start;
          flex-direction: column;
        }
        ul[hidden] {
          display: none;
        }
        li {
          display: inline-flex;
          align-items: center;
        }
        li i.material-icons {
          font-size: 14px;
          margin: 0;
        }
        /* TODO(zhangtiff): Create a shared Material icon button component. */
        button {
          border-radius: 50%;
          cursor: pointer;
          background: 0;
          border: 0;
          padding: 0.25em;
          margin-left: 4px;
          display: inline-flex;
          align-items: center;
          justify-content: center;
          transition: background 0.2s ease-in-out;
        }
        button:hover {
          background: var(--chops-gray-200);
        }
        .controls {
          display: flex;
          flex-direction: row;
          align-items: center;
          justify-content: flex-start;
          width: 100%;
        }
      `]}render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <div class="controls">
        <input id="file-uploader" type="file" multiple @change=${this._filesChanged}>
        <label class="button" for="file-uploader">
          <i class="material-icons" role="presentation">attach_file</i>Add attachments
        </label>
        Drop files here to add them (Max: 10.0 MB per comment)
      </div>
      <ul ?hidden=${!this.files||!this.files.length}>
        ${this.files.map((e,t)=>a.c`
          <li>
            ${e.name}
            <button data-index=${t} @click=${this._removeFile}>
              <i class="material-icons">clear</i>
            </button>
          </li>
        `)}
      </ul>
    `}static get properties(){return{files:{type:Array},highlighted:{type:Boolean,reflect:!0},expanded:{type:Boolean,reflect:!0},_boundOnDragIntoWindow:{type:Object},_boundOnDragOutOfWindow:{type:Object},_boundOnDragInto:{type:Object},_boundOnDragLeave:{type:Object},_boundOnDrop:{type:Object}}}constructor(){super(),this.expanded=!1,this.highlighted=!1,this.files=[],this._boundOnDragIntoWindow=this._onDragIntoWindow.bind(this),this._boundOnDragOutOfWindow=this._onDragOutOfWindow.bind(this),this._boundOnDragInto=this._onDragInto.bind(this),this._boundOnDragLeave=this._onDragLeave.bind(this),this._boundOnDrop=this._onDrop.bind(this)}connectedCallback(){super.connectedCallback(),this.addEventListener("dragenter",this._boundOnDragInto),this.addEventListener("dragover",this._boundOnDragInto),this.addEventListener("dragleave",this._boundOnDragLeave),this.addEventListener("drop",this._boundOnDrop),window.addEventListener("dragenter",this._boundOnDragIntoWindow),window.addEventListener("dragover",this._boundOnDragIntoWindow),window.addEventListener("dragleave",this._boundOnDragOutOfWindow),window.addEventListener("drop",this._boundOnDragOutOfWindow)}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("dragenter",this._boundOnDragIntoWindow),window.removeEventListener("dragover",this._boundOnDragIntoWindow),window.removeEventListener("dragleave",this._boundOnDragOutOfWindow),window.removeEventListener("drop",this._boundOnDragOutOfWindow)}reset(){this.files=[]}get hasAttachments(){return 0!==this.files.length}async loadFiles(){if(!this.files||!this.files.length)return[];const e=this.files.map(this._loadLocalFile);return await Promise.all(e)}_onDragInto(e){this._eventGetFiles(e).length&&(e.preventDefault(),this.highlighted=!0)}_onDragLeave(e){this._eventGetFiles(e).length&&(e.preventDefault(),this.highlighted=!1)}_onDrop(e){const t=this._eventGetFiles(e);t.length&&(e.preventDefault(),this.highlighted=!1,this._addFiles(t))}_onDragIntoWindow(e){this._eventGetFiles(e).length&&(e.preventDefault(),this.expanded=!0)}_onDragOutOfWindow(e){this._eventGetFiles(e).length&&(e.preventDefault(),this.expanded=!1)}_eventGetFiles(e){if(!e||!e.dataTransfer)return[];const t=e.dataTransfer;if(t.items&&t.items.length){return[...t.items].filter(e=>"file"===e.kind).map(e=>e.getAsFile())}return[...t.files]}_loadLocalFile(e){return new Promise((t,s)=>{const i=new FileReader;i.onloadend=()=>{t({filename:e.name,content:btoa(i.result)})},i.onerror=()=>{s(i.error)},i.readAsBinaryString(e)})}_filesChanged(e){const t=e.currentTarget;t.files&&(this._addFiles(t.files),this.dispatchEvent(new CustomEvent("change")))}_addFiles(e){if(!e)return;const t=[...e].filter(e=>!this.files.some(t=>this._filesMatch(e,t)));this.files=this.files.concat(t)}_filesMatch(e,t){return e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size&&e.type===t.type}_removeFile(e){const t=e.currentTarget,s=Number.parseInt(t.dataset.index);s<0||s>=this.files.length||(this.files.splice(s,1),this.files=[...this.files])}}customElements.define("mr-upload",T);s(201),s(216),s(299),s(199),s(303),s(128),s(185);var F=s(88),M=s(48),z=s(14),B=s(100),L=s(46);s(203);class V extends a.a{static get styles(){return[h.c,a.b`
        :host {
          width: 100%;
        }
        select {
          width: var(--mr-edit-field-width);
          padding: var(--mr-edit-field-padding);
        }
        .grid-input {
          margin-top: 8px;
          display: grid;
          grid-gap: var(--mr-input-grid-gap);
          grid-template-columns: auto 1fr;
        }
        .grid-input[hidden] {
          display: none;
        }
        label {
          font-weight: bold;
          word-wrap: break-word;
          text-align: left;
        }
        #mergedIntoInput {
          width: 160px;
        }
      `]}render(){return a.c`
      <select
        @change=${this._selectChangeHandler}
        aria-label="Status"
        id="statusInput"
      >
        ${this._statusesGrouped.map(e=>a.c`
          <optgroup label=${e.name} ?hidden=${!e.name}>
            ${e.statuses.map(e=>a.c`
              <option
                value=${e.status}
                .selected=${this.status===e.status}
              >
                ${e.status}
                ${e.docstring?"= "+e.docstring:""}
              </option>
            `)}
          </optgroup>

          ${e.name?"":a.c`
            ${e.statuses.map(e=>a.c`
              <option
                value=${e.status}
                .selected=${this.status===e.status}
              >
                ${e.status}
                ${e.docstring?"= "+e.docstring:""}
              </option>
            `)}
          `}
        `)}
      </select>

      <div class="grid-input" ?hidden=${!this._showMergedInto}>
        <label for="mergedIntoInput" id="mergedIntoLabel">Merged into:</label>
        <input
          id="mergedIntoInput"
          value=${this.mergedInto||""}
          @change=${this._changeHandler}
        ></input>
      </div>`}static get properties(){return{initialStatus:{type:String},status:{type:String},statuses:{type:Array},isApproval:{type:Boolean},mergedInto:{type:String}}}update(e){e.has("initialStatus")&&(this.status=this.initialStatus),super.update(e)}get _showMergedInto(){return"Duplicate"===(this.status||this.initialStatus)}get _statusesGrouped(){const e=this.statuses,t=this.isApproval;return e?t?[{statuses:e}]:[{name:"Open",statuses:e.filter(e=>e.meansOpen)},{name:"Closed",statuses:e.filter(e=>!e.meansOpen)}]:[]}async reset(){await this.updateComplete;const e=this.shadowRoot.querySelector("#mergedIntoInput");e&&(e.value=this.mergedInto||""),this.status=this.initialStatus}get delta(){const e={};if(this.status!==this.initialStatus&&(e.status=this.status),this._showMergedInto){const t=this.shadowRoot.querySelector("#mergedIntoInput").value;t!==this.mergedInto&&(e.mergedInto=t)}else"Duplicate"===this.initialStatus&&(e.mergedInto="");return e}_selectChangeHandler(e){const t=e.target;this.status=t.value,this._changeHandler(e)}_changeHandler(e){this.dispatchEvent(new CustomEvent("change"))}}customElements.define("mr-edit-status",V);var q=s(43),U=s(184);class H extends(Object(n.a)(a.a)){render(){return a.c`
      <style>
        ${h.a}
        ${h.b}
        mr-edit-metadata {
          display: block;
          font-size: var(--chops-main-font-size);
        }
        mr-edit-metadata.edit-actions-right .edit-actions {
          flex-direction: row-reverse;
          text-align: right;
        }
        mr-edit-metadata.edit-actions-right .edit-actions chops-checkbox {
          text-align: left;
        }
        .edit-actions chops-checkbox {
          max-width: 200px;
          margin-top: 2px;
          flex-grow: 2;
          text-align: right;
        }
        .edit-actions {
          width: 100%;
          max-width: 500px;
          margin: 0.5em 0;
          text-align: left;
          display: flex;
          flex-direction: row;
          align-items: center;
        }
        .edit-actions chops-button {
          flex-grow: 0;
          flex-shrink: 0;
        }
        .edit-actions .emphasized {
          margin-left: 0;
        }
        input {
          box-sizing: border-box;
          width: var(--mr-edit-field-width);
          padding: var(--mr-edit-field-padding);
          font-size: var(--chops-main-font-size);
        }
        mr-upload {
          margin-bottom: 0.25em;
        }
        textarea {
          font-family: var(--mr-toggled-font-family);
          width: 100%;
          margin: 0.25em 0;
          box-sizing: border-box;
          border: var(--chops-accessible-border);
          height: 8em;
          transition: height 0.1s ease-in-out;
          padding: 0.5em 4px;
          grid-column-start: 1;
          grid-column-end: 2;
        }
        button.toggle {
          background: none;
          color: var(--chops-link-color);
          border: 0;
          width: 100%;
          padding: 0.25em 0;
          text-align: left;
        }
        button.toggle:hover {
          cursor: pointer;
          text-decoration: underline;
        }
        .presubmit-derived {
          color: gray;
          font-style: italic;
          text-decoration-line: underline;
          text-decoration-style: dotted;
        }
        .presubmit-derived-header {
          color: gray;
          font-weight: bold;
        }
        .discard-button {
          margin-right: 16px;
          margin-left: 16px;
        }
        .group {
          width: 100%;
          border: 1px solid hsl(0, 0%, 83%);
          grid-column: 1 / -1;
          margin: 0;
          margin-bottom: 0.5em;
          padding: 0;
          padding-bottom: 0.5em;
        }
        .group legend {
          margin-left: 130px;
        }
        .group-title {
          text-align: center;
          font-style: oblique;
          margin-top: 4px;
          margin-bottom: -8px;
        }
        .star-line {
          display: flex;
          align-items: center;
          background: var(--chops-notice-bubble-bg);
          border: var(--chops-notice-border);
          justify-content: flex-start;
          margin-top: 4px;
          padding: 2px 4px 2px 8px;
        }
        mr-issue-star {
          margin-right: 4px;
        }
      </style>
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <form id="editForm"
        @submit=${this._save}
        @keydown=${this._saveOnCtrlEnter}
      >
        <mr-cue cuePrefName=${F.c.CODE_OF_CONDUCT}></mr-cue>
        ${this._renderStarLine()}
        <textarea
          id="commentText"
          placeholder="Add a comment"
          @keyup=${this._processChanges}
          aria-label="Comment"
        ></textarea>
        ${this._renderMarkdown?a.c`
          <div class="markdown-preview preview-height-comment">
            <div class="markdown">
              ${Object(U.a)(Object(m.c)(this.getCommentContent()))}
            </div>
          </div>`:""}
        <mr-upload
          ?hidden=${this.disableAttachments}
          @change=${this._processChanges}
        ></mr-upload>
        <div class="input-grid">
          ${this._renderEditFields()}
          ${this._renderErrorsAndWarnings()}

          <span></span>
          <div class="edit-actions">
            <chops-button
              @click=${this._save}
              class="save-changes emphasized"
              ?disabled=${this.disabled}
              title="Save changes (Ctrl+Enter / \u2318+Enter)"
            >
              Save changes
            </chops-button>
            <chops-button
              @click=${this.discard}
              class="de-emphasized discard-button"
              ?disabled=${this.disabled}
            >
              Discard
            </chops-button>

            <chops-checkbox
              id="sendEmail"
              @checked-change=${this._sendEmailChecked}
              ?checked=${this.sendEmail}
            >Send email</chops-checkbox>
          </div>

          ${this.isApproval?"":this._renderPresubmitChanges()}
        </div>
      </form>
    `}_renderStarLine(){return this._canEditIssue||this.isApproval?"":a.c`
      <div class="star-line">
        <mr-issue-star
          .issueRef=${this.issueRef}
        ></mr-issue-star>
        <span>
          ${this.isStarred?"\n            You have voted for this issue and will receive notifications.\n          ":'\n            Star this issue instead of commenting "+1 Me too!" to add a vote\n            and get notifications.'}
        </span>
      </div>
    `}_renderPresubmitChanges(){const{derivedCcs:e,derivedLabels:t}=this.presubmitResponse||{},s=e&&e.length,i=t&&t.length,r=s||i;return a.c`
      ${r?a.c`
        <span></span>
        <div class="presubmit-derived-header">
          Filter rules and components will add
        </div>
        `:""}

      ${s?a.c`
        <label
          for="derived-ccs"
          class="presubmit-derived-header"
        >CC:</label>
        <div id="derived-ccs">
          ${e.map(e=>a.c`
            <span
              title=${e.why}
              class="presubmit-derived"
            >${e.value}</span>
          `)}
        </div>
        `:""}

      ${i?a.c`
        <label
          for="derived-labels"
          class="presubmit-derived-header"
        >Labels:</label>
        <div id="derived-labels">
          ${t.map(e=>a.c`
            <span
              title=${e.why}
              class="presubmit-derived"
            >${e.value}</span>
          `)}
        </div>
        `:""}
    `}_renderErrorsAndWarnings(){const e=this.presubmitResponse||{},t=e.warnings||[],s=e.errors||[];return this.error||t.length||s.length?a.c`
        <span></span>
        <div>
          ${t.map(e=>a.c`
            <mr-warning title=${e.why}>${e.value}</mr-warning>
          `)}
          <!-- TODO(ehmaldonado): Look into blocking submission on presubmit
          -->
          ${s.map(e=>a.c`
            <mr-error title=${e.why}>${e.value}</mr-error>
          `)}
          ${this.error?a.c`
            <mr-error>${this.error}</mr-error>`:""}
        </div>
      `:""}_renderEditFields(){return this.isApproval?a.c`
        ${this._renderStatus()}
        ${this._renderApprovers()}
        ${this._renderFieldDefs()}

        ${this._renderNicheFieldToggle()}
      `:a.c`
      ${this._canEditSummary?this._renderSummary():""}
      ${this._canEditStatus?this._renderStatus():""}
      ${this._canEditOwner?this._renderOwner():""}
      ${this._canEditCC?this._renderCC():""}
      ${this._canEditIssue?a.c`
        ${this._renderComponents()}

        ${this._renderFieldDefs()}
        ${this._renderRelatedIssues()}
        ${this._renderLabels()}

        ${this._renderNicheFieldToggle()}
      `:""}
    `}_renderSummary(){return a.c`
      <label for="summaryInput">Summary:</label>
      <input
        id="summaryInput"
        value=${this.summary}
        @keyup=${this._processChanges}
      />
    `}_renderOwner(){const e=this._ownerPresubmit;return a.c`
      <label for="ownerInput">
        ${e.message?a.c`
          <i
            class=${"material-icons inline-"+e.icon}
            title=${e.message}
          >${e.icon}</i>
        `:""}
        Owner:
      </label>
      <mr-react-autocomplete
        label="ownerInput"
        vocabularyName="owner"
        .placeholder=${e.placeholder}
        .value=${this._values.owner}
        .onChange=${this._changeHandlers.owner}
      ></mr-react-autocomplete>
    `}_renderCC(){return a.c`
      <label for="ccInput">CC:</label>
      <mr-react-autocomplete
        label="ccInput"
        vocabularyName="member"
        .multiple=${!0}
        .fixedValues=${this._derivedCCs}
        .value=${this._values.cc}
        .onChange=${this._changeHandlers.cc}
      ></mr-react-autocomplete>
    `}_renderComponents(){return a.c`
      <label for="componentsInput">Components:</label>
      <mr-react-autocomplete
        label="componentsInput"
        vocabularyName="component"
        .multiple=${!0}
        .value=${this._values.components}
        .onChange=${this._changeHandlers.components}
      ></mr-react-autocomplete>
    `}_renderApprovers(){return this.hasApproverPrivileges&&this.isApproval?a.c`
      <label for="approversInput_react">Approvers:</label>
      <mr-edit-field
        id="approversInput"
        label="approversInput_react"
        .type=${"USER_TYPE"}
        .initialValues=${Object(p.g)(this.approvers)}
        .name=${"approver"}
        .acType=${"member"}
        @change=${this._processChanges}
        multi
      ></mr-edit-field>
    `:""}_renderStatus(){return this.statuses&&this.statuses.length?a.c`
      <label for="statusInput">Status:</label>

      <mr-edit-status
        id="statusInput"
        .initialStatus=${this.status}
        .statuses=${this.statuses}
        .mergedInto=${Object(p.j)(this.mergedInto,this.projectName)}
        ?isApproval=${this.isApproval}
        @change=${this._processChanges}
      ></mr-edit-status>
    `:""}_renderFieldDefs(){return a.c`
      ${Object(q.b)(this.fieldDefs,this.fieldGroups,this.issueType).map(e=>a.c`
        <fieldset class="group">
          <legend>${e.groupName}</legend>
          <div class="input-grid">
            ${e.fieldDefs.map(e=>this._renderCustomField(e))}
          </div>
        </fieldset>
      `)}

      ${Object(q.c)(this.fieldDefs,this.fieldGroups,this.issueType).map(e=>this._renderCustomField(e))}
    `}_renderRelatedIssues(){return a.c`
      <label for="blockedOnInput">BlockedOn:</label>
      <mr-react-autocomplete
        label="blockedOnInput"
        vocabularyName="component"
        .multiple=${!0}
        .value=${this._values.blockedOn}
        .onChange=${this._changeHandlers.blockedOn}
      ></mr-react-autocomplete>

      <label for="blockingInput">Blocking:</label>
      <mr-react-autocomplete
        label="blockingInput"
        vocabularyName="component"
        .multiple=${!0}
        .value=${this._values.blocking}
        .onChange=${this._changeHandlers.blocking}
      ></mr-react-autocomplete>
    `}_renderLabels(){return a.c`
      <label for="labelsInput">Labels:</label>
      <mr-react-autocomplete
        label="labelsInput"
        vocabularyName="label"
        .multiple=${!0}
        .fixedValues=${this.derivedLabels}
        .value=${this._values.labels}
        .onChange=${this._changeHandlers.labels}
      ></mr-react-autocomplete>
    `}_renderCustomField(e){if(!e||!e.fieldRef)return"";const t=this._userCanEdit(e),{fieldRef:s,isNiche:i,docstring:r,isMultivalued:n}=e,o=!this.showNicheFields&&i||!t;let l;return s.type===z.g.USER_TYPE&&(l=n?"member":"owner"),a.c`
      <label
        ?hidden=${o}
        for=${this._idForField(s.fieldName)+"_react"}
        title=${r}
      >
        ${s.fieldName}:
      </label>
      <mr-edit-field
        ?hidden=${o}
        id=${this._idForField(s.fieldName)}
        .label=${this._idForField(s.fieldName)+"_react"}
        .name=${s.fieldName}
        .type=${s.type}
        .options=${this._optionsForField(this.optionsPerEnumField,this.fieldValueMap,s.fieldName,this.phaseName)}
        .initialValues=${Object(q.f)(this.fieldValueMap,s.fieldName,this.phaseName)}
        .acType=${l}
        ?multi=${n}
        @change=${this._processChanges}
      ></mr-edit-field>
    `}_renderNicheFieldToggle(){return this._nicheFieldCount?a.c`
      <span></span>
      <button type="button" class="toggle" @click=${this.toggleNicheFields}>
        <span ?hidden=${this.showNicheFields}>
          Show all fields (${this._nicheFieldCount} currently hidden)
        </span>
        <span ?hidden=${!this.showNicheFields}>
          Hide niche fields (${this._nicheFieldCount} currently shown)
        </span>
      </button>
    `:""}static get properties(){return{fieldDefs:{type:Array},formName:{type:String},approvers:{type:Array},setter:{type:Object},summary:{type:String},cc:{type:Array,hasChanged:W},components:{type:Array,hasChanged:W},status:{type:String},statuses:{type:Array},blockedOn:{type:Array,hasChanged:W},blocking:{type:Array,hasChanged:W},mergedInto:{type:Object},ownerName:{type:String,hasChanged:W},labelNames:{type:Array,hasChanged:W},derivedLabels:{type:Array},_permissions:{type:Array},phaseName:{type:String},projectConfig:{type:Object},projectName:{type:String,hasChanged:W},isApproval:{type:Boolean},isStarred:{type:Boolean},issuePermissions:{type:Object},issueRef:{type:Object},hasApproverPrivileges:{type:Boolean},showNicheFields:{type:Boolean},disableAttachments:{type:Boolean},error:{type:String},sendEmail:{type:Boolean},presubmitResponse:{type:Object},fieldValueMap:{type:Object},issueType:{type:String},optionsPerEnumField:{type:String},fieldGroups:{type:Object},prefs:{type:Object},saving:{type:Boolean},isDirty:{type:Boolean},_values:{type:Object},_initialValues:{type:Object}}}constructor(){super(),this.summary="",this.ownerName="",this.sendEmail=!0,this.mergedInto={},this.issueRef={},this.fieldGroups=q.a,this._permissions={},this.saving=!1,this.isDirty=!1,this.prefs={},this._values={},this._initialValues={},this._changeHandlers={owner:this._onChange.bind(this,"owner"),cc:this._onChange.bind(this,"cc"),components:this._onChange.bind(this,"components"),labels:this._onChange.bind(this,"labels"),blockedOn:this._onChange.bind(this,"blockedOn"),blocking:this._onChange.bind(this,"blocking")}}createRenderRoot(){return this}firstUpdated(){this.hasRendered=!0}updated(e){(e.has("ownerName")||e.has("cc")||e.has("components")||e.has("labelNames")||e.has("blockedOn")||e.has("blocking")||e.has("projectName"))&&(this._initialValues.owner=this.ownerName,this._initialValues.cc=this._ccNames,this._initialValues.components=Object(p.b)(this.components),this._initialValues.labels=this.labelNames,this._initialValues.blockedOn=Object(p.l)(this.blockedOn,this.projectName),this._initialValues.blocking=Object(p.l)(this.blocking,this.projectName),this._values={...this._initialValues})}get _renderMarkdown(){if(!this.getCommentContent())return!1;const e=this.prefs.get("render_markdown");return Object(m.d)({project:this.projectName,enabled:e})}get disabled(){return!this.isDirty||this.saving}_updateIsDirty(){if(!this.hasRendered)return;const e=this.getCommentContent(),t=this.querySelector("mr-upload");this.isDirty=!Object(d.g)(this.delta)||Boolean(e)||t.hasAttachments}get _nicheFieldCount(){return(this.fieldDefs||[]).reduce((e,t)=>e+(0|t.isNiche),0)}get _canEditIssue(){return(this.issuePermissions||[]).includes("editissue")}get _canEditSummary(){const e=this.issuePermissions||[];return this._canEditIssue||e.includes("editissuesummary")}get _canEditStatus(){const e=this.issuePermissions||[];return this._canEditIssue||e.includes("editissuestatus")}get _canEditOwner(){const e=this.issuePermissions||[];return this._canEditIssue||e.includes("editissueowner")}get _canEditCC(){const e=this.issuePermissions||[];return this._canEditIssue||e.includes("editissuecc")}get _ccNames(){const e=this.cc||[];return Object(p.g)(e.filter(e=>!e.isDerived))}get _derivedCCs(){const e=this.cc||[];return Object(p.g)(e.filter(e=>e.isDerived))}get _ownerPresubmit(){const e=this.presubmitResponse;if(!e)return{};const t={message:"",placeholder:"",icon:""};return e.ownerAvailability?(t.message=e.ownerAvailability,t.icon="warning"):e.derivedOwners&&e.derivedOwners.length&&(t.placeholder=e.derivedOwners[0].value,t.message=e.derivedOwners[0].why,t.icon="info"),t}stateChanged(e){this.fieldValueMap=o.p(e),this.issueType=o.M(e),this.issueRef=o.R(e),this._permissions=L.c(e),this.presubmitResponse=o.B(e),this.projectConfig=c.q(e),this.projectName=o.R(e).projectName,this.issuePermissions=o.z(e),this.optionsPerEnumField=c.n(e);const t=o.J(e);this.isStarred=t.has(Object(p.j)(this.issueRef)),this.prefs=l.j(e)}disconnectedCallback(){super.disconnectedCallback(),n.b.dispatch(b.h(this.formName,!1))}async reset(){this._values={...this._initialValues};const e=this.querySelector("#editForm");if(!e)return;e.reset();const t=this.querySelector("#statusInput");if(t&&t.reset(),this.isApproval&&this.hasApproverPrivileges){const e=this.querySelector("#approversInput");e&&e.reset()}this.querySelectorAll("mr-edit-field").forEach(e=>{e.reset()});const s=this.querySelector("mr-upload");s&&s.reset(),await this.updateComplete,this._processChanges()}_save(e){e.preventDefault(),this.save()}_saveOnCtrlEnter(e){"Enter"===e.key&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),this.save())}save(){this.dispatchEvent(new CustomEvent("save"))}discard(){this.isDirty&&!confirm("Discard your changes?")||this.dispatchEvent(new CustomEvent("discard"))}async focus(){await this.updateComplete,this.querySelector("#commentText").focus()}getCommentContent(){return this.querySelector("#commentText")?this.querySelector("#commentText").value:""}async getAttachments(){try{return await this.querySelector("mr-upload").loadFiles()}catch(e){this.error="Error while loading file for attachment: "+e.message}}_userCanEdit(e){const t=Object(p.e)(this.projectName,e);if(!this._permissions[t]||!this._permissions[t].permissions)return!1;return this._permissions[t].permissions.includes(L.a)}toggleNicheFields(){this.showNicheFields=!this.showNicheFields}get delta(){try{return this.error="",this._getDelta()}catch(e){if(!(e instanceof M.a))throw e;return this.error=e.message,{}}}_getDelta(){let e={};const{projectName:t,localId:s}=this.issueRef,i=this.querySelector("#statusInput");if(this._canEditStatus&&i){const r=i.delta;r.mergedInto&&(e.mergedIntoRef=Object(p.m)({projectName:t,localId:s},r.mergedInto)),r.status&&(e.status=r.status)}if(this.isApproval)this._canEditIssue&&this.hasApproverPrivileges&&(e={...e,...this._changedValuesDom("approvers","approverRefs",p.d)});else{if(this._canEditSummary){const t=this.querySelector("#summaryInput");if(t){const s=t.value;s!==this.summary&&(e.summary=s)}}this._values.owner!==this._initialValues.owner&&(e.ownerRef=Object(p.d)(this._values.owner));const i=e=>Object(p.m)({projectName:t,localId:s},e),r=e=>Object(p.n)(e,t);e={...e,...this._changedValuesControlled("cc","ccRefs",p.d),...this._changedValuesControlled("components","compRefs",p.c),...this._changedValuesControlled("labels","labelRefs",p.v),...this._changedValuesControlled("blockedOn","blockedOnRefs",i,r),...this._changedValuesControlled("blocking","blockingRefs",i,r)}}if(this._canEditIssue){(this.fieldDefs||[]).forEach(({fieldRef:t})=>{const{fieldValsAdd:s=[],fieldValsRemove:i=[]}=this._changedValuesDom(t.fieldName,"fieldVals",p.E.bind(null,t));s.length&&(e.fieldValsAdd=[...e.fieldValsAdd||[],...s]),i.length&&(e.fieldValsRemove=[...e.fieldValsRemove||[],...i])})}return e}_changedValuesControlled(e,t,s,i){const r=this._values[e],a=this._initialValues[e],n=Object(d.a)(r,a,d.e),o=Object(d.a)(a,r,d.e);return this._changedValues(n,o,t,s,i)}_changedValuesDom(e,t,s,i){const r=this.querySelector("#"+this._idForField(e));if(!r)return;const a=r.getValuesAdded(),n=r.getValuesRemoved();return this._changedValues(a,n,t,s,i)}_changedValues(e,t,s,i,r){const a={};return e&&e.length&&(a[s+"Add"]=e.map(i)),t&&t.length&&(a[s+"Remove"]=t.map(r||i)),a}_onChange(e,t,s,i){this._values={...this._values,[e]:s},this._processChanges(t)}_processChanges(e){e instanceof KeyboardEvent&&B.a.has(e.key)||(this._updateIsDirty(),n.b.dispatch(b.h(this.formName,this.isDirty)),this.dispatchEvent(new CustomEvent("change",{detail:{delta:this.delta,commentContent:this.getCommentContent()}})))}_idForField(e){return e+"Input"}_optionsForField(e,t,s,i){if(!e||!s)return[];const r=s.toLowerCase();if(!e.has(r))return[];const a=[...e.get(r)];return Object(q.f)(t,s,i).forEach(e=>{a.find(t=>Object(d.e)(t.optionName,e))||a.push({optionName:e})}),a}_sendEmailChecked(e){this.sendEmail=e.detail.checked}}function W(e,t){return!P()(e,t)}customElements.define("mr-edit-metadata",H);var G=s(52);class Y extends(Object(n.a)(a.a)){render(){const e=this.issue||{};let t=e.blockedOnIssueRefs||[];e.danglingBlockedOnRefs&&e.danglingBlockedOnRefs.length&&(t=t.concat(e.danglingBlockedOnRefs));let s=e.blockingIssueRefs||[];return e.danglingBlockingRefs&&e.danglingBlockingRefs.length&&(s=s.concat(e.danglingBlockingRefs)),a.c`
      <h2 id="makechanges" class="medium-heading">
        <a href="#makechanges">Add a comment and make changes</a>
      </h2>
      <mr-edit-metadata
        formName="Issue Edit"
        .ownerName=${this._ownerDisplayName(this.issue.ownerRef)}
        .cc=${e.ccRefs}
        .status=${e.statusRef&&e.statusRef.status}
        .statuses=${this._availableStatuses(this.projectConfig.statusDefs,this.issue.statusRef)}
        .summary=${e.summary}
        .components=${e.componentRefs}
        .fieldDefs=${this._fieldDefs}
        .fieldValues=${e.fieldValues}
        .blockedOn=${t}
        .blocking=${s}
        .mergedInto=${e.mergedIntoIssueRef}
        .labelNames=${this._labelNames}
        .derivedLabels=${this._derivedLabels}
        .error=${this.updateError}
        ?saving=${this.updatingIssue}
        @save=${this.save}
        @discard=${this.reset}
        @change=${this._onChange}
      ></mr-edit-metadata>
    `}static get properties(){return{comments:{type:Array},issue:{type:Object},issueRef:{type:Object},projectConfig:{type:Object},updatingIssue:{type:Boolean},updateError:{type:String},focusId:{type:String},_fieldDefs:{type:Array}}}constructor(){super(),this.clientLogger=new G.a("issues"),this.updateError="",this.presubmitDebounceTimeOut=400}createRenderRoot(){return this}disconnectedCallback(){super.disconnectedCallback(),this._debouncedPresubmit&&this._debouncedPresubmit.clear()}stateChanged(e){this.issue=o.Q(e),this.issueRef=o.R(e),this.comments=o.c(e),this.projectConfig=c.q(e),this.updatingIssue=o.F(e).update.requesting;const t=o.F(e).update.error;this.updateError=t&&(t.description||t.message),this.focusId=b.c(e),this._fieldDefs=o.o(e)}updated(e){if(this.focusId&&e.has("focusId")&&"makechanges"===this.focusId.toLowerCase()&&this.focus(),e.has("updatingIssue")){const t=this.updatingIssue,s=e.get("updatingIssue");!t&&s&&(this.updateError||(this._showCommentAddedSnackbar(),this.reset()),this.clientLogger.started("issue-update")&&this.clientLogger.logEnd("issue-update","computer-time",12e4))}}_showCommentAddedSnackbar(){n.b.dispatch(b.j(b.k.ISSUE_COMMENT_ADDED,"Your comment was added."))}reset(){const e=this.querySelector("mr-edit-metadata");e&&e.reset()}async save(){const e=this.querySelector("mr-edit-metadata");if(!e)return;const t=e.delta;if(!function(e){if(!e)return!0;const t=e.map(({label:e})=>e).filter(e=>e.toLowerCase().startsWith("restrict-")),s="You are removing these restrictions:\n"+Object(d.b)(t)+"\nThis might allow more people to access this issue. Are you sure?";return!t.length||confirm(s)}(t.labelRefsRemove))return;const s={issueRef:this.issueRef,delta:t,commentContent:e.getCommentContent(),sendEmail:e.sendEmail},i=await e.getAttachments();i&&i.length&&(s.uploads=i),(s.commentContent||s.delta||s.uploads)&&(this.clientLogger.logStart("issue-update","computer-time"),n.b.dispatch(o.N(s)))}focus(){this.querySelector("#makechanges").scrollIntoView();this.querySelector("mr-edit-metadata").focus()}get _labelNames(){if(!this.issue||!this.issue.labelRefs)return[];return this.issue.labelRefs.filter(e=>!e.isDerived).map(e=>e.label)}get _derivedLabels(){if(!this.issue||!this.issue.labelRefs)return[];return this.issue.labelRefs.filter(e=>e.isDerived).map(e=>e.label)}_ownerDisplayName(e){return e&&e.userId?e.displayName:""}_presubmitIssue(e={},t){this.isConnected&&(Object.keys(e).length||t)&&n.b.dispatch(o.A(this.issueRef,e))}_onChange(e){const{delta:t,commentContent:s}=e.detail||{};this._debouncedPresubmit||(this._debouncedPresubmit=D()((e,t)=>this._presubmitIssue(e,t),this.presubmitDebounceTimeOut)),this._debouncedPresubmit(t,s)}_availableStatuses(e,t){let s=e||[];return s=s.filter(e=>!e.deprecated),!t||s.find(e=>e.status===t.status)?s:[t,...s]}}customElements.define("mr-edit-issue",Y);class K extends(Object(n.a)(a.a)){render(){let e=[],t=[];if(this.commentsByApproval&&this.commentsByApproval.has("")){const s=this.commentsByApproval.get("");e=s.slice(1),t=Object(p.a)(s)}return a.c`
      <style>
        mr-issue-details {
          font-size: var(--chops-main-font-size);
          background-color: var(--chops-white);
          padding-bottom: 1em;
          display: flex;
          align-items: stretch;
          justify-content: flex-start;
          flex-direction: column;
          margin: 0;
          box-sizing: border-box;
        }
        h3 {
          margin-top: 1em;
        }
        mr-description {
          margin-bottom: 1em;
        }
        mr-edit-issue {
          margin-top: 40px;
        }
      </style>
      <mr-description .descriptionList=${t}></mr-description>
      <mr-comment-list
        headingLevel="2"
        .comments=${e}
        .commentsShownCount=${this.commentsShownCount}
      ></mr-comment-list>
      ${this.issuePermissions.includes("addissuecomment")?a.c`<mr-edit-issue></mr-edit-issue>`:""}
    `}static get properties(){return{commentsByApproval:{type:Object},commentsShownCount:{type:Number},issuePermissions:{type:Array}}}constructor(){super(),this.commentsByApproval=new Map,this.issuePermissions=[]}createRenderRoot(){return this}stateChanged(e){this.commentsByApproval=o.d(e),this.issuePermissions=o.z(e)}updated(e){super.updated(e),this._measureCommentLoadTime(e)}async _measureCommentLoadTime(e){if(!e.has("commentsByApproval"))return;if(!this.commentsByApproval||0===this.commentsByApproval.size)return;const t=1===b.f(n.b.getState());if(!t&&!e.get("commentsByApproval"))return;const s=t?void 0:"start load issue detail page";if(s&&!performance.getEntriesByName(s).length)return;await Promise.all(function e(t){if(!t.updateComplete)return[];const s=(t.shadowRoot?t.shadowRoot:t).querySelectorAll("*"),i=Array.from(s,t=>e(t));return[t.updateComplete].concat(...i)}(this));const i="finish load issue detail comments";performance.mark(i);const r=`load issue detail page (${t?"from outside app":"within app"})`;performance.measure(r,s,i);const a=performance.getEntriesByName(r)[0].duration;window.getTSMonClient().recordIssueCommentsLoadTiming(a,t),performance.clearMarks("start load issue detail page"),performance.clearMarks(i),performance.clearMeasures(r)}}customElements.define("mr-issue-details",K);class Q extends a.a{static get styles(){return h.c}render(){return this.hotlist?a.c`
      <a
        href="/u/${this.hotlist.ownerRef&&this.hotlist.ownerRef.userId}/hotlists/${this.hotlist.name}"
        title="${this.hotlist.name} - ${this.hotlist.summary}"
      >
        ${this.hotlist.name}</a>
    `:a.c``}static get properties(){return{hotlist:{type:Object}}}}customElements.define("mr-hotlist-link",Q);const J="INCOMPLETE",X="COMPLETE",Z={statusFunction:e=>{if(!ie(e))return null;const t=ee(e),s=te[t];if(!s)return null;if(e.statusRef&&!e.statusRef.meansOpen)return{rule:Z,target:null,completion:X};const i=new Date(1e3*e.openedTimestamp);return i.setDate(i.getDate()+s),{rule:Z,target:i,completion:J}}},ee=e=>{for(const t of e.fieldValues)if("Pri"===t.fieldRef.fieldName)return t.value},te=Object.freeze({1:42}),se=new Set(["OS>Systems>CrashReporting","OS>Systems>Displays","OS>Systems>Feedback","OS>Systems>HaTS","OS>Systems>Input","OS>Systems>Input>Keyboard","OS>Systems>Input>Mouse","OS>Systems>Input>Shortcuts","OS>Systems>Input>Touch","OS>Systems>Metrics","OS>Systems>Multidevice","OS>Systems>Multidevice>Messages","OS>Systems>Multidevice>SmartLock","OS>Systems>Multidevice>Tethering","OS>Systems>Network>Bluetooth","OS>Systems>Network>Cellular","OS>Systems>Network>VPN","OS>Systems>Network>WiFi","OS>Systems>Printing","OS>Systems>Settings","OS>Systems>Spellcheck","OS>Systems>Update","OS>Systems>Wallpaper","OS>Systems>WirelessCharging","Platform>Apps>Feedback","UI>Shell>Networking"]),ie=e=>{if(!e.componentRefs.some(e=>se.has(e.path)))return!1;let t=null,s=!1;for(const i of e.fieldValues){if("Type"===i.fieldRef.fieldName&&("Feature"===i.value||"FLT-Launch"===i.value||"Postmortem-Followup"===i.value||"Design-Review"===i.value))return!1;"Pri"===i.fieldRef.fieldName&&(t=i.value),"M"===i.fieldRef.fieldName&&(s=!0)}if("1"===t&&s)return!1;for(const t of e.labelRefs)if("ChromeOS_No_SLO"===t.label)return!1;return!0},re=[Z];class ae extends a.a{static get styles(){return a.b``}render(){const e=this._determineSloStatus();return e?e.target?a.c`
      <chops-timestamp .timestamp=${e.target} short></chops-timestamp>`:a.c`Done`:a.c`N/A`}_determineSloStatus(){return this.issue?(e=>{try{for(const t of re){const s=t.statusFunction(e);if(s)return s}}catch(e){}return null})(this.issue):null}static get properties(){return{issue:{type:Object}}}constructor(){super(),this.issue}}customElements.define("mr-issue-slo",ae);var ne=s(23);class oe extends a.a{static get styles(){return h.c}render(){if(!this.values||!this.values.length)return a.c`${z.b}`;switch(this.type){case z.g.URL_TYPE:return a.c`${this.values.map(e=>a.c`
          <a href=${e} target="_blank" rel="nofollow">${e}</a>
        `)}`;case z.g.USER_TYPE:return a.c`${this.values.map(e=>a.c`
          <mr-user-link .userRef=${Object(p.d)(e)}></mr-user-link>
        `)}`;default:return a.c`${this.values.map((e,t)=>a.c`
          <a href="/p/${this.projectName}/issues/list?q=${this.name}=&quot;${e}&quot;">
            ${e}</a>${this.values.length-1>t?", ":""}
        `)}`}}static get properties(){return{name:{type:String},type:{type:Object},projectName:{type:String},values:{type:Array}}}}customElements.define("mr-field-values",oe);const le=new Set(["jessan@google.com"]),ce=e=>{const t={};if(e)for(const s of e.split(","))if(s.startsWith("-")){t[s.substr("-".length)]=!1}else t[s]=!0;return t};class de extends(Object(n.a)(a.a)){static get styles(){return[h.c,a.b`
        :host {
          display: table;
          table-layout: fixed;
          width: 100%;
        }
        td, th {
          padding: 0.5em 4px;
          vertical-align: top;
          text-overflow: ellipsis;
          overflow: hidden;
        }
        td {
          width: 60%;
        }
        td.allow-overflow {
          overflow: visible;
        }
        th {
          text-align: left;
          width: 40%;
        }
        .group-separator {
          border-top: var(--chops-normal-border);
        }
        .group-title {
          font-weight: normal;
          font-style: oblique;
          border-bottom: var(--chops-normal-border);
          text-align: center;
        }
    `]}render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      ${this._renderBuiltInFields()}
      ${this._renderCustomFieldGroups()}
    `}_renderBuiltInFields(){return this.builtInFieldSpec.map(e=>{const t=e.toLowerCase();let s="row-"+t;const i=Object(F.d)(t);if(i)return s="cue-"+i,F.a.has(i)?a.c`
          <tr class=${s}>
            <td colspan="2">
              <mr-cue cuePrefName=${i}></mr-cue>
            </td>
          </tr>
        `:"";const r="approvalstatus"===t,n="mergedinto"===t,o=this._renderBuiltInFieldValue(e);return o?a.c`
        <tr class=${s}>
          <th>${r?"Status":e}:</th>
          <td class=${n?"allow-overflow":""}>
            ${o}
          </td>
        </tr>
      `:""})}_renderBuiltInFieldValue(e){switch(e.toLowerCase()){case"approvalstatus":return this.approvalStatus||z.b;case"approvers":return this.approvers&&this.approvers.length?this.approvers.map(e=>a.c`
            <mr-user-link
              .userRef=${e}
              showAvailabilityIcon
            ></mr-user-link>
            <br />
          `):z.b;case"setter":return this.setter?a.c`
          <mr-user-link
            .userRef=${this.setter}
            showAvailabilityIcon
          ></mr-user-link>
          `:void 0;case"owner":return this.owner?a.c`
          <mr-user-link
            .userRef=${this.owner}
            showAvailabilityIcon
            showAvailabilityText
          ></mr-user-link>
          `:z.b;case"cc":return this.cc&&this.cc.length?this.cc.map(e=>a.c`
            <mr-user-link
              .userRef=${e}
              showAvailabilityIcon
            ></mr-user-link>
            <br />
          `):z.b;case"status":return this.issueStatus?a.c`
          ${this.issueStatus.status} <em>${this.issueStatus.meansOpen?"(Open)":"(Closed)"}
          </em>`:z.b;case"mergedinto":return this.issueStatus&&"Duplicate"===this.issueStatus.status?a.c`
            <mr-issue-link
              .projectName=${this.issueRef.projectName}
              .issue=${this.mergedInto}
            ></mr-issue-link>
          `:void 0;case"components":return this.components&&this.components.length?this.components.map(e=>a.c`
            <a
              href="/p/${this.issueRef.projectName}/issues/list?q=component:${e.path}"
              title="${e.path}${e.docstring?" = "+e.docstring:""}"
            >
              ${e.path}</a><br />
          `):z.b;case"modified":return this.modifiedTimestamp?a.c`
            <chops-timestamp
              .timestamp=${this.modifiedTimestamp}
              short
            ></chops-timestamp>
          `:z.b;case"slo":return((e,t,s)=>{if(!1===ce(s.e)[e])return!1;switch(e){case"slo":return!!t&&le.has(t.displayName);default:throw Error("Unknown experiment provided")}})("slo",this.currentUser,this.queryParams)?a.c`<mr-issue-slo .issue=${this.issue}></mr-issue-slo>`:void 0}}_renderCustomFieldGroups(){const e=Object(q.b)(this.fieldDefs,this.fieldGroups,this.issueType),t=Object(q.c)(this.fieldDefs,this.fieldGroups,this.issueType);return a.c`
      ${e.map(e=>a.c`
        <tr>
          <th class="group-title" colspan="2">
            ${e.groupName}
          </th>
        </tr>
        ${this._renderCustomFields(e.fieldDefs)}
        <tr>
          <th class="group-separator" colspan="2"></th>
        </tr>
      `)}

      ${this._renderCustomFields(t)}
    `}_renderCustomFields(e){return e&&e.length?e.map(e=>{const t=Object(q.f)(this.fieldValueMap,e.fieldRef.fieldName)||[];return a.c`
        <tr ?hidden=${e.isNiche&&!t.length}>
          <th title=${e.docstring}>${e.fieldRef.fieldName}:</th>
          <td>
            <mr-field-values
              .name=${e.fieldRef.fieldName}
              .type=${e.fieldRef.type}
              .values=${t}
              .projectName=${this.issueRef.projectName}
            ></mr-field-values>
          </td>
        </tr>
      `}):[]}static get properties(){return{builtInFieldSpec:{type:Array},approvalStatus:{type:Array},approvers:{type:Array},setter:{type:Object},cc:{type:Array},components:{type:Array},fieldDefs:{type:Array},fieldGroups:{type:Array},issue:{type:Object},issueStatus:{type:String},issueType:{type:String},mergedInto:{type:Object},modifiedTimestamp:{type:Number},owner:{type:Object},isApproval:{type:Boolean},issueRef:{type:Object},fieldValueMap:{type:Object},currentUser:{type:Object},queryParams:{type:Object}}}constructor(){super(),this.isApproval=!1,this.fieldGroups=q.a,this.issueRef={},this.builtInFieldSpec=["Owner","CC",Object(F.b)(F.c.AVAILABILITY_MSGS),"Status","MergedInto","Components","Modified","SLO"],this.fieldValueMap=new Map,this.approvalStatus=void 0,this.approvers=void 0,this.setter=void 0,this.cc=void 0,this.components=void 0,this.fieldDefs=void 0,this.issue=void 0,this.issueStatus=void 0,this.issueType=void 0,this.mergedInto=void 0,this.owner=void 0,this.modifiedTimestamp=void 0,this.currentUser=void 0,this.queryParams={}}connectedCallback(){super.connectedCallback(),this.setAttribute("role","table")}stateChanged(e){this.fieldValueMap=o.p(e),this.issue=o.Q(e),this.issueType=o.M(e),this.issueRef=o.R(e),this.relatedIssues=o.E(e),this.currentUser=l.b(e),this.queryParams=ne.i(e)}}customElements.define("mr-metadata",de);class he extends(Object(n.a)(a.a)){static get styles(){return[h.c,a.b`
        :host {
          box-sizing: border-box;
          padding: 0.25em 8px;
          max-width: 100%;
          display: block;
        }
        h3 {
          display: block;
          font-size: var(--chops-main-font-size);
          margin: 0;
          line-height: 160%;
          width: 40%;
          height: 100%;
          overflow: ellipsis;
          flex-grow: 0;
          flex-shrink: 0;
        }
        a.label {
          color: hsl(120, 100%, 25%);
          text-decoration: none;
        }
        a.label[data-derived] {
          font-style: italic;
        }
        button.linkify {
          display: flex;
          align-items: center;
          text-decoration: none;
          padding: 0.25em 0;
        }
        button.linkify i.material-icons {
          margin-right: 4px;
          font-size: var(--chops-icon-font-size);
        }
        mr-hotlist-link {
          text-overflow: ellipsis;
          overflow: hidden;
          display: block;
          width: 100%;
        }
        .bottom-section-cell, .labels-container {
          padding: 0.5em 4px;
          width: 100%;
          box-sizing: border-box;
        }
        .bottom-section-cell {
          display: flex;
          flex-direction: row;
          flex-wrap: nowrap;
          align-items: flex-start;
        }
        .bottom-section-content {
          max-width: 60%;
        }
        .star-line {
          width: 100%;
          text-align: center;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        mr-issue-star {
          margin-right: 4px;
          padding-bottom: 2px;
        }
      `]}render(){const e=this._hotlistsByRole;return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <div class="star-line">
        <mr-issue-star
          .issueRef=${this.issueRef}
        ></mr-issue-star>
        Starred by ${this.issue.starCount||0} ${Object(d.j)(this.issue.starCount,"user")}
      </div>
      <mr-metadata
        aria-label="Issue Metadata"
        .owner=${this.issue.ownerRef}
        .cc=${this.issue.ccRefs}
        .issueStatus=${this.issue.statusRef}
        .components=${this._components}
        .fieldDefs=${this._fieldDefs}
        .mergedInto=${this.mergedInto}
        .modifiedTimestamp=${this.issue.modifiedTimestamp}
      ></mr-metadata>

      <div class="labels-container">
        ${this.issue.labelRefs&&this.issue.labelRefs.map(e=>a.c`
          <a
            title="${function(e,t){if(!t)return"";let s="";const i=t.label.toLowerCase();e&&e.has(i)&&(s=e.get(i).docstring);return(t.isDerived?"Derived: ":"")+t.label+(s?" = "+s:"")}(this.labelDefMap,e)}"
            href="/p/${this.issueRef.projectName}/issues/list?q=label:${e.label}"
            class="label"
            ?data-derived=${e.isDerived}
          >${e.label}</a>
          <br>
        `)}
      </div>

      ${this.sortedBlockedOn.length?a.c`
        <div class="bottom-section-cell">
          <h3>BlockedOn:</h3>
            <div class="bottom-section-content">
            ${this.sortedBlockedOn.map(e=>a.c`
              <mr-issue-link
                .projectName=${this.issueRef.projectName}
                .issue=${e}
              >
              </mr-issue-link>
              <br />
            `)}
            <button
              class="linkify"
              @click=${this.openViewBlockedOn}
            >
              <i class="material-icons" role="presentation">list</i>
              View details
            </button>
          </div>
        </div>
      `:""}

      ${this.blocking.length?a.c`
        <div class="bottom-section-cell">
          <h3>Blocking:</h3>
          <div class="bottom-section-content">
            ${this.blocking.map(e=>a.c`
              <mr-issue-link
                .projectName=${this.issueRef.projectName}
                .issue=${e}
              >
              </mr-issue-link>
              <br />
            `)}
          </div>
        </div>
      `:""}

      ${this._userId?a.c`
        <div class="bottom-section-cell">
          <h3>Your Hotlists:</h3>
          <div class="bottom-section-content" id="user-hotlists">
            ${this._renderHotlists(e.user)}
            <button
              class="linkify"
              @click=${this.openUpdateHotlists}
            >
              <i class="material-icons" role="presentation">create</i> Update your hotlists
            </button>
          </div>
        </div>
      `:""}

      ${e.participants.length?a.c`
        <div class="bottom-section-cell">
          <h3>Participant's Hotlists:</h3>
          <div class="bottom-section-content">
            ${this._renderHotlists(e.participants)}
          </div>
        </div>
      `:""}

      ${e.others.length?a.c`
        <div class="bottom-section-cell">
          <h3>Other Hotlists:</h3>
          <div class="bottom-section-content">
            ${this._renderHotlists(e.others)}
          </div>
        </div>
      `:""}
    `}_renderHotlists(e){return e.map(e=>a.c`
      <mr-hotlist-link .hotlist=${e}></mr-hotlist-link>
    `)}static get properties(){return{issue:{type:Object},issueRef:{type:Object},projectConfig:String,user:{type:Object},issueHotlists:{type:Array},blocking:{type:Array},sortedBlockedOn:{type:Array},relatedIssues:{type:Object},labelDefMap:{type:Object},_components:{type:Array},_fieldDefs:{type:Array},_type:{type:String}}}stateChanged(e){this.issue=o.Q(e),this.issueRef=o.R(e),this.user=l.b(e),this.projectConfig=c.q(e),this.blocking=o.a(e),this.sortedBlockedOn=o.H(e),this.mergedInto=o.y(e),this.relatedIssues=o.E(e),this.issueHotlists=o.q(e),this.labelDefMap=c.k(e),this._components=o.e(e),this._fieldDefs=o.o(e),this._type=o.M(e)}get _userId(){return this.user&&this.user.userId}get _hotlistsByRole(){const e=this.issueHotlists,t=this.issue&&this.issue.ownerRef,s=this.issue&&this.issue.ccRefs,i={user:[],participants:[],others:[]};return(e||[]).forEach(e=>{e.ownerRef.userId===this._userId?i.user.push(e):!function(e,t,s){if(t&&t.userId===e.userId)return!0;return s&&s.some(t=>t&&t.userId===e.userId)}(e.ownerRef,t,s)?i.others.push(e):i.participants.push(e)}),i}openUpdateHotlists(){this.dispatchEvent(new CustomEvent("open-dialog",{bubbles:!0,composed:!0,detail:{dialogId:"update-issue-hotlists"}}))}openViewBlockedOn(){this.dispatchEvent(new CustomEvent("open-dialog",{bubbles:!0,composed:!0,detail:{dialogId:"reorder-related-issues"}}))}}customElements.define("mr-issue-metadata",he);class pe extends a.a{static get properties(){return{opened:{type:Boolean,reflect:!0},ariaHidden:{attribute:"aria-hidden",type:Boolean,reflect:!0}}}static get styles(){return a.b`
      :host, :host([hidden]) {
        display: none;
      }
      :host([opened]) {
        display: block;
      }
    `}render(){return a.c`
      <slot></slot>
    `}constructor(){super(),this.opened=!1,this.ariaHidden=!0}update(e){e.has("opened")&&(this.ariaHidden=!this.opened),super.update(e)}}customElements.define("chops-collapse",pe);var ue=s(68);const me=["ApprovalStatus","Approvers","Setter",Object(F.b)(F.c.AVAILABILITY_MSGS)];class ge extends(Object(n.a)(a.a)){render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <style>
        mr-approval-card {
          width: 100%;
          background-color: var(--chops-white);
          font-size: var(--chops-main-font-size);
          border-bottom: var(--chops-normal-border);
          box-sizing: border-box;
          display: block;
          border-left: 4px solid var(--approval-bg-color);

          /* Default styles are for the NotSet/NeedsReview case. */
          --approval-bg-color: var(--chops-purple-50);
          --approval-accent-color: var(--chops-purple-700);
        }
        mr-approval-card.status-na {
          --approval-bg-color: hsl(227, 20%, 92%);
          --approval-accent-color: hsl(227, 80%, 40%);
        }
        mr-approval-card.status-approved {
          --approval-bg-color: hsl(78, 55%, 90%);
          --approval-accent-color: hsl(78, 100%, 30%);
        }
        mr-approval-card.status-pending {
          --approval-bg-color: hsl(40, 75%, 90%);
          --approval-accent-color: hsl(33, 100%, 39%);
        }
        mr-approval-card.status-rejected {
          --approval-bg-color: hsl(5, 60%, 92%);
          --approval-accent-color: hsl(357, 100%, 39%);
        }
        mr-approval-card chops-button.edit-survey {
          border: var(--chops-normal-border);
          margin: 0;
        }
        mr-approval-card h3 {
          margin: 0;
          padding: 0;
          display: inline;
          font-weight: inherit;
          font-size: inherit;
          line-height: inherit;
        }
        mr-approval-card mr-description {
          display: block;
          margin-bottom: 0.5em;
        }
        .approver-notice {
          padding: 0.25em 0;
          width: 100%;
          display: flex;
          flex-direction: row;
          align-items: baseline;
          justify-content: space-between;
          border-bottom: 1px dotted hsl(0, 0%, 83%);
        }
        .card-content {
          box-sizing: border-box;
          padding: 0.5em 16px;
          padding-bottom: 1em;
        }
        .expand-icon {
          display: block;
          margin-right: 8px;
          color: hsl(0, 0%, 45%);
        }
        mr-approval-card .header {
          margin: 0;
          width: 100%;
          border: 0;
          font-size: var(--chops-large-font-size);
          font-weight: normal;
          box-sizing: border-box;
          display: flex;
          align-items: center;
          flex-direction: row;
          padding: 0.5em 8px;
          background-color: var(--approval-bg-color);
          cursor: pointer;
        }
        mr-approval-card .status {
          font-size: var(--chops-main-font-size);
          color: var(--approval-accent-color);
          display: inline-flex;
          align-items: center;
          margin-left: 32px;
        }
        mr-approval-card .survey {
          padding: 0.5em 0;
          max-height: 500px;
          overflow-y: auto;
          max-width: 100%;
          box-sizing: border-box;
        }
        mr-approval-card [role="heading"] {
          display: flex;
          flex-direction: row;
          justify-content: space-between;
          align-items: flex-end;
        }
        mr-approval-card .edit-header {
          margin-top: 40px;
        }
      </style>
      <button
        class="header"
        @click=${this.toggleCard}
        aria-expanded=${(this.opened||!1).toString()}
      >
        <i class="material-icons expand-icon">
          ${this.opened?"expand_less":"expand_more"}
        </i>
        <h3>${this.fieldName}</h3>
        <span class="status">
          <i class="material-icons status-icon" role="presentation">
            ${ue.c[this._statusClass]}
          </i>
          ${this._status}
        </span>
      </button>
      <chops-collapse class="card-content" ?opened=${this.opened}>
        <div class="approver-notice">
          ${this._isApprover?a.c`
            You are an approver for this bit.
          `:""}
          ${this.user&&this.user.isSiteAdmin?a.c`
            Your site admin privileges give you full access to edit this approval.
          `:""}
        </div>
        <mr-metadata
          aria-label="${this.fieldName} Approval Metadata"
          .approvalStatus=${this._status}
          .approvers=${this.approvers}
          .setter=${this.setter}
          .fieldDefs=${this.fieldDefs}
          .builtInFieldSpec=${me}
          isApproval
        ></mr-metadata>
        <h4
          class="medium-heading"
          role="heading"
        >
          ${this.fieldName} Survey
          <chops-button class="edit-survey" @click=${this._openSurveyEditor}>
            Edit responses
          </chops-button>
        </h4>
        <mr-description
          class="survey"
          .descriptionList=${this._allSurveys}
        ></mr-description>
        <mr-comment-list
          headingLevel=4
          .comments=${this.comments}
        ></mr-comment-list>
        ${this.issuePermissions.includes("addissuecomment")?a.c`
          <h4 id="edit${this.fieldName}" class="medium-heading edit-header">
            Editing approval: ${this.phaseName} &gt; ${this.fieldName}
          </h4>
          <mr-edit-metadata
            .formName="${this.phaseName} > ${this.fieldName}"
            .approvers=${this.approvers}
            .fieldDefs=${this.fieldDefs}
            .statuses=${this._availableStatuses}
            .status=${this._status}
            .error=${this.updateError&&(this.updateError.description||this.updateError.message)}
            ?saving=${this.updatingApproval}
            ?hasApproverPrivileges=${this._hasApproverPrivileges}
            isApproval
            @save=${this.save}
            @discard=${this.reset}
          ></mr-edit-metadata>
        `:""}
      </chops-collapse>
    `}static get properties(){return{fieldName:{type:String},approvers:{type:Array},phaseName:{type:String},setter:{type:Object},fieldDefs:{type:Array},focusId:{type:String},user:{type:Object},issue:{type:Object},issueRef:{type:Object},issuePermissions:{type:Array},projectConfig:{type:Object},comments:{type:String},opened:{type:Boolean,reflect:!0},statusEnum:{type:String},updatingApproval:{type:Boolean},updateError:{type:Object},_allSurveys:{type:Array}}}constructor(){super(),this.opened=!1,this.comments=[],this.fieldDefs=[],this.issuePermissions=[],this._allSurveys=[]}createRenderRoot(){return this}stateChanged(e){const t=c.i(e);t&&this.fieldName&&t.has(this.fieldName)&&(this.fieldDefs=t.get(this.fieldName));const s=o.d(e);if(s&&this.fieldName&&s.has(this.fieldName)){const e=s.get(this.fieldName);this.comments=e.slice(1),this._allSurveys=Object(p.a)(e)}this.focusId=b.c(e),this.user=l.b(e),this.issue=o.Q(e),this.issueRef=o.R(e),this.issuePermissions=o.z(e),this.projectConfig=c.q(e),this.updatingApproval=o.F(e).updateApproval.requesting,this.updateError=o.F(e).updateApproval.error}update(e){if((e.has("comments")||e.has("focusId"))&&this.comments){this.comments.find(e=>"c"+e.sequenceNum===this.focusId)&&(this.opened=!0)}e.has("statusEnum")&&this.setAttribute("class",this._statusClass),(e.has("user")||e.has("approvers"))&&this._isApprover&&(this.opened=!0),super.update(e)}updated(e){e.has("issue")&&this.reset()}reset(){const e=this.querySelector("mr-edit-metadata");e&&e.reset()}async save(){const e=this.querySelector("mr-edit-metadata"),t=e.delta;t.status&&(t.status=ue.f[t.status]);const s={issueRef:this.issueRef,fieldRef:{type:z.g.APPROVAL_TYPE,fieldName:this.fieldName},approvalDelta:t,commentContent:e.getCommentContent(),sendEmail:e.sendEmail},i=await e.getAttachments();i&&i.length&&(s.uploads=i),(s.commentContent||s.approvalDelta||s.uploads)&&n.b.dispatch(o.O(s))}toggleCard(){this.opened=!this.opened}get _statusClass(){return ue.d[this._status]}get _status(){return ue.e[this.statusEnum||""]}get _isApprover(){if(!this.approvers||!this.user||!this.user.displayName)return!1;const e=this.user.groups||[];return!!this.approvers.find(t=>t.displayName===this.user.displayName||e.find(e=>e.displayName===t.displayName))}get _hasApproverPrivileges(){return this.user&&this.user.isSiteAdmin||this._isApprover}get _availableStatuses(){return ue.a.filter(e=>e.status===this._status||!(!this._hasApproverPrivileges&&ue.b.has(e.status))&&"NotSet"!==e.status)}_openSurveyEditor(){this.dispatchEvent(new CustomEvent("open-dialog",{bubbles:!0,composed:!0,detail:{dialogId:"edit-description",fieldName:this.fieldName}}))}}customElements.define("mr-approval-card",ge);const fe={Beta:"feature_freeze","Stable-Exp":"final_beta_cut",Stable:"stable_cut","Stable-Full":"stable_cut"},be={Beta:"earliest_beta","Stable-Exp":"final_beta",Stable:"stable_date","Stable-Full":"stable_date"},ve={Beta:"earliest_beta_ios"},ye=["Beta","Stable","Stable-Exp","Stable-Full"];class _e extends(Object(n.a)(a.a)){render(){const e=ye.includes(this.phaseName),t=!this.approvals||!this.approvals.length;return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <style>
        mr-phase {
          display: block;
        }
        mr-phase chops-dialog {
          --chops-dialog-theme: {
            width: 500px;
            max-width: 100%;
          };
        }
        mr-phase h2 {
          margin: 0;
          font-size: var(--chops-large-font-size);
          font-weight: normal;
          padding: 0.5em 8px;
          box-sizing: border-box;
          display: flex;
          align-items: center;
          flex-direction: row;
          justify-content: space-between;
        }
        mr-phase h2 em {
          margin-left: 16px;
          font-size: var(--chops-main-font-size);
        }
        mr-phase .chip {
          display: inline-block;
          font-size: var(--chops-main-font-size);
          padding: 0.25em 8px;
          margin: 0 2px;
          border-radius: 16px;
          background: var(--chops-blue-gray-50);
        }
        .phase-edit {
          padding: 0.1em 8px;
        }
      </style>
      <h2>
        <div>
          Approvals<span ?hidden=${!this.phaseName||!this.phaseName.length}>:
            ${this.phaseName}
          </span>
          ${e?a.c`${this.fieldDefs&&this.fieldDefs.map(e=>this._renderPhaseField(e))}
            <em ?hidden=${!this._nextDate}>
              ${this._dateDescriptor}
              <chops-timestamp .timestamp=${this._nextDate}></chops-timestamp>
            </em>
            <em ?hidden=${!this._nextUniqueiOSDate}>
              <b>iOS</b> ${this._dateDescriptor}
              <chops-timestamp .timestamp=${this._nextUniqueiOSDate}
              ></chops-timestamp>
            </em>
          `:""}
        </div>
        ${e?a.c`
          <chops-button @click=${this.edit} class="de-emphasized phase-edit">
            <i class="material-icons" role="presentation">create</i>
            Edit
          </chops-button>
        `:""}
      </h2>
      ${this.approvals&&this.approvals.map(e=>a.c`
        <mr-approval-card
          .approvers=${e.approverRefs}
          .setter=${e.setterRef}
          .fieldName=${e.fieldRef.fieldName}
          .phaseName=${this.phaseName}
          .statusEnum=${e.status}
          .survey=${e.survey}
          .surveyTemplate=${e.surveyTemplate}
          .urls=${e.urls}
          .labels=${e.labels}
          .users=${e.users}
        ></mr-approval-card>
      `)}
      ${t?a.c`No tasks for this phase.`:""}
      <!-- TODO(ehmaldonado): Move to /issue-detail/dialogs -->
      <chops-dialog id="editPhase" aria-labelledby="phaseDialogTitle">
        <h3 id="phaseDialogTitle" class="medium-heading">
          Editing phase: ${this.phaseName}
        </h3>
        <mr-edit-metadata
          id="metadataForm"
          class="edit-actions-right"
          .formName=${this.phaseName}
          .fieldDefs=${this.fieldDefs}
          .phaseName=${this.phaseName}
          ?disabled=${this._updatingIssue}
          .error=${this._updateIssueError&&this._updateIssueError.description}
          @save=${this.save}
          @discard=${this.cancel}
          isApproval
          disableAttachments
        ></mr-edit-metadata>
      </chops-dialog>
    `}_renderPhaseField(e){const t=Object(q.f)(this._fieldValueMap,e.fieldRef.fieldName,this.phaseName);return a.c`
      <div class="chip">
        ${e.fieldRef.fieldName}:
        <mr-field-values
          .name=${e.fieldRef.fieldName}
          .type=${e.fieldRef.type}
          .values=${t}
          .projectName=${this.issueRef.projectName}
        ></mr-field-values>
      </div>
    `}static get properties(){return{issue:{type:Object},issueRef:{type:Object},phaseName:{type:String},approvals:{type:Array},fieldDefs:{type:Array},_updatingIssue:{type:Boolean},_updateIssueError:{type:Object},_fieldValueMap:{type:Object},_milestoneData:{type:Object},_isFetchingMilestone:{type:Boolean},_fetchedMilestone:{type:String}}}createRenderRoot(){return this}constructor(){super(),this.issue={},this.issueRef={},this.phaseName="",this.approvals=[],this.fieldDefs=[],this._updatingIssue=!1,this._updateIssueError=void 0,this._milestoneData={},this._isFetchingMilestone=!1,this._fetchedMilestone=void 0,this._fetchMilestoneComplete=void 0}stateChanged(e){this.issue=o.Q(e),this.issueRef=o.R(e),this.fieldDefs=c.j(e),this._updatingIssue=o.F(e).update.requesting,this._updateIssueError=o.F(e).update.error,this._fieldValueMap=o.p(e)}updated(e){if(e.has("issue")&&this.reset(),e.has("_updatingIssue")&&(this._updatingIssue||this._updateIssueError||this.cancel()),!this._isFetchingMilestone){const e=this._milestoneToFetch;e&&this._fetchedMilestone!==e&&(this._fetchMilestoneComplete=this.fetchMilestoneData(e))}}async fetchMilestoneData(e){this._isFetchingMilestone=!0;try{const t=await window.fetch("https://chromiumdash.appspot.com/fetch_milestone_schedule?mstone="+e);this._milestoneData=await t.json()}catch(e){console.error("Error when fetching milestone data: "+e)}this._fetchedMilestone=e,this._isFetchingMilestone=!1}edit(){this.reset(),this.querySelector("#editPhase").open()}cancel(){this.querySelector("#editPhase").close(),this.reset()}reset(){this.querySelector("#metadataForm").reset()}save(){const e=this.querySelector("#metadataForm"),t=e.delta;t.fieldValsAdd&&(t.fieldValsAdd=t.fieldValsAdd.map(e=>Object.assign({phaseRef:{phaseName:this.phaseName}},e))),t.fieldValsRemove&&(t.fieldValsRemove=t.fieldValsRemove.map(e=>Object.assign({phaseRef:{phaseName:this.phaseName}},e)));const s={issueRef:this.issueRef,delta:t,sendEmail:e.sendEmail,commentContent:e.getCommentContent()};(s.commentContent||s.delta)&&n.b.dispatch(o.N(s))}get _nextDate(){const e=this.phaseName,t=this._status;let s=this._milestoneData&&this._milestoneData.mstones;if(!(e&&t&&s&&s.length))return 0;s=s[0];let i=fe[e];if(["Approved","Launched"].includes(t)){const t=this._fieldValueMap.get("OS");if(t&&t.every(e=>"iOS"===e)&&e in ve)return 0;i=be[e]}return i&&i in s?Math.floor(new Date(s[i]).getTime()/1e3):0}get _nextUniqueiOSDate(){const e=this.phaseName,t=this._status;let s=this._milestoneData&&this._milestoneData.mstones;if(!(e&&t&&s&&s.length))return 0;s=s[0];const i=this._fieldValueMap.get("OS");if(["Approved","Launched"].includes(t)&&i&&i.includes("iOS")){const t=ve[e];if(t)return Math.floor(new Date(s[t]).getTime()/1e3)}return 0}get _dateDescriptor(){const e=this._status;return"Approved"===e?"Launching on ":"Launched"===e?"Launched on ":"Due by "}get _status(){const e=this._targetMilestone,t=this._approvedMilestone,s=this._launchedMilestone;return t>=e?s>=t?"Launched":"Approved":"Target"}get _approvedMilestone(){return Object(q.e)(this._fieldValueMap,"M-Approved",this.phaseName)}get _launchedMilestone(){return Object(q.e)(this._fieldValueMap,"M-Launched",this.phaseName)}get _targetMilestone(){return Object(q.e)(this._fieldValueMap,"M-Target",this.phaseName)}get _milestoneToFetch(){const e=Number.parseInt(this._targetMilestone)||0,t=Number.parseInt(this._approvedMilestone)||0,s=Number.parseInt(this._launchedMilestone)||0,i=Math.max(e,t,s);return i>0?""+i:""}}customElements.define("mr-phase",_e);class we extends(Object(n.a)(a.a)){render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <style>
        mr-launch-overview {
          max-width: 100%;
          display: flex;
          flex-flow: column;
          justify-content: flex-start;
          align-items: stretch;
        }
        mr-launch-overview[hidden] {
          display: none;
        }
        mr-phase {
          margin-bottom: 0.75em;
        }
      </style>
      ${this.phases.map(e=>a.c`
        <mr-phase
          .phaseName=${e.phaseRef.phaseName}
          .approvals=${this._approvalsForPhase(this.approvals,e.phaseRef.phaseName)}
        ></mr-phase>
      `)}
      ${this._phaselessApprovals.length?a.c`
        <mr-phase .approvals=${this._phaselessApprovals}></mr-phase>
      `:""}
    `}static get properties(){return{approvals:{type:Array},phases:{type:Array},hidden:{type:Boolean,reflect:!0}}}createRenderRoot(){return this}constructor(){super(),this.approvals=[],this.phases=[],this.hidden=!0}stateChanged(e){o.Q(e)&&(this.approvals=o.Q(e).approvalValues||[],this.phases=o.Q(e).phases||[])}update(e){(e.has("phases")||e.has("approvals"))&&(this.hidden=!this.phases.length&&!this.approvals.length),super.update(e)}get _phaselessApprovals(){return this._approvalsForPhase(this.approvals)}_approvalsForPhase(e,t){return(e||[]).filter(e=>e.phaseRef.phaseName==t)}}customElements.define("mr-launch-overview",we);s(215);class xe extends(Object(n.a)(a.a)){constructor(){super(),this._editedDescription=""}static get styles(){return[h.c,h.a,h.b,a.b`
        chops-dialog {
          --chops-dialog-width: 800px;
        }
        textarea {
          font-family: var(--mr-toggled-font-family);
          min-height: 300px;
          max-height: 500px;
          border: var(--chops-accessible-border);
          padding: 0.5em 4px;
          margin: 0.5em 0;
        }
        .attachments {
          margin: 0.5em 0;
        }
        .content {
          padding: 0.5em 0.5em;
          width: 100%;
          box-sizing: border-box;
        }
        .edit-controls {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
      `]}render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <chops-dialog aria-labelledby="editDialogTitle">
        <h3 id="editDialogTitle" class="medium-heading">
          Edit ${this._title}
        </h3>
        <textarea
          id="description"
          class="content"
          @keyup=${this._setEditedDescription}
          @change=${this._setEditedDescription}
          .value=${this._editedDescription}
        ></textarea>
        ${this._renderMarkdown?a.c`
          <div class="markdown-preview preview-height-description">
            <div class="markdown">
              ${Object(U.a)(Object(m.c)(this._editedDescription))}
            </div>
          </div>`:""}
        <h3 class="medium-heading">
          Add attachments
        </h3>
        <div class="attachments">
          ${this._attachments&&this._attachments.map(e=>a.c`
            <label>
              <chops-checkbox
                type="checkbox"
                checked="true"
                class="kept-attachment"
                data-attachment-id=${e.attachmentId}
                @checked-change=${this._keptAttachmentIdsChanged}
              />
              <a href=${e.viewUrl} target="_blank">
                ${e.filename}
              </a>
            </label>
            <br>
          `)}
          <mr-upload></mr-upload>
        </div>
        <mr-error
          ?hidden=${!this._attachmentError}
        >${this._attachmentError}</mr-error>
        <div class="edit-controls">
          <chops-checkbox
            id="sendEmail"
            ?checked=${this._sendEmail}
            @checked-change=${this._setSendEmail}
          >Send email</chops-checkbox>
          <div>
            <chops-button id="discard" @click=${this.cancel} class="de-emphasized">
              Discard
            </chops-button>
            <chops-button id="save" @click=${this.save} class="emphasized">
              Save changes
            </chops-button>
          </div>
        </div>
      </chops-dialog>
    `}static get properties(){return{commentsByApproval:{type:Array},issueRef:{type:Object},fieldName:{type:String},projectName:{type:String},_attachmentError:{type:String},_attachments:{type:Array},_boldLines:{type:Array},_editedDescription:{type:String},_title:{type:String},_keptAttachmentIds:{type:Object},_sendEmail:{type:Boolean},_prefs:{type:Object}}}stateChanged(e){this.commentsByApproval=o.d(e),this.issueRef=o.R(e),this.projectName=c.t(e),this._prefs=l.j(e)}async open(e){await this.updateComplete,this.shadowRoot.querySelector("chops-dialog").open(),this.fieldName=e.detail.fieldName,this.reset()}async reset(){await this.updateComplete,this._attachmentError="",this._attachments=[],this._boldLines=[],this._keptAttachmentIds=new Set;const e=this.shadowRoot.querySelector("mr-upload");e&&e.reset(),this._initializeView(this.commentsByApproval,this.fieldName),this.shadowRoot.querySelectorAll(".kept-attachment").forEach(e=>{e.checked=!0}),this.shadowRoot.querySelector("#sendEmail").checked=!0,this._sendEmail=!0}async cancel(){await this.updateComplete,this.shadowRoot.querySelector("chops-dialog").close()}async save(){const e=this._markupNewContent(),t=this._sendEmail,s=Array.from(this._keptAttachmentIds),i={issueRef:this.issueRef,isDescription:!0,commentContent:e,keptAttachments:s,sendEmail:t};try{const e=this.shadowRoot.querySelector("mr-upload"),t=await e.loadFiles();t&&t.length&&(i.uploads=t),this.fieldName?(i.fieldRef={type:z.g.APPROVAL_TYPE,fieldName:this.fieldName},n.b.dispatch(o.O(i))):n.b.dispatch(o.N(i)),this.shadowRoot.querySelector("chops-dialog").close()}catch(e){this._attachmentError="Error while loading file for attachment: "+e.message}}get _renderMarkdown(){const e=this._prefs.get("render_markdown");return Object(m.d)({project:this.projectName,enabled:e})}_setEditedDescription(e){const t=e.target;this._editedDescription=t.value}_keptAttachmentIdsChanged(e){e.target.checked=e.detail.checked;const t=Number.parseInt(e.target.dataset.attachmentId);e.target.checked?this._keptAttachmentIds.add(t):this._keptAttachmentIds.delete(t)}_initializeView(e,t){this._title=t?t+" Survey":"Description";const s=t||"";if(!e||!e.has(s))return;const i=Object(p.a)(e.get(s)),r=i[i.length-1];r.attachments&&(this._keptAttachmentIds=new Set(r.attachments.map(e=>Number.parseInt(e.attachmentId))),this._attachments=r.attachments),this._processRawContent(r.content)}_processRawContent(e){const t=e.trim().split(/(<b>[^<\n]+<\/b>)/m),s=[];let i="";t.forEach(e=>{if(e.startsWith("<b>")&&e.endsWith("</b>")){const t=e.slice(3,-4).trim();i+=t,/\S/.test(t)&&s.push(t)}else i+=e}),this._boldLines=s,this._editedDescription=i}_markupNewContent(){return this._editedDescription.trim().split("\n").map(e=>{let t=e;const s=this._boldLines.find(t=>e.startsWith(t));return s&&(t=`<b>${s}</b>${e.slice(s.length)}`),t}).join("\n")}_setSendEmail(e){this._sendEmail=e.detail.checked}}customElements.define("mr-edit-description",xe);const $e=/[^a-z0-9]+/i,ke=(e,t)=>{e.value=t};let Oe=1;class Ie extends a.a{render(){const e=this.completions,t=this._prefix.trim().toLowerCase(),s=this._selectedIndex,i=s>=0&&s<e.length?e[s]:"";return a.c`
      <style>
        /*
         * Really specific class names are necessary because ShadowDOM
         * is disabled for this component.
         */
        .chops-autocomplete-container {
          position: relative;
        }
        .chops-autocomplete-container table {
          padding: 0;
          font-size: var(--chops-main-font-size);
          color: var(--chops-link-color);
          position: absolute;
          background: var(--chops-white);
          border: var(--chops-accessible-border);
          z-index: 999;
          box-shadow: 2px 3px 8px 0px hsla(0, 0%, 0%, 0.3);
          border-spacing: 0;
          border-collapse: collapse;
          /* In the case when the autocomplete extends the
           * height of the viewport, we want to make sure
           * there's spacing. */
          margin-bottom: 1em;
        }
        .chops-autocomplete-container tbody {
          display: block;
          min-width: 100px;
          max-height: 500px;
          overflow: auto;
        }
        .chops-autocomplete-container tr {
          cursor: pointer;
          transition: background 0.2s ease-in-out;
        }
        .chops-autocomplete-container tr[data-selected] {
          background: var(--chops-active-choice-bg);
          text-decoration: underline;
        }
        .chops-autocomplete-container td {
          padding: 0.25em 8px;
          white-space: nowrap;
        }
        .screenreader-hidden {
          clip: rect(1px, 1px, 1px, 1px);
          height: 1px;
          overflow: hidden;
          position: absolute;
          white-space: nowrap;
          width: 1px;
        }
      </style>
      <div class="chops-autocomplete-container">
        <span class="screenreader-hidden" aria-live="polite">
          ${i}
        </span>
        <table
          ?hidden=${!e.length}
        >
          <tbody>
            ${e.map((e,i)=>a.c`
              <tr
                id=${je(this.id,i)}
                ?data-selected=${i===s}
                data-index=${i}
                data-value=${e}
                @mouseover=${this._hoverCompletion}
                @mousedown=${this._clickCompletion}
                role="option"
                aria-selected=${e.toLowerCase()===t?"true":"false"}
              >
                <td class="completion">
                  ${this._renderCompletion(e)}
                </td>
                <td class="docstring">
                  ${this._renderDocstring(e)}
                </td>
              </tr>
            `)}
          </tbody>
        </table>
      </div>
    `}_renderCompletion(e){const t=this._matchDict;if(!(e in t))return e;const{index:s,matchesDoc:i}=t[e];if(i)return e;const r=this._prefix,n=e.substr(0,s),o=e.substr(s,r.length),l=e.substr(s+r.length);return a.c`${n}<b>${o}</b>${l}`}_renderDocstring(e){const t=this._matchDict,s=this.docDict;if(!e in s)return"";const i=s[e];if(!(e in t))return i;const{index:r,matchesDoc:n}=t[e];if(!n)return i;const o=this._prefix,l=i.substr(0,r),c=i.substr(r,o.length),d=i.substr(r+o.length);return a.c`${l}<b>${c}</b>${d}`}static get properties(){return{for:{type:String},id:{type:String,reflect:!0},role:{type:String,reflect:!0},strings:{type:Array},docDict:{type:Object},replacer:{type:Object},completions:{type:Array},max:{type:Number},_matchDict:{type:Object},_selectedIndex:{type:Number},_prefix:{type:String},_forRef:{type:Object},_boundToggleCompletionsOnFocus:{type:Object},_boundNavigateCompletions:{type:Object},_boundUpdateCompletions:{type:Object},_oldAttributes:{type:Object}}}constructor(){super(),this.strings=[],this.docDict={},this.completions=[],this.max=200,this.role="listbox",this.id="chops-autocomplete-"+Oe++,this._matchDict={},this._selectedIndex=-1,this._prefix="",this._boundToggleCompletionsOnFocus=this._toggleCompletionsOnFocus.bind(this),this._boundUpdateCompletions=this._updateCompletions.bind(this),this._boundNavigateCompletions=this._navigateCompletions.bind(this),this._oldAttributes={}}createRenderRoot(){return this}disconnectedCallback(){super.disconnectedCallback(),this._disconnectAutocomplete(this._forRef)}updated(e){if(e.has("for")){const e=this.getRootNode().querySelector("#"+this.for);this._forRef="INPUT"===(e.tagName||"").toUpperCase()?e:void 0,this._connectAutocomplete(this._forRef)}this._forRef&&(e.has("id")&&this._forRef.setAttribute("aria-owns",this.id),e.has("completions")&&this._forRef.setAttribute("aria-expanded",this.completions.length?"true":"false"),(e.has("_selectedIndex")||e.has("completions"))&&(this._updateAriaActiveDescendant(this._forRef),this._scrollCompletionIntoView(this._selectedIndex)))}_updateAriaActiveDescendant(e){const t=this._selectedIndex;if(t>=0&&t<this.completions.length){const s=je(this.id,t);e.setAttribute("aria-activedescendant",s)}else e.setAttribute("aria-activedescendant","")}_scrollCompletionIntoView(e){const t=je(this.id,e),s=this.querySelector("tbody"),i=this.querySelector("#"+t);if(!i)return;const r=i.offsetTop-s.scrollTop;r<0&&(s.scrollTop=i.offsetTop),r>s.offsetHeight-i.offsetHeight&&(s.scrollTop=i.offsetTop-(s.offsetHeight-i.offsetHeight))}completeValue(e){if(!this._forRef)return;(this.replacer||ke)(this._forRef,e),this.hideCompletions()}showCompletions(){if(!this._forRef)return this.hideCompletions(),!1;this._prefix=this._forRef.value.trim().toLowerCase(),this._selectedIndex=0;const e={},t=[];for(let s=0;s<this.strings.length&&t.length<this.max;s++){const i=this.strings[s];let r=this._matchIndex(this._prefix,i),a=r>=0;a?e[i]={index:r,matchesDoc:!1}:i in this.docDict&&(r=this._matchIndex(this._prefix,this.docDict[i]),a=r>=0,a&&(e[i]={index:r,matchesDoc:!0})),a&&t.push(i)}return this._matchDict=e,this.completions=t,!!this.completions.length}_matchIndex(e,t){const s=t.toLowerCase().indexOf(e.toLocaleLowerCase());return 0===s||s>0&&t[s-1].match($e)?s:-1}hideCompletions(){this.completions=[],this._prefix="",this._selectedIndex=-1}_hoverCompletion(e){const t=e.currentTarget;if(!t.dataset||!t.dataset.index)return;const s=Number.parseInt(t.dataset.index);s>=0&&s<this.completions.length&&(this._selectedIndex=s)}_clickCompletion(e){e.preventDefault();const t=e.currentTarget;t.dataset&&t.dataset.value&&this.completeValue(t.dataset.value)}_toggleCompletionsOnFocus(e){e.target.matches(":focus")?this.showCompletions():this.hideCompletions()}_navigateCompletions(e){const t=this.completions;if(t.length)switch(e.key){case"ArrowUp":e.preventDefault(),this._navigateUp();break;case"ArrowDown":e.preventDefault(),this._navigateDown();break;case"Enter":e.preventDefault(),this._selectedIndex>=0&&this._selectedIndex<=t.length&&this.completeValue(t[this._selectedIndex]);break;case"Escape":e.preventDefault(),this.hideCompletions()}}_navigateUp(){const e=this.completions;this._selectedIndex-=1,this._selectedIndex<0&&(this._selectedIndex=e.length-1)}_navigateDown(){const e=this.completions;this._selectedIndex+=1,this._selectedIndex>=e.length&&(this._selectedIndex=0)}_updateCompletions(e){B.a.has(e.key)||this.showCompletions()}_connectAutocomplete(e){e&&(e.addEventListener("keyup",this._boundUpdateCompletions),e.addEventListener("keydown",this._boundNavigateCompletions),e.addEventListener("focus",this._boundToggleCompletionsOnFocus),e.addEventListener("blur",this._boundToggleCompletionsOnFocus),this._oldAttributes={"aria-owns":e.getAttribute("aria-owns"),"aria-autocomplete":e.getAttribute("aria-autocomplete"),"aria-expanded":e.getAttribute("aria-expanded"),"aria-haspopup":e.getAttribute("aria-haspopup"),"aria-activedescendant":e.getAttribute("aria-activedescendant")},e.setAttribute("aria-owns",this.id),e.setAttribute("aria-autocomplete","both"),e.setAttribute("aria-expanded","false"),e.setAttribute("aria-haspopup","listbox"),e.setAttribute("aria-activedescendant",""))}_disconnectAutocomplete(e){if(e){e.removeEventListener("keyup",this._boundUpdateCompletions),e.removeEventListener("keydown",this._boundNavigateCompletions),e.removeEventListener("focus",this._boundToggleCompletionsOnFocus),e.removeEventListener("blur",this._boundToggleCompletionsOnFocus);for(const t of Object.keys(this._oldAttributes))e.setAttribute(t,this._oldAttributes[t]);this._oldAttributes={}}}}function je(e,t){return`${e}-option-${t}`}customElements.define("chops-autocomplete",Ie);class Ce extends(Object(n.a)(Ie)){static get properties(){return{...Ie.properties,vocabularyName:{type:String},vocabularies:{type:Object}}}constructor(){super(),this.vocabularyName="",this.vocabularies={}}stateChanged(e){const t=c.v(e),s=l.k(e);this.vocabularies={project:this._setupProjectVocabulary(s),member:this._setupMemberVocabulary(t),owner:this._setupOwnerVocabulary(t)}}_setupProjectVocabulary(e){const{ownerOf:t=[],memberOf:s=[],contributorTo:i=[]}=e;return{strings:[...t,...s,...i]}}_setupMemberVocabulary(e){const{userRefs:t=[]}=e;return{strings:Object(p.B)(t)}}_setupOwnerVocabulary(e){const{userRefs:t=[],groupRefs:s=[]}=e,i=Object(p.B)(s),r=Object(p.B)(t);return{strings:Object(d.a)(r,i)}}update(e){if(e.has("vocabularyName")||e.has("vocabularies"))if(this.vocabularyName in this.vocabularies){const e=this.vocabularies[this.vocabularyName];this.strings=e.strings||[],this.docDict=e.docDict||{},this.replacer=e.replacer}else this.strings=[],this.docDict={},this.replacer=null;super.update(e)}}customElements.define("mr-autocomplete",Ce);class Se extends(Object(n.a)(a.a)){static get styles(){return[h.c,a.b`
        .target-project-dialog {
          display: block;
          font-size: var(--chops-main-font-size);
        }
        .error {
          max-width: 100%;
          color: red;
          margin-bottom: 1em;
        }
        .edit-actions {
          width: 100%;
          margin: 0.5em 0;
          text-align: right;
        }
        input {
          box-sizing: border-box;
          width: 95%;
          padding: 0.25em 4px;
        }
      `]}render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
            rel="stylesheet">
      <chops-dialog closeOnOutsideClick>
        <div class="target-project-dialog">
          <h3 class="medium-heading">${this._action} issue</h3>
          <div class="input-grid">
            <label for="targetProjectInput">Target project:</label>
            <div>
              <input id="targetProjectInput" />
              <mr-autocomplete
                vocabularyName="project"
                for="targetProjectInput"
              ></mr-autocomplete>
            </div>
          </div>

          ${this._targetProjectError?a.c`
            <div class="error">
              ${this._targetProjectError}
            </div>
          `:""}

          <div class="edit-actions">
            <chops-button @click=${this.cancel} class="de-emphasized">
              Cancel
            </chops-button>
            <chops-button @click=${this.save} class="emphasized">
              ${this._action} issue
            </chops-button>
          </div>
        </div>
      </chops-dialog>
    `}static get properties(){return{issueRef:{type:Object},_action:{type:String},_targetProjectError:{type:String}}}stateChanged(e){this.issueRef=o.R(e)}open(e){this.shadowRoot.querySelector("chops-dialog").open(),this._action=e.detail.action,this.reset()}reset(){this.shadowRoot.querySelector("#targetProjectInput").value="",this._targetProjectError=""}cancel(){this.shadowRoot.querySelector("chops-dialog").close()}save(){const e=this._action+"Issue";u.a.call("monorail.Issues",e,{issueRef:this.issueRef,targetProjectName:this.shadowRoot.querySelector("#targetProjectInput").value}).then(e=>{const t=e.newIssueRef.projectName,s=e.newIssueRef.localId;r()(`/p/${t}/issues/detail?id=${s}`),this.cancel()},e=>{this._targetProjectError=e})}}customElements.define("mr-move-copy-issue",Se);class Ee extends(Object(n.a)(a.a)){static get styles(){return[h.c,a.b`
        label {
          font-weight: bold;
          text-align: right;
        }
        form {
          padding: 1em 8px;
          display: block;
          font-size: var(--chops-main-font-size);
        }
        textarea {
          font-family: var(--mr-toggled-font-family);
          min-height: 80px;
          border: var(--chops-accessible-border);
          padding: 0.5em 4px;
        }
        .edit-actions {
          width: 100%;
          margin: 0.5em 0;
          text-align: right;
        }
      `]}render(){return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <chops-dialog closeOnOutsideClick>
        <h3 class="medium-heading">Convert issue to new template structure</h3>
        <form id="convertIssueForm">
          <div class="input-grid">
            <label for="templateInput">Pick a template: </label>
            <select id="templateInput" @change=${this._templateInputChanged}>
              <option value="">--Please choose a project template--</option>
              ${this.projectTemplates.map(e=>a.c`
                <option value=${e.templateName}>
                  ${e.templateName}
                </option>`)}
            </select>
            <label for="commentContent">Comment: </label>
            <textarea id="commentContent" placeholder="Add a comment"></textarea>
            <span></span>
            <chops-checkbox
              @checked-change=${this._sendEmailChecked}
              checked=${this.sendEmail}
            >Send email</chops-checkbox>
          </div>
          <mr-error ?hidden=${!this.convertIssueError}>
            ${this.convertIssueError&&this.convertIssueError.description}
          </mr-error>
          <div class="edit-actions">
            <chops-button @click=${this.close} class="de-emphasized discard-button">
              Discard
            </chops-button>
            <chops-button @click=${this.save} class="emphasized" ?disabled=${!this.selectedTemplate}>
              Convert issue
            </chops-button>
          </div>
        </form>
      </chops-dialog>
    `}static get properties(){return{convertingIssue:{type:Boolean},convertIssueError:{type:Object},issuePermissions:{type:Object},issueRef:{type:Object},projectTemplates:{type:Array},selectedTemplate:{type:String},sendEmail:{type:Boolean}}}stateChanged(e){this.convertingIssue=o.F(e).convert.requesting,this.convertIssueError=o.F(e).convert.error,this.issueRef=o.R(e),this.issuePermissions=o.z(e),this.projectTemplates=c.u(e)}constructor(){super(),this.selectedTemplate="",this.sendEmail=!0}updated(e){e.has("convertingIssue")&&(this.convertingIssue||this.convertIssueError||this.close())}open(){this.reset();this.shadowRoot.querySelector("chops-dialog").open()}close(){this.shadowRoot.querySelector("chops-dialog").close()}reset(){this.shadowRoot.querySelector("#convertIssueForm").reset()}save(){const e=this.shadowRoot.querySelector("#commentContent");n.b.dispatch(o.f(this.issueRef,{templateName:this.selectedTemplate,commentContent:e.value,sendEmail:this.sendEmail}))}_sendEmailChecked(e){this.sendEmail=e.detail.checked}_templateInputChanged(){this.selectedTemplate=this.shadowRoot.querySelector("#templateInput").value}}customElements.define("mr-convert-issue",Ee);class Ne extends(Object(n.a)(a.a)){static get styles(){return[h.c,a.b`
        :host {
          display: block;
          font-size: var(--chops-main-font-size);
        }
        table {
          word-wrap: break-word;
          width: 100%;
        }
        tr {
          font-weight: normal;
          text-align: left;
          margin: 0 auto;
          padding: 2em 1em;
          height: 20px;
        }
        td {
          background: #f8f8f8;
          padding: 4px;
          padding-left: 8px;
          text-overflow: ellipsis;
        }
        th {
          text-decoration: none;
          margin-right: 0;
          padding-right: 0;
          padding-left: 8px;
          white-space: nowrap;
          background: #e3e9ff;
          text-align: left;
          border-right: 1px solid #fff;
          border-top: 1px solid #fff;
        }
        tr.dragged td {
          background: #eee;
        }
        h3.medium-heading {
          display: flex;
          justify-content: space-between;
          align-items: flex-end;
        }
        button {
          background: none;
          border: none;
          color: inherit;
          cursor: pointer;
          margin: 0;
          padding: 0;
        }
        i.material-icons {
          font-size: var(--chops-icon-font-size);
          color: var(--chops-primary-icon-color);
        }
        .draggable {
          cursor: grab;
        }
        .error {
          max-width: 100%;
          color: red;
          margin-bottom: 1em;
        }
      `]}render(){const e=(this.issuePermissions||[]).includes("editissue");return a.c`
      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      <chops-dialog closeOnOutsideClick>
        <h3 class="medium-heading">
          <span>Blocked on issues</span>
          <button aria-label="close" @click=${this.close}>
            <i class="material-icons">close</i>
          </button>
        </h3>
        ${this.error?a.c`
          <div class="error">${this.error}</div>
        `:""}
        <table><tbody>
          <tr>
            ${e?a.c`<th></th>`:""}
            ${this.columns.map(e=>a.c`
              <th>${e}</th>
            `)}
          </tr>

          ${this._renderedRows.map((t,s)=>a.c`
            <tr
              class=${s===this.srcIndex?"dragged":""}
              draggable=${e&&t.draggable}
              data-index=${s}
              @dragstart=${this._dragstart}
              @dragend=${this._dragend}
              @dragover=${this._dragover}
              @drop=${this._dragdrop}
            >
              ${e?a.c`
                <td>
                  ${e&&t.draggable?a.c`
                    <i class="material-icons draggable">drag_indicator</i>
                  `:""}
                </td>
              `:""}

              ${t.cells.map(e=>a.c`
                <td>
                  ${"issue"===e.type?a.c`
                    <mr-issue-link
                      .projectName=${this.issueRef.projectName}
                      .issue=${e.issue}
                    ></mr-issue-link>
                  `:""}
                  ${"text"===e.type?e.content:""}
                </td>
              `)}
            </tr>
          `)}
        </tbody></table>
      </chops-dialog>
    `}static get properties(){return{columns:{type:Array},error:{type:String},srcIndex:{type:Number},issueRef:{type:Object},issuePermissions:{type:Array},sortedBlockedOn:{type:Array},_renderedRows:{type:Array}}}stateChanged(e){this.issueRef=o.R(e),this.issuePermissions=o.z(e),this.sortedBlockedOn=o.H(e)}constructor(){super(),this.columns=["Issue","Summary"]}update(e){e.has("sortedBlockedOn")&&this.reset(),super.update(e)}updated(e){e.has("issueRef")&&this.close()}get _rows(){const e=this.sortedBlockedOn;return e?e.map(e=>{const t=!!e.statusRef&&!e.statusRef.meansOpen;let s=e.summary;e.extIdentifier&&(s=e.summary||"(not available)");return{draggable:!t&&!e.extIdentifier,cells:[{type:"issue",issue:e,isClosed:Boolean(t)},{type:"text",content:s}]}}):[]}async open(){await this.updateComplete,this.reset(),this.shadowRoot.querySelector("chops-dialog").open()}close(){this.shadowRoot.querySelector("chops-dialog").close()}reset(){this.error=null,this.srcIndex=null,this._renderedRows=this._rows.slice()}_dragstart(e){e.currentTarget.draggable&&(this.srcIndex=Number(e.currentTarget.dataset.index),e.dataTransfer.setDragImage(new Image,0,0))}_dragover(e){if(e.currentTarget.draggable&&null!==this.srcIndex){e.preventDefault();const t=Number(e.currentTarget.dataset.index);this._reorderRows(this.srcIndex,t),this.srcIndex=t}}_dragend(e){null!==this.srcIndex&&this.reset()}_dragdrop(e){if(e.currentTarget.draggable&&null!==this.srcIndex){const e=this._renderedRows[this.srcIndex];if(this.srcIndex>0){const t=this._renderedRows[this.srcIndex-1],s=!1;this._reorderBlockedOn(e,t,s)}else if(0===this.srcIndex&&this._renderedRows[1]&&this._renderedRows[1].draggable){const t=this._renderedRows[1],s=!0;this._reorderBlockedOn(e,t,s)}this.srcIndex=null}}_reorderBlockedOn(e,t,s){const i=e.cells[0].issue,r=t.cells[0].issue;u.a.call("monorail.Issues","RerankBlockedOnIssues",{issueRef:this.issueRef,movedRef:{projectName:i.projectName,localId:i.localId},targetRef:{projectName:r.projectName,localId:r.localId},splitAbove:s}).then(e=>{n.b.dispatch(o.g(this.issueRef))},e=>{this.reset(),this.error=e.description})}_reorderRows(e,t){this._renderedRows=e<=t?this._renderedRows.slice(0,e).concat(this._renderedRows.slice(e+1,t+1),[this._renderedRows[e]],this._renderedRows.slice(t+1)):this._renderedRows.slice(0,t).concat([this._renderedRows[e]],this._renderedRows.slice(t,e),this._renderedRows.slice(e+1))}}customElements.define("mr-related-issues",Ne);class Re extends(Object(n.a)(a.a)){constructor(){super()}static get properties(){return{userDisplayName:{type:String},prefs:{type:Object},prefsLoaded:{type:Boolean}}}static get styles(){return[h.c,a.b`
      :host {
        --chops-dialog-max-width: 800px;
      }
      h2 {
        margin-top: 0;
        display: flex;
        justify-content: space-between;
        font-weight: normal;
        border-bottom: 2px solid white;
        font-size: var(--chops-large-font-size);
        padding-bottom: 0.5em;
      }
      .edit-actions {
        width: 100%;
        margin: 0.5em 0;
        text-align: right;
      }
    `]}render(){return a.c`
      <chops-dialog
        id="privacyDialog"
        ?opened=${this._showPrivacyDialog}
        forced
      >
        <h2>Email display settings</h2>

        <p>There is a <a href="/hosting/settings">setting</a> to control how
        your email address appears on comments and issues that you post.</p>

        <p>Project members will always see your full email address.  By
        default, other users who visit the site will see an
        abbreviated version of your email address.</p>

        <p>If you do not wish your email address to be shared, there
        are other ways to <a
        href="http://www.chromium.org/getting-involved">get
        involved</a> in the community.  To report a problem when using
        the Chrome browser, you may use the "Report an issue..."  item
        on the "Help" menu.</p>


        <div class="edit-actions">
          <chops-button @click=${this.dismissPrivacyDialog}>
            Got it
          </chops-button>
        </div>
      </chops-dialog>

      <chops-dialog
        id="corpModeDialog"
        ?opened=${this._showCorpModeDialog}
        forced
      >
        <h2>This site hosts public issues in public projects</h2>

        <p>Unlike our internal issue tracker, this site makes most
        issues public, unless the issue is labeled with a Restrict-View-*
        label, such as Restrict-View-Google.</p>

        <p>Components are not used for permissions.  And, regardless of
        restriction labels, the issue reporter, owner,
        and Cc&apos;d users may always view the issue.</p>

        ${this.prefs.get("restrict_new_issues")?a.c`
          <p>Your account is a member of a user group that indicates that
          you may have access to confidential information.  To help prevent
          leaks when working in public projects, the issue tracker UX has
          been altered for you:</p>

          <ul>
            <li>When you open a new issue, the form will initially have a
            Restrict-View-Google label.  If you know that your issue does
            not contain confidential information, please remove the label.</li>
            <li>When you view public issues, a red banner is shown to remind
            you that any comments or attachments you post will be public.</li>
          </ul>
        `:""}

        <div class="edit-actions">
          <chops-button @click=${this.dismissCorpModeDialog}>
            Got it
          </chops-button>
        </div>
      </chops-dialog>
    `}stateChanged(e){this.prefs=l.j(e),this.prefsLoaded=l.b(e).prefsLoaded}get _showPrivacyDialog(){return!!this.userDisplayName&&(!!this.prefsLoaded&&(!!this.prefs&&!this.prefs.get("privacy_click_through")))}get _showCorpModeDialog(){return!window.CS_env.projectIsRestricted&&(!!this.userDisplayName&&(!!this.prefsLoaded&&(!!this.prefs&&(!!this.prefs.get("public_issue_notice")&&!this.prefs.get("corp_mode_click_through")))))}dismissPrivacyDialog(){this.dismissCue("privacy_click_through")}dismissCorpModeDialog(){this.dismissCue("corp_mode_click_through")}dismissCue(e){const t=[{name:e,value:"true"}];n.b.dispatch(l.o(t,!!this.userDisplayName))}}customElements.define("mr-click-throughs",Re);class De extends(Object(n.a)(a.a)){render(){return a.c`
      <style>
        mr-issue-page {
          --mr-issue-page-horizontal-padding: 12px;
          --mr-toggled-font-family: inherit;
          --monorail-metadata-toggled-bg: var(--monorail-metadata-open-bg);
        }
        mr-issue-page[issueClosed] {
          --monorail-metadata-toggled-bg: var(--monorail-metadata-closed-bg);
        }
        mr-issue-page[codeFont] {
          --mr-toggled-font-family: Monospace;
        }
        .container-issue {
          width: 100%;
          flex-direction: column;
          align-items: stretch;
          justify-content: flex-start;
          z-index: 200;
        }
        .container-issue-content {
          padding: 0;
          flex-grow: 1;
          display: flex;
          align-items: stretch;
          justify-content: space-between;
          flex-direction: row;
          flex-wrap: nowrap;
          box-sizing: border-box;
          padding-top: 0.5em;
        }
        .container-outside {
          box-sizing: border-box;
          width: 100%;
          max-width: 100%;
          margin: auto;
          padding: 0;
          display: flex;
          align-items: stretch;
          justify-content: space-between;
          flex-direction: row;
          flex-wrap: no-wrap;
        }
        .container-no-issue {
          padding: 0.5em 16px;
          font-size: var(--chops-large-font-size);
        }
        .metadata-container {
          font-size: var(--chops-main-font-size);
          background: var(--monorail-metadata-toggled-bg);
          border-right: var(--chops-normal-border);
          border-bottom: var(--chops-normal-border);
          width: 24em;
          min-width: 256px;
          flex-grow: 0;
          flex-shrink: 0;
          box-sizing: border-box;
          z-index: 100;
        }
        .issue-header-container {
          z-index: 10;
          position: sticky;
          top: var(--monorail-header-height);
          margin-bottom: 0.25em;
          width: 100%;
        }
        mr-issue-details {
          min-width: 50%;
          max-width: 1000px;
          flex-grow: 1;
          box-sizing: border-box;
          min-height: 100%;
          padding-left: var(--mr-issue-page-horizontal-padding);
          padding-right: var(--mr-issue-page-horizontal-padding);
        }
        mr-issue-metadata {
          position: sticky;
          overflow-y: auto;
          top: var(--monorail-header-height);
          height: calc(100vh - var(--monorail-header-height));
        }
        mr-launch-overview {
          border-left: var(--chops-normal-border);
          padding-left: var(--mr-issue-page-horizontal-padding);
          padding-right: var(--mr-issue-page-horizontal-padding);
          flex-grow: 0;
          flex-shrink: 0;
          width: 50%;
          box-sizing: border-box;
          min-height: 100%;
        }
        @media (max-width: 1126px) {
          .container-issue-content {
            flex-direction: column;
            padding: 0 var(--mr-issue-page-horizontal-padding);
          }
          mr-issue-details, mr-launch-overview {
            width: 100%;
            padding: 0;
            border: 0;
          }
        }
        @media (max-width: 840px) {
          .container-outside {
            flex-direction: column;
          }
          .metadata-container {
            width: 100%;
            height: auto;
            border: 0;
            border-bottom: var(--chops-normal-border);
          }
          mr-issue-metadata {
            min-width: auto;
            max-width: auto;
            width: 100%;
            padding: 0;
            min-height: 0;
            border: 0;
          }
          mr-issue-metadata, .issue-header-container {
            position: static;
          }
        }
      </style>
      <mr-click-throughs
         .userDisplayName=${this.userDisplayName}></mr-click-throughs>
      ${this._renderIssue()}
    `}_renderIssue(){const e=!this.issue||!this.issue.localId,t=this.issue.movedToRef,s=this.issue.approvalValues?5:100;return this.fetchIssueError?a.c`
        <div class="container-no-issue" id="fetch-error">
          ${this.fetchIssueError.description}
        </div>
      `:this.fetchingIssue&&e?a.c`
        <div class="container-no-issue" id="loading">
          Loading...
        </div>
      `:this.issue.isDeleted?a.c`
        <div class="container-no-issue" id="deleted">
          <p>Issue ${this.issueRef.localId} has been deleted.</p>
          ${this.issuePermissions.includes("deleteissue")?a.c`
            <chops-button
              @click=${this._undeleteIssue}
              class="undelete emphasized"
            >
              Undelete Issue
            </chops-button>
          `:""}
        </div>
      `:t&&t.localId?a.c`
        <div class="container-no-issue" id="moved">
          <h2>Issue has moved.</h2>
          <p>
            This issue was moved to ${t.projectName}.
            <a
              class="new-location"
              href="/p/${t.projectName}/issues/detail?id=${t.localId}"
            >
              Go to issue</a>.
          </p>
        </div>
      `:e?"":a.c`
        <div
          class="container-outside"
          @open-dialog=${this._openDialog}
          id="issue"
        >
          <aside class="metadata-container">
            <mr-issue-metadata></mr-issue-metadata>
          </aside>
          <div class="container-issue">
            <div class="issue-header-container">
              <mr-issue-header
                .userDisplayName=${this.userDisplayName}
              ></mr-issue-header>
              <mr-restriction-indicator></mr-restriction-indicator>
            </div>
            <div class="container-issue-content">
              <mr-issue-details
                class="main-item"
                .commentsShownCount=${s}
              ></mr-issue-details>
              <mr-launch-overview class="main-item"></mr-launch-overview>
            </div>
          </div>
        </div>
        <mr-edit-description id="edit-description"></mr-edit-description>
        <mr-move-copy-issue id="move-copy-issue"></mr-move-copy-issue>
        <mr-convert-issue id="convert-issue"></mr-convert-issue>
        <mr-related-issues id="reorder-related-issues"></mr-related-issues>
        <mr-update-issue-hotlists-dialog
          id="update-issue-hotlists"
          .issueRefs=${[this.issueRef]}
          .issueHotlists=${this.issueHotlists}
        ></mr-update-issue-hotlists-dialog>
      `}static get properties(){return{userDisplayName:{type:String},fetchIssueError:{type:String},fetchingIssue:{type:Boolean},fetchingProjectConfig:{type:Boolean},issue:{type:Object},issueHotlists:{type:Array},issueClosed:{type:Boolean,reflect:!0},codeFont:{type:Boolean,reflect:!0},issuePermissions:{type:Object},issueRef:{type:Object},prefs:{type:Object},loginUrl:{type:String}}}constructor(){super(),this.issue={},this.issueRef={},this.issuePermissions=[],this.prefs={},this.codeFont=!1}createRenderRoot(){return this}stateChanged(e){this.projectName=c.t(e),this.issue=o.Q(e),this.issueHotlists=o.q(e),this.issueRef=o.R(e),this.fetchIssueError=o.F(e).fetch.error,this.fetchingIssue=o.F(e).fetch.requesting,this.fetchingProjectConfig=c.g(e),this.issueClosed=!o.r(e),this.issuePermissions=o.z(e),this.prefs=l.j(e)}update(e){e.has("prefs")&&(this.codeFont=!!this.prefs.get("code_font")),e.has("fetchIssueError")&&!this.userDisplayName&&this.fetchIssueError&&"PERMISSION_DENIED"===this.fetchIssueError.codeName&&r()(this.loginUrl),super.update(e)}updated(e){if(e.has("issueRef")||e.has("issue")){const e=this._pageTitle(this.issueRef,this.issue);n.b.dispatch(ne.l(e))}}_pageTitle(e,t){const s=[];return e.localId&&s.push(e.localId),t&&t.localId?t.isDeleted?s.push("Deleted issue"):t.summary&&s.push(t.summary):s.push("Loading issue..."),s.join(" - ")}_openDialog(e){this.querySelector("#"+e.detail.dialogId).open(e)}_undeleteIssue(){u.a.call("monorail.Issues","DeleteIssue",{issueRef:this.issueRef,delete:!1}).then(()=>{n.b.dispatch(o.k(this.issueRef))})}}customElements.define("mr-issue-page",De)}}]);
//# sourceMappingURL=mr-issue-page.8bae7b2a181c25231d3b.min.js.map