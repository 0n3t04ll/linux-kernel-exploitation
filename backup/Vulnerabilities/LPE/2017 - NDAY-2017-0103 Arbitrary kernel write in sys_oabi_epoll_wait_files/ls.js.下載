
(function() {
    imt.const = {
        //cookie_name: 'imt',
        messages_re: /^imt-([\w_-]+)(\((.*?)\))?$/,
        messages: {
            lsget: 'lsget',
            lsset: 'lsset'
        }
    };

    // Listen for posted messages
    var message_handlers = {};
    message_handlers[imt.const.messages.lsget] = function(key) {
        postMessageToParent('lsget-result', {'key': key, 'value': getData(key)});
    };
    message_handlers[imt.const.messages.lsset] = function(data) {
        if ('key' in data && 'value' in data) {
            setData(data['key'], data['value']);
            postMessageToParent('lsset-result');
        }
    };

    function receiveMessage(event) {
        var origin_domain = event.origin.match(/:\/\/(.*?)(:|$)/)[1];
        if (!isLinkedDomain(origin_domain)) {
            return;
        }

        //logger.debug('receiveMessage (event)', event);
        if (event.data && typeof event.data === 'string') {
            try {
                var msg_parse = event.data.match(imt.const.messages_re);
                if (msg_parse) {
                    var msg = msg_parse[1];
                    var data = msg_parse[3];
                    //logger.debug('receiveMessage (raw)', msg, data);
                    if (data) {
                        data = JSON.parse(data);
                    }
                    //logger.debug('receiveMessage (parsed)', msg, data);
                    if (msg in message_handlers) {
                        message_handlers[msg](data);
                    }
                }
            }
            catch (e) {
                //logger.error('Error parsing received message', e);
            }
        }
    }

    if (typeof window.addEventListener !== 'undefined') {
        window.addEventListener('message', receiveMessage, false);
    }
    else {
        window.attachEvent('onmessage', receiveMessage);
    }

    function getData(key) {
        if (isLocalStorageAvailable()) {
            try {
                return JSON.parse(localStorage.getItem(key) || 'null');
            }
            catch (e) {}
        }

        return null;
    }

    function setData(key, value) {
        if (isLocalStorageAvailable()) {
            localStorage.setItem(key, JSON.stringify(value));
        }
    }

    function isLinkedDomain(domain) {
        //logger.info('Checking linked domain for ' + domain);
        domain = domain.toLowerCase();

        // Remove port if present
        if (domain.indexOf(':') >= 0) {
            domain = domain.substr(0, domain.indexOf(':'));
        }

        // if cookie domain is auto and passed domain matches auto cookie domain
        if (imt.settings.cookie_domain === 'auto' && (domain === window.location.hostname.toLowerCase() || domain.endsWith('.' + window.location.hostname.toLowerCase()))) {
            //logger.info('Linked domain match on auto cookie domain');
            return true;
        }

        // or linked domain list contains the given domain
        if (Array.isArray(imt.settings.linked_domains)) {
            for (var i = 0; i < imt.settings.linked_domains.length; ++i) {
                var d = imt.settings.linked_domains[i].toLowerCase();
                if (d === domain) {
                    //logger.info('Linked domain exact match in config');
                    return true;
                }
                if (d.startsWith('*') && domain.endsWith(d.substring(1))) {
                    //logger.info('Linked domain wildcard match in config');
                    return true;
                }
            }
        }

        return false;
    }

    function postMessageToParentRaw(message) {
        if (inFrame()) {
            //logger.debug('Posting message to parent: ' + message);
            try {
                if (typeof window.parent.postMessage !== 'undefined') {
                    window.parent.postMessage(message, '*');
                }
            }
            catch (e) {
                //logger.error('Error posting message to parent', e);
            }
        }
    }

    function postMessageToParent(message, data) {
        var message = 'imt-' + message;
        var data = data || null;
        if (data) {
            message = message + '(' + JSON.stringify(data) + ')';
        }
        postMessageToParentRaw(message);
    }

    function isLocalStorageAvailable() {
        try {
            localStorage.setItem('ls_test', '1');
            if (localStorage.getItem('ls_test') === '1') {
                localStorage.removeItem('ls_test');
                return true;
            }
        }
        catch(e) {}

        return false;
    }

    function inFrame() {
        try {
            return window !== window.top;
        }
        catch(e) {
            return true;
        }
    }
})();
