From: <Saved by Blink>
Snapshot-Content-Location: https://saaramar.github.io/memory_safety_blogpost_2022/
Subject: Survey of security mitigations and architectures, December 2022 | memory_safety_blogpost_2022
Date: Thu, 18 May 2023 15:37:35 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--wjIHSQZCJmHgwf21IKTve3eTQB1OPTtbiORbabUjXQ----"


------MultipartBoundary--wjIHSQZCJmHgwf21IKTve3eTQB1OPTtbiORbabUjXQ----
Content-Type: text/html
Content-ID: <frame-644358D8E1498552834679F2E9B08F7F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://saaramar.github.io/memory_safety_blogpost_2022/

<!DOCTYPE html><html lang=3D"en-US"><head><meta http-equiv=3D"Content-Type"=
 content=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"te=
xt/css" href=3D"cid:css-da242d00-b111-4cfb-94a5-4cb51c5518cd@mhtml.blink" /=
><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-5d70fe1c-fa51-4=
85f-93dc-ec7a2186a898@mhtml.blink" />
   =20
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1">

<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Survey of security mitigations and architectures, December 2022 | me=
mory_safety_blogpost_2022</title>
<meta name=3D"generator" content=3D"Jekyll v3.9.2">
<meta property=3D"og:title" content=3D"Survey of security mitigations and a=
rchitectures, December 2022">
<meta property=3D"og:locale" content=3D"en_US">
<link rel=3D"canonical" href=3D"https://saaramar.github.io/memory_safety_bl=
ogpost_2022/">
<meta property=3D"og:url" content=3D"https://saaramar.github.io/memory_safe=
ty_blogpost_2022/">
<meta property=3D"og:site_name" content=3D"memory_safety_blogpost_2022">
<meta property=3D"og:type" content=3D"website">
<meta name=3D"twitter:card" content=3D"summary">
<meta property=3D"twitter:title" content=3D"Survey of security mitigations =
and architectures, December 2022">

<!-- End Jekyll SEO tag -->

    <link rel=3D"stylesheet" href=3D"https://saaramar.github.io/memory_safe=
ty_blogpost_2022/assets/css/style.css?v=3D4faa13cab2e817edbdaf73ade3ecb64ad=
d45344b">
    <!-- start custom head snippets, customize with your own _includes/head=
-custom.html file -->

<!-- Setup Google Analytics -->



<!-- You can set your favicon here -->
<!-- link rel=3D"shortcut icon" type=3D"image/x-icon" href=3D"/memory_safet=
y_blogpost_2022/favicon.ico" -->

<!-- end custom head snippets -->

  </head>
  <body>
    <div class=3D"container-lg px-3 my-5 markdown-body">
     =20
      <h1><a href=3D"https://saaramar.github.io/memory_safety_blogpost_2022=
/">memory_safety_blogpost_2022</a></h1>
     =20

      <h1 id=3D"survey-of-security-mitigations-and-architectures-december-2=
022">Survey of security mitigations and architectures, December 2022</h1>

<h2 id=3D"intro">Intro<a class=3D"anchorjs-link " href=3D"https://saaramar.=
github.io/memory_safety_blogpost_2022/#intro" aria-label=3D"Anchor" data-an=
chorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-le=
ft: 0.375em;"></a></h2>

<p>This blogpost summarizes and compares some of the exciting approaches in=
 our journey to memory safety. I hope this could become a reference to inte=
rested readers and colleagues.</p>

<p>Along this blogpost I=E2=80=99ll consider five security properties: spat=
ial safety, temporal safety, type safety, definite initialization and concu=
rrency safety. Instead of repeating stuff we all have said in the past, I t=
hink I can simply copy-paste the following text from (the amazing!) SEAR=E2=
=80=99s <a href=3D"https://security.apple.com/blog/towards-the-next-generat=
ion-of-xnu-memory-safety/">kalloc_type blogpost</a>, which puts it as follo=
ws:</p>

<p>=E2=80=9C<em>Memory safety is a relatively well-understood problem space=
. The rest of this post assumes a familiarity with the taxonomy of memory s=
afety:</em></p>

<ul>
  <li><em><strong>Temporal safety</strong> means that all memory accesses t=
o an object occur during the lifetime of that object=E2=80=99s allocation, =
between when the object=E2=80=99s memory is allocated and when it is freed.=
 An access to the object outside of this window is unsafe and called a Use-=
After-Free (UAF); double-free violations are a particular variant of UAF.</=
em></li>
  <li><em><strong>Spatial safety</strong> notes that a memory allocation ha=
s a particular size, and it=E2=80=99s incorrect to access any memory outsid=
e of the intended bounds of the allocation. Violations of this property are=
 called Out-of-Bounds (OOB) accesses.</em></li>
  <li><em><strong>Type safety</strong> means that when a memory allocation =
represents a particular object with specific rules about how the object can=
 be used, those rules can=E2=80=99t unexpectedly change =E2=80=94 in other =
words, that the allocation is typed. Violations of this property are called=
 type confusions.</em></li>
  <li><em><strong>Definite initialization</strong> denotes that a program i=
s responsible for properly initializing newly allocated memory before using=
 it, as the allocation might otherwise contain unexpected data. Violations =
of this property often lead to issues called information disclosures, but c=
an sometimes lead to more serious memory safety issues, such as type confus=
ions or UAFs.</em></li>
  <li><em><strong>Thread safety</strong> is concerned with how modern softw=
are concurrently accesses memory. If concurrent accesses to an allocation a=
ren=E2=80=99t properly synchronized, then the objects contained in the allo=
cation might reach an incorrect state and break their invariants. Violation=
s of this property are typically called data races.</em>=E2=80=9D</li>
</ul>

<p>I=E2=80=99ll detail some of the industry=E2=80=99s most interesting appr=
oaches/suggestions and discuss how they address these properties. I will co=
mpare some of the approaches and add references to already-published resear=
ch on each one to help interested readers follow up as they like.</p>

<h3 id=3D"the-right-kind-of-mitigations">The right kind of mitigations<a cl=
ass=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_safety_blo=
gpost_2022/#the-right-kind-of-mitigations" aria-label=3D"Anchor" data-ancho=
rjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left:=
 0.375em;"></a></h3>

<p>As I wrote in many of my blogposts and said in many presentations - I be=
lieve the <strong>right kind of mitigations targets the 1st order primitive=
</strong>; the root cause of the bug. This is important because of how most=
 exploits look like. As also explicitly mentioned in the kalloc_type blogpo=
st, attackers use a 1st order primitive in order to corrupt some target str=
ucture and expand the set of primitives they have. The more we let the expl=
oit progress, the more primitives attackers have. Targeting late stages in =
the exploit process has very low ROI, since at late stages of the exploit, =
attackers already gain so many primitives that let them have a lot of freed=
om to bypass the mitigations.</p>

<p>An excellent example of that is CFI. We see so many bypasses to all form=
s of CFI. This is precisely why: when attackers face CFI, they usually have=
 arbitrary read/write. While certain forms of CFI will make bypasses more c=
omplicated, there are generally several generic ways to bypass them. And wh=
en an attacker armed with arbitrary read/write faces these mechanisms, it a=
lways ends with a game over.</p>

<p>Therefore, this blogpost will focus on approaches that follow these line=
s: solutions that target 1st order primitives rather than specific exploita=
tion techniques.</p>

<p>The blogpost is divided into three main sections:</p>

<ul>
  <li><u>Hardware solutions</u>: CHERI (Morello, CheriIoT), MTE</li>
  <li><u>Software mitigations</u>: kalloc_type+dataPAC, AUTOSLAB, Firebloom=
, GuardedMemcpy, CastGuard, attack surface reduction</li>
  <li><u>Safe programming languages</u>: Rust, Swift</li>
</ul>

<h2 id=3D"hardware-solutions">Hardware solutions<a class=3D"anchorjs-link "=
 href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#hardware-s=
olutions" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"f=
ont: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>

<p>I believe CHERI and MTE are highly documented and common knowledge stuff=
 at this point. However, I absolutely can=E2=80=99t avoid mentioning both o=
f these powerful hardware features in a blogpost about different possibilit=
ies for the future of memory safety.</p>

<h3 id=3D"cheri">CHERI<a class=3D"anchorjs-link " href=3D"https://saaramar.=
github.io/memory_safety_blogpost_2022/#cheri" aria-label=3D"Anchor" data-an=
chorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-le=
ft: 0.375em;"></a></h3>

<p>I=E2=80=99ve talked a lot about CHERI in the past three years. The TL;DR=
 is that CHERI-ISA introduces a new entity to represent references to memor=
y instead of pointers: <strong>capabilities</strong>. Capabilities are <str=
ong>bounded, unforgable references to memory</strong>. Here are some of the=
 published security research on CHERI I had the honor to be a part of:</p>

<ul>
  <li>MSRC paper: <a href=3D"https://twitter.com/AmarSaar/status/1315670840=
005066752">tweet</a>, <a href=3D"https://github.com/microsoft/MSRC-Security=
-Research/blob/master/papers/2020/Security%20analysis%20of%20CHERI%20ISA.pd=
f">paper</a></li>
  <li>MSRC BlackHat USA 2021 talk: <a href=3D"https://twitter.com/amarsaar/=
status/1422978314059362304">tweet</a>, <a href=3D"https://github.com/micros=
oft/MSRC-Security-Research/blob/master/presentations/2021_08_BlackHatUSA/BH=
USA21_Security_Analysis_of_CHERI_ISA.pdf">slides</a></li>
  <li>MSR and MSRC Morello=E2=80=99s blogpost: <a href=3D"https://twitter.c=
om/amarsaar/status/1484119286713040899?lang=3Den">tweet</a>, <a href=3D"htt=
ps://msrc-blog.microsoft.com/2022/01/20/an_armful_of_cheris/">blogpost</a><=
/li>
  <li>MSR, MSRC and Azure Silicon blogpost on =E2=80=9Csmallest CHERI=E2=80=
=9D: <a href=3D"https://twitter.com/AmarSaar/status/1567098543755722752">tw=
eet</a>, <a href=3D"https://msrc-blog.microsoft.com/2022/09/06/whats-the-sm=
allest-variety-of-cheri/">blogpost</a>, which I=E2=80=99m very excited abou=
t in the context of the IoT/small devices space.</li>
</ul>

<p>While CHERI has high adoption cost (entirely new ISA, more buses, tags m=
anagement, requires a rebuild, etc.), it creates a huge security value:</p>

<ul>
  <li>Bounds are checked architecturally; therefore, <strong>spatial safety=
 bugs are deterministically mitigated at the architectural level</strong>.<=
/li>
  <li>The ISA gives us the ability to distinguish between pointers and inte=
gers while mark capabilities as valid/invalid, which means it is <strong>ar=
chitecturally impossible to fake/forge/corrupt/modify pointers</strong>, at=
 all.</li>
  <li>The ISA creates great basic blocks for software mitigations, such as =
<strong>revocation</strong> - which <strong>deterministically kills UAFs</s=
trong>.</li>
</ul>

<p>A huge value of CHERI (in addition to the deterministic mitigations for =
memory safety) is <strong>compartmentalization</strong>. CHERI could change=
 the way we build isolation models completely. With CHERI, we should be abl=
e to build isolation with stronger security properties and better perf.</p>

<h3 id=3D"mte">MTE<a class=3D"anchorjs-link " href=3D"https://saaramar.gith=
ub.io/memory_safety_blogpost_2022/#mte" aria-label=3D"Anchor" data-anchorjs=
-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.=
375em;"></a></h3>

<p>There has been much research, blogs, papers, and presentations about ARM=
 MTE. And again, I don=E2=80=99t want to repeat highly documented materials=
. I highly encourage you to check out my BlueHatIL talk =E2=80=9C<a href=3D=
"https://github.com/saaramar/security_analysis_mte/blob/main/Security%20Ana=
lysis%20of%20MTE%20Through%20Examples.pdf">Security Analysis of MTE Through=
 Examples</a>=E2=80=9D. This talk covers everything about MTE - how it work=
s, modes, examples, applications, security values, and potential bypasses/c=
oncerns. And of course, it has a fun demo.</p>

<p>The TL;DR is that MTE introduces a new type of memory to the ARM archite=
cture (=E2=80=9CNormal Tagged Memory=E2=80=9D), which allows us to set a ta=
g for every 0x10 bytes of continuous physical memory. Each tag is 4 bits; t=
herefore, we have 16 possibilities for tags. In addition, every pointer (i.=
e. VA) that points to a virtual address mapped with this new type of memory=
 has to be a =E2=80=9Ctagged pointer=E2=80=9D - which means we encode some =
information in the unused bits of the pointer itself. In the case of MTE, w=
e simply set the tag in the MSB (bits 59-56).</p>

<p>Now, every time you dereference a VA which is mapped using this new type=
 of memory (every time you do load/store), the CPU will compare both of the=
se tags - the tag value from the MSB of the pointer and the allocation tag =
from the underlying physical memory. If they are different, the CPU will ra=
ise an exception (in the case of synchronous exceptions. Again, check out m=
y talk :)).</p>

<p>There is a lot of published security research you can check out:</p>

<ul>
  <li>Google=E2=80=99s paper: <a href=3D"https://storage.googleapis.com/pub=
-tools-public-publication-data/pdf/f64a0999e325841481794001ac91fcc528c01960=
.pdf">paper</a></li>
  <li>Android=E2=80=99s memory safety docs: <a href=3D"https://source.andro=
id.com/docs/security/test/memory-safety/arm-mte">Arm Memory Tagging Extensi=
on</a></li>
  <li>Adopting ARM MTE in Android: <a href=3D"https://twitter.com/kayseesee=
/status/1157803186444525575">tweet</a>, <a href=3D"https://security.googleb=
log.com/2019/08/adopting-arm-memory-tagging-extension.html">blogpost</a></l=
i>
  <li>MSRC paper: <a href=3D"https://twitter.com/epakskape/status/123561125=
9292119041?lang=3Den">tweet</a>, <a href=3D"https://github.com/microsoft/MS=
RC-Security-Research/blob/master/papers/2020/Security%20analysis%20of%20mem=
ory%20tagging.pdf">paper</a></li>
  <li>MSRC BlueHatIL 2022 talk: <a href=3D"https://twitter.com/amarsaar/sta=
tus/1499154826806104067?lang=3Den">tweet</a>, <a href=3D"https://github.com=
/saaramar/security_analysis_mte/blob/main/Security%20Analysis%20of%20MTE%20=
Through%20Examples.pdf">slides</a>, <a href=3D"https://github.com/saaramar/=
security_analysis_mte">repo</a></li>
</ul>

<p>As I presented in my talk, the thing about MTE is that if you use it pro=
perly, i.e.:</p>

<ul>
  <li>use synchronous exceptions (=E2=80=9Cprecise-mode=E2=80=9D), which me=
ans the faulted instruction cannot retire and cause damage</li>
  <li>re-tag allocations on free</li>
</ul>

<p>you get <strong>probabilistic mitigations for all the major memory safet=
y bug-classes: spatial and temporal safety</strong>.</p>

<p><u>Note</u>: If you enforce the property of adjacent allocations having =
different tags, you actually have a <strong>deterministic mitigation</stron=
g> for <strong>strictly</strong> linear overflows. However, it might requir=
e special attention. For example: you always have to maintain the property =
of adjacent allocations having different tags. If you retag on free, you co=
uld solve this by adding locking (which hurts perf), or modifying the alloc=
ator to guarantee you never free adjacent allocations from different thread=
s. Either way, you must have this in mind.</p>

<p>While MTE clearly introduces lower security value than CHERI, it has a g=
reat advantage: it has <strong>nearly 100% compatibility with existing code=
</strong>. It doesn=E2=80=99t even require a rebuild. Of course, you need t=
o add all the support to your MM, allocators, etc., but all the rest could =
just remain as is.</p>

<p>While MTE has a probabilistic approach, unlike the deterministic approac=
h CHERI has, the security value is still very high. Making about 2/3 of all=
 the memory safety 1st order primitives crash with very high probability is=
 fantastic. The main concern is that you can bypass MTE by leaking tags: un=
like the physical tags, which are unaddressable, the tag values in all the =
tagged pointers are obviously writeable.</p>

<p>Now, there are a few special cases/exceptions to keep in mind. Because t=
his blogpost is quite long, I=E2=80=99ll focus only on the software side of=
 MTE and CHERI, and I=E2=80=99ll put aside ISA designing. Let=E2=80=99s sta=
rt:</p>

<h3 id=3D"special-case-1-copying-overlap">Special case #1: Copying overlap<=
a class=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_safety=
_blogpost_2022/#special-case-1-copying-overlap" aria-label=3D"Anchor" data-=
anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-=
left: 0.375em;"></a></h3>

<p>There is something important to keep in mind for the deterministic mitig=
ation for strictly linear overflows. Because there is a lot of confusion ar=
ound <em>memcpy</em>/<em>memmove</em>, some OSes actually unified both of t=
hese functions to one implementation. The implementation checks for overlap=
 between <em>src</em> and <em>dst</em> w.r.t <em>length</em>: if <code clas=
s=3D"language-plaintext highlighter-rouge">src + length &gt; dst</code>. If=
 there is an overlap, the function would actually copy the content backward=
. This is highly important, otherwise, you could corrupt content you didn=
=E2=80=99t copy yet.</p>

<p>Now, this creates an interesting behavior - <strong>the deterministic mi=
tigation becomes probabilistic</strong>. Because the first byte you corrupt=
 does not necessarily have a different tag (it=E2=80=99s not adjacent). The=
refore, if one aims for a truly deterministic mitigation, they have to keep=
 this in mind and take action. One simple way to address this is to manuall=
y check the tags in an increasing order.</p>

<h3 id=3D"special-case-2-intra-object-corruption">Special case #2: Intra-ob=
ject corruption<a class=3D"anchorjs-link " href=3D"https://saaramar.github.=
io/memory_safety_blogpost_2022/#special-case-2-intra-object-corruption" ari=
a-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 =
anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Something important I mentioned in my BlueHatIL 2022 talk about MTE (see=
 the link above) is the case of intra-object corruption. This is the case o=
f having an OOB inside an allocation. For example, consider the case of hav=
ing a fixed-size buffer inside a structure, and having OOB from this buffer=
 forward/backward. If you make sure your OOB remains inside the allocation =
and outside the buffer (well, it has to be outside the buffer, otherwise it=
=E2=80=99s not OOB), <strong>MTE has no way of mitigating this</strong>; al=
l memory lines inside an allocation must have the same tag. In my MTE slide=
s I mention some real-world examples for this sub-bug-class.</p>

<p>The reason I=E2=80=99m singling out MTE but not CHERI, is because <stron=
g>CHERI actually has a way to address intra-object corruptions</strong>, us=
ing an LLVM flag. This is covered in the <em>cheri-exercises</em> repo, und=
er <a href=3D"https://github.com/CTSRD-CHERI/cheri-exercises/tree/master/sr=
c/exercises/subobject-bounds">subobject-bounds</a>. One tiny exception is t=
hat this cannot be done for the first field in the structure, because it vi=
olates the C spec.</p>

<p>An amazing example (which I mentioned in my talk) is the famous <a href=
=3D"https://googleprojectzero.blogspot.com/2021/12/this-shouldnt-have-happe=
ned.html">great find</a> by Tavis Ormandy in NSS. A straightforward trivial=
 buffer overflow, intra-object corruption, with attacker-control length and=
 content (yes, it couldn=E2=80=99t get any better than that). MTE won=E2=80=
=99t impact this bug, while CHERI will mitigate it with the subobject-bound=
s.</p>

<p><u>Note</u>: For people who know they never want to cast from the elemen=
t at offset 0 back to the structure, we could implement it for the first el=
ement and have it working perfectly, deterministically.</p>

<h3 id=3D"special-case-3-cpu-side-channels">Special case #3: CPU side chann=
els<a class=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_sa=
fety_blogpost_2022/#special-case-3-cpu-side-channels" aria-label=3D"Anchor"=
 data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pa=
dding-left: 0.375em;"></a></h3>

<p>We have seen so many CPU side channels in the past five years. Lots are =
speculative execution and time-based, but it doesn=E2=80=99t have to be. Fo=
r example, we have seen the <a href=3D"https://www.hertzbleed.com/">Hertzbl=
eed</a> attack, a family of frequency side channel attacks. These speculati=
ve execution variants just keep coming.</p>

<p>These bugs really concern me (which may lead to true stories such as <a =
href=3D"https://infosec.exchange/@amarsaar/109585943010564657">this one</a>=
). They are a nightmare for security models that rely on secrets. A few gre=
at examples:</p>

<ul>
  <li>Stephen=E2=80=99s amazing research on the Chrome sandbox: <a href=3D"=
https://twitter.com/_tsuro/status/1251132424299450368">tweet</a>, <a href=
=3D"https://googleprojectzero.blogspot.com/2020/02/escaping-chrome-sandbox-=
with-ridl.html">blogpost</a>.</li>
  <li>The <a href=3D"https://pacmanattack.com/">PACMAN</a> attack on M1.</l=
i>
</ul>

<p>Before we build mitigations (especially in hardware!), it=E2=80=99s very=
 important to attack them from every possible angle and try to break them. =
There are no silver bullet mitigations, but it=E2=80=99s very important to =
be aware of all the gaps, bypasses, and exceptions and how they play along =
with the threat models we have in mind. For CHERI and MTE, it means the fol=
lowing:</p>

<ul>
  <li>
    <p><u>MTE</u>: While the allocation tags in the underlying physical mem=
ory are unaddressable, all the tags=E2=80=99 values in pointers (which we s=
tore in the MSB of all the tagged pointers) are obviously writeable. The on=
ly thing that stops us from corrupting them is the lack of knowledge of the=
 actual tags. However, if we could leak these tags, we could corrupt these =
pointers and bypass MTE (see my <a href=3D"https://github.com/saaramar/secu=
rity_analysis_mte/blob/main/Security%20Analysis%20of%20MTE%20Through%20Exam=
ples.pdf">BlueHatIL talk</a> about it).</p>

    <p>Now, we can=E2=80=99t build information disclosure primitives on top=
 of OOB/UAF, since those will be probabilistically mitigated. However - wha=
t about other ways of information disclosure, such as CPU side channels?</p=
>

    <p>Consider the classic example of speculation: if you can read an addr=
ess with a guess of the tag value in speculation then you will either trap =
in speculation or read the value. This is likely to produce a timing side c=
hannel that can be used to probe MTE values, just as attempting to read an =
address in speculation can be used to probe whether there is a valid mappin=
g at that address.</p>

    <p>And this gets very concerning when we consider local attacks: JS, us=
er-&gt;kernel LPEs, etc..</p>
  </li>
  <li>
    <p><u>CHERI</u>: Unlike MTE, CHERI capabilities do not rely on secrets.=
 This means that you can disclose all of the fields of a capability without=
 allowing an identical capability to be fabricated (you can=E2=80=99t forge=
 pointers). It=E2=80=99s not a matter of secrets; it=E2=80=99s a matter of =
unaddressable tags testifying =E2=80=9CHey! This capability is invalid! Fau=
lt! Now!=E2=80=9D.</p>

    <p>The key point is that guarded manipulation means that capabilities c=
an flow only through valid paths (principle of intentionality) and side cha=
nnels can therefore not be used to leak the capabilities themselves, only t=
o leak their <strong>values</strong> (which are explicitly public and can b=
e read through architectural means as well).</p>

    <p>CPU side channels are useful to leak secrets, but they won=E2=80=99t=
 impact capabilities and the memory safety properties they introduce.</p>
  </li>
</ul>

<h3 id=3D"definite-initialization">Definite initialization<a class=3D"ancho=
rjs-link " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#=
definite-initialization" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=
=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h=
3>

<p>Neither CHERI nor MTE have any impact on initialization. And this is ver=
y important because use of uninitialized memory has a concerning powerful i=
mpact on bypasses:</p>

<ul>
  <li>
    <p><u>MTE</u>: Again, since attackers can corrupt/fake pointers freely =
with MTE (as long as they know the tag), information disclosure primitives =
are a very troubling concern for bypasses (again, see my BlueHatIL talk abo=
ut it). Besides speculative execution and CPU side channels, we need to mak=
e sure attackers won=E2=80=99t be able to leak tagged pointers via uninitia=
lized memory.</p>
  </li>
  <li>
    <p><u>CHERI</u>: attackers cannot corrupt/fake pointers with CHERI. Unl=
ike MTE, <strong>this property does not rely on secrets</strong> - the arch=
itecture itself marks valid capabilities in the unaddressable tags. Therefo=
re, any kind of information disclosure (memory or side chnanels based) won=
=E2=80=99t let attackers corrupt/fake pointers.</p>

    <p>However, you can still use tag-preserving gadgets and move existing =
capabilities from one place to another, without modifying them. You can sti=
ll use valid capabilities in uninitialized memory, trigger type confusions =
etc..</p>
  </li>
</ul>

<p>The good news is that most of the big companies already have auto initia=
lization features in place, and many compilers support that. Because I see =
uninitialized memory as a significant concern on the CHERI/MTE threat model=
s, I assume we have that in place. And I feel good about that assumption be=
cause all the big companies pulled off auto initialization to some level. T=
herefore, I=E2=80=99ll consider both CHERI and MTE as =E2=80=9C+ auto-init=
=E2=80=9D from now on.</p>

<p><u>Note</u>: I highly recommend checking out the following fantastic pub=
lications:</p>

<ul>
  <li>=E2=80=9CZero-initialize objects of automatic storage duration=E2=80=
=9D, by JF Bastien about auto initialization (<a href=3D"https://twitter.co=
m/jfbastien/status/1592578174763745280">tweet</a>, <a href=3D"https://www.o=
pen-std.org/jtc1/sc22/wg21/docs/papers/2022/p2723r0.html">doc</a>)</li>
  <li>=E2=80=9CSolving Uninitialized Stack Memory on Windows=E2=80=9D, by J=
oe Bialek (<a href=3D"https://twitter.com/josephbialek/status/1260616644721=
696769">tweet</a>, <a href=3D"https://msrc-blog.microsoft.com/2020/05/13/so=
lving-uninitialized-stack-memory-on-windows/">blogpost</a>)</li>
  <li>=E2=80=9CSolving Uninitialized Kernel Pool Memory on Windows=E2=80=9D=
, by Joe Bialek (<a href=3D"https://twitter.com/JosephBialek/status/1278749=
937811853312">tweet</a>, <a href=3D"https://msrc-blog.microsoft.com/2020/07=
/02/solving-uninitialized-kernel-pool-memory-on-windows/">blogpost</a>)</li=
>
  <li>=E2=80=9CBuilding Faster AMD64 Memset Routines=E2=80=9D, by Joe Biale=
k (<a href=3D"https://twitter.com/JosephBialek/status/1348703996710580224">=
tweet</a>, <a href=3D"https://msrc-blog.microsoft.com/2021/01/11/building-f=
aster-amd64-memset-routines/">blogpost</a>)</li>
</ul>

<p>So, overall, here is the impact CHERI and MTE have on memory safety (if =
you are on a phone, the table probably doesn=E2=80=99t fit in the screen; y=
ou might need to scroll):</p>

<table>
  <thead>
    <tr>
      <th>&nbsp;</th>
      <th>CHERI-ISA + revocation + auto-init</th>
      <th>MTE + auto-init</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>spatial safety</strong></td>
      <td><span style=3D"color:green">Deterministic mitigation</span></td>
      <td><span style=3D"color:orange">Probabilistic mitigation (1), (2)</s=
pan></td>
    </tr>
    <tr>
      <td><strong>temporal safety</strong></td>
      <td><span style=3D"color:green">Deterministic mitigation</span></td>
      <td><span style=3D"color:orange">Probabilistic mitigation</span></td>
    </tr>
    <tr>
      <td><strong>type safety</strong></td>
      <td><span style=3D"color:red">No (3)</span></td>
      <td><span style=3D"color:red">No</span></td>
    </tr>
    <tr>
      <td><strong>concurrency safety</strong></td>
      <td><span style=3D"color:red">No</span></td>
      <td><span style=3D"color:red">No</span></td>
    </tr>
    <tr>
      <td><strong>definite init</strong></td>
      <td><span style=3D"color:green">Yes</span></td>
      <td><span style=3D"color:green">Yes</span></td>
    </tr>
  </tbody>
</table>

<p>(1) <u>Note</u>: MTE could gain deterministic mitigation for <strong>str=
icly</strong> linear overflows, by maintaing the property of setting differ=
ent tags to adjacent allocations.</p>

<p>(2) <u>Note</u>: MTE can=E2=80=99t protect against intra-object corrupti=
ons.</p>

<p>(3) <u>Note</u>: CHERI-ISA actually does give some granularity of type s=
afety, but not in the broad general sense: You get a by-design architectura=
l ability to distinguish between integers and pointers. In addition, you co=
uld use sealing to seal vtables with a specific type, etc..</p>

<h2 id=3D"software-solutions">Software Solutions<a class=3D"anchorjs-link "=
 href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#software-s=
olutions" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"f=
ont: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>

<p>There are some great examples of software mitigations that target 1st or=
der primitives and therefore kill an entire bug classes of vulnerabilities.=
 This blogpost won=E2=80=99t feel right without mentioning the top leading =
examples from the past few years, so I would like to give a few examples:</=
p>

<h3 id=3D"kalloc_type--datapac-apple">kalloc_type (+ dataPAC), Apple<a clas=
s=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_safety_blogp=
ost_2022/#kalloc_type--datapac-apple" aria-label=3D"Anchor" data-anchorjs-i=
con=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.37=
5em;"></a></h3>

<p>Yes, this is my favorite. In iOS 15 Apple introduces the first mitigatio=
n ever to temporal safety in software: kalloc_type. Kalloc_type gives us ty=
pe-based segregation for general purpose allocations within each sizeclass.=
 Instead of talking about it here I=E2=80=99ll simply refer you to their am=
azing <a href=3D"https://security.apple.com/blog/towards-the-next-generatio=
n-of-xnu-memory-safety/">blogpost</a> about it. The TL;DR is that XNU memor=
y management enforces the following properties:</p>

<ol>
  <li>
    <p>Once a VA used to serve allocation of type A, it could only use to s=
erve allocations of types with the same signature, which drastically reduci=
ng the number of UAF reallocation candidates for any given type.</p>
  </li>
  <li>
    <p>Types=E2=80=99 signatures are generated such that we could distingui=
sed between types with pointers / metadata etc., and we could avoid exploit=
able confusion. The signature scheme allows the segregation algorithm to re=
duce the number of pointer-data overlaps by encoding the following properti=
es for each 8 byte granule of a type:</p>

    <div class=3D"language-c highlighter-rouge"><div class=3D"highlight"><p=
re class=3D"highlight"><code><span class=3D"n">__options_decl</span><span c=
lass=3D"p">(</span><span class=3D"n">kt_granule_t</span><span class=3D"p">,=
</span> <span class=3D"kt">uint32_t</span><span class=3D"p">,</span> <span =
class=3D"p">{</span>
    <span class=3D"n">KT_GRANULE_PADDING</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">0</span><span class=3D"p">,</span> <span class=3D"cm">=
/* Represents padding inside a record type */</span>
    <span class=3D"n">KT_GRANULE_POINTER</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"cm">=
/* Represents a pointer type */</span>
    <span class=3D"n">KT_GRANULE_DATA</span>    <span class=3D"o">=3D</span=
> <span class=3D"mi">2</span><span class=3D"p">,</span> <span class=3D"cm">=
/* Represents a scalar type that is not a pointer */</span>
    <span class=3D"n">KT_GRANULE_DUAL</span>    <span class=3D"o">=3D</span=
> <span class=3D"mi">4</span><span class=3D"p">,</span> <span class=3D"cm">=
/* Currently unused */</span>
    <span class=3D"n">KT_GRANULE_PAC</span>     <span class=3D"o">=3D</span=
> <span class=3D"mi">8</span>  <span class=3D"cm">/* Represents a pointer w=
hich is subject to PAC */</span>
<span class=3D"p">});</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>Kalloc_type does have some weaknesses: same-signature-confusion, pointer=
-to-pointer confusions attacks, etc.. The most concern/interesting one is p=
robably same-type-confusion. Consider the case of a structure with union th=
at wraps multiple different types of pointers. This is a present for exploi=
t developers - the route from UAF on such a structure to type confusion is =
usually trivial.</p>

<p>That being said, Apple has a very good instrumentation of dataPAC (we se=
e it more and more in kernelcaches). I actually wrote something about just =
that in the <a href=3D"https://saaramar.github.io/kmem_guard_t_blogpost/">k=
mem_guard_t blogpost</a> I posted a few months ago:</p>

<p>=E2=80=9C<em>Some people asked me =E2=80=9Cwhy do you like dataPAC, if y=
ou always talk in favor of killing bug classes instead of protecting specif=
ic structures?=E2=80=9D. Let=E2=80=99s consider one example. Clearly, with =
kalloc_type, we could do some nice UAF exploits, provided the vulnerable st=
ructure in question has some nice properties. For example, if the structure=
 in question has:</em></p>

<ul>
  <li><em>fields that specify count/length/size =E2=80=93 we could corrupt =
them with another value, and covert the UAF into OOB.</em></li>
  <li><em>unions =E2=80=93 well, everything inside that union is up for typ=
e confusion now.</em></li>
</ul>

<p><em>However - what if the pointers inside these structures are signed us=
ing dataPAC, with a type as auxiliary? That=E2=80=99s right, dataPAC just g=
ot way up the chain, and it targets something highly closer to the 1st orde=
r primitive. Apple actually created here a scenario of =E2=80=9Cthis UAF is=
 not exploitable=E2=80=9D, even though the structure has unions, because yo=
u need a PAC bypass to create this confusion.</em></p>

<p><em><strong>That=E2=80=99s exactly what we should aim for when we build =
mitigations.</strong> The scenario of =E2=80=9Chey, we have this new memory=
 safety bug, but we can say that without further primitives, it=E2=80=99s n=
ot exploitable=E2=80=9D.</em>=E2=80=9D</p>

<p>That=E2=80=99s why the combination of kalloc_type with dataPAC is so pow=
erful - <strong>it mitigates 1st order primitives and dramatically decrease=
s the amount of exploitable temporal safety bugs.</strong></p>

<p><u>Note</u>: this is done without new hardware, and Apple found a way to=
 make the perf/memory overhead costs to work out. Some people like to say =
=E2=80=9Cunlike DRAM, which is expensive, virtual address space is free. Wh=
y do you excited about it so much?=E2=80=9D. <strong>This is a mistake</str=
ong>. There are some costs to keep in mind:</p>

<ul>
  <li>First of all, virtual address space is not free - it costs PTEs.</li>
  <li>Bookkeeping: if you want sequestering, you need metadata to keep trac=
k of that sequestering. This is 16 bytes per page (see <code class=3D"langu=
age-plaintext highlighter-rouge">zone_page_metadata</code>, osfmk/kern/zall=
oc.c). Which means it grows lineraly with the number of pages, and it incre=
ases the cost of PTEs.</li>
  <li>TLB: we might affect TLB pressure.</li>
</ul>

<p>Apple had a super impressive effort here, and it=E2=80=99s amazing that =
XNU has such powerful temporal safety these days (up to same-signature/type=
-confusions).</p>

<h3 id=3D"autoslab-grsecurity">AUTOSLAB, grsecurity<a class=3D"anchorjs-lin=
k " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#autosla=
b-grsecurity" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>AUTOSLAB has interesting security properties, one of them is actually ty=
pe-based segregation for temporal safety using dedicated caches. Grsecurity=
 independently implemented a very similar approach to kalloc_type in about =
the same timeframe (different implementation, same concept). See grsecurity=
=E2=80=99s great blogpost about it (<a href=3D"https://twitter.com/grsecuri=
ty/status/1425449421311938560">tweet</a>, <a href=3D"https://grsecurity.net=
/how_autoslab_changes_the_memory_unsafety_game">blogpost</a>) about it. Grs=
ecurity even discussed same-type-confusion attacks in another blogpost (<a =
href=3D"https://twitter.com/grsecurity/status/1583458806000128001">tweet</a=
>, <a href=3D"https://grsecurity.net/exploiting_and_defending_against_same_=
type_object_reuse">blogpost</a>).</p>

<h3 id=3D"firebloom-apple">Firebloom, Apple<a class=3D"anchorjs-link " href=
=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#firebloom-apple=
" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em=
 / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Up to this day, I don=E2=80=99t think I found something I love more than=
 reverse engineering. I spent some time reversing Apple=E2=80=99s Firebloom=
 compiler instrumentation in iBoot, and it was more fun than playing any vi=
deo game.</p>

<p>TL;DR: Firebloom introduces something <strong><u>exceptionally powerful<=
/u></strong>. It=E2=80=99s a compiler instrumentation that modifies pointer=
s to carry more information than just virtual addresses. With Firebloom, po=
inters now carry metadata describing the allocations:</p>

<ul>
  <li>exact bounds: lower bound, upper bound</li>
  <li>the type of the allocation, if there is one</li>
</ul>

<p>The structure describing reference to memory is defined as follows:</p>

<div class=3D"language-c highlighter-rouge"><div class=3D"highlight"><pre c=
lass=3D"highlight"><code><span class=3D"mo">00000000</span> <span class=3D"=
n">safe_allocation</span> <span class=3D"n">struc</span> <span class=3D"p">=
;</span> <span class=3D"p">(</span><span class=3D"k">sizeof</span><span cla=
ss=3D"o">=3D</span><span class=3D"mh">0x20</span><span class=3D"p">,</span>=
 <span class=3D"n">mappedto_1</span><span class=3D"p">)</span>
<span class=3D"mo">00000000</span> <span class=3D"n">raw_ptr</span>        =
 <span class=3D"n">DCQ</span> <span class=3D"o">?</span>                   =
<span class=3D"p">;</span>
<span class=3D"mo">0000000</span><span class=3D"mi">8</span> <span class=3D=
"n">lower_bound_ptr</span> <span class=3D"n">DCQ</span> <span class=3D"o">?=
</span>                   <span class=3D"p">;</span>
<span class=3D"mo">00000010</span> <span class=3D"n">upper_bound_ptr</span>=
 <span class=3D"n">DCQ</span> <span class=3D"o">?</span>                   =
<span class=3D"p">;</span>
<span class=3D"mo">0000001</span><span class=3D"mi">8</span> <span class=3D=
"n">type</span>            <span class=3D"n">DCQ</span> <span class=3D"o">?=
</span>                   <span class=3D"p">;</span>
<span class=3D"mo">00000020</span> <span class=3D"n">safe_allocation</span>=
 <span class=3D"n">ends</span>
</code></pre></div></div>

<p>Then, the compiler adds the following checks:</p>

<ul>
  <li><u>bounds checks</u>: before dereferencing each pointer, the compiler=
 adds checks for lower and upper bounds, to make sure there isn=E2=80=99t a=
ny access OOB. Basically, this is a CHERI implemented in software. It intro=
duces bounded references to memory, and every dereference has to be checked=
 to be in bounds. Therefore, <strong>Firebloom deterministically kills all =
spatial safety bugs!</strong></li>
  <li><u>type checks</u>: the compiler adds type checks to avoid illegal ca=
sts, etc.</li>
</ul>

<p>I know it sounds highly expensive (perf, memory, code size), and I expla=
ined why it makes perfect sense in the =E2=80=9CSum up / thoughts=E2=80=9D =
section in my first blogpost. Copy-paste myself is always fun:</p>

<p>=E2=80=9C<em>It=E2=80=99s great to see more work on memory safety, and i=
t=E2=80=99s always great to have more new stuff to look into.</em></p>

<p><em>This change is interesting. It certainly helps mitigate some of the =
memory safety vulnerabilities; however - it=E2=80=99s quite expensive in a =
few different ways:</em></p>

<ol>
  <li><em><u>memory overhead</u>: these new pointers take 0x20 bytes of mem=
ory, instead of 0x8. Representations of references to memory that are prote=
cted this way, consume x4 memory.</em></li>
  <li><em><u>code size</u>: clearly code size increases - more instructions=
 to manage the new metadata, more branches, more checks, etc.</em></li>
  <li><em><u>perf</u>: a lot of dereferences now are wrapped with more inst=
ructions (that loads data from memory), which impacts performance.</em></li=
>
</ol>

<p><em>I obviously didn=E2=80=99t measure these overheads between old/new v=
ersions of iBoot, so it=E2=80=99s all theoretical. But I believe it=E2=80=
=99s safe to assume this cost exists, and Apple found a way to make it work=
.</em></p>

<p><em>I know it sounds bad when I list it this way, but to be honest - iBo=
ot is just the place for such a change. I would be highly surprised if Appl=
e (or any other vendor) could pull off such an expensive change in the kern=
el, but iBoot is a very lightweight, contained environment. It has access t=
o the entire DRAM, and it has a very limited and specific purpose. And it m=
akes sense to protect the second stage bootloader, which is a critical part=
 of the secure boot process.</em></p>

<p><em>This is a great example of another effort on Apple=E2=80=99s behalf,=
 which improves security by mitigating a lot of 1st order primitives.</em>=
=E2=80=9D</p>

<p>I encourage you to read all about that in my reversing and documentation=
 about iBoot Firebloom:</p>

<ul>
  <li>Introduction to Firebloom (iBoot): <a href=3D"https://twitter.com/ama=
rsaar/status/1521847177911353345">tweet</a>, <a href=3D"https://saaramar.gi=
thub.io/iBoot_firebloom/">blogpost</a></li>
  <li>Firebloom (iBoot) - the type descriptor: <a href=3D"https://twitter.c=
om/AmarSaar/status/1524126678221529092">tweet</a>, <a href=3D"https://saara=
mar.github.io/iBoot_firebloom_type_desc/">blogpost</a></li>
</ul>

<h3 id=3D"guardedmemcpy-snmalloc-microsoft">GuardedMemcpy, snmalloc, Micros=
oft<a class=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_sa=
fety_blogpost_2022/#guardedmemcpy-snmalloc-microsoft" aria-label=3D"Anchor"=
 data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pa=
dding-left: 0.375em;"></a></h3>

<p>Unlike all the mitigations mentioned here, GuardedMemcpy probably has th=
e lowest impact:</p>

<ul>
  <li>it targets specific runtime/libraries functions rather then all memor=
y accesses</li>
  <li>it=E2=80=99s very elegant and efficient - very low perf overhead</li>
</ul>

<p>Nonetheless, it kills 1st order primitives. So I decided to include it h=
ere.</p>

<p>I highly encourage you to read the documentation about <a href=3D"https:=
//github.com/microsoft/snmalloc/blob/main/docs/security/GuardedMemcpy.md">s=
nmalloc GuardedMemcpy</a> (to be honest, I encourage you read about snmallo=
c in general). The TL;DR is that we can implement a very efficient logic to=
 calculate <code class=3D"language-plaintext highlighter-rouge">remaining_b=
ytes</code>, which lets us add bounds checks in certain functions (such as =
<code class=3D"language-plaintext highlighter-rouge">memcpy</code>, for exa=
mple) and kill OOBs. I think the doc page explains it so well, so I=E2=80=
=99ll simply copy-paste the relevant part here:</p>

<p>=E2=80=9C<em>All slab sizes are powers of two, and a given slab=E2=80=99=
s lowest address will be naturally aligned for the slab=E2=80=99s size. (Fo=
r brevity, slabs are sometimes said to be =E2=80=9Cnaturally aligned (at) p=
owers of two=E2=80=9D.) That is if <code class=3D"language-plaintext highli=
ghter-rouge">x</code> is the start of a slab of size <code class=3D"languag=
e-plaintext highlighter-rouge">2^n</code>, then <code class=3D"language-pla=
intext highlighter-rouge">x % (2^n) =3D=3D 0</code>. This means that a sing=
le mask can be used to find the offset into a slab. As the objects are laye=
d out continguously, we can also get the offset in the object with a modulu=
s operations, that is, <code class=3D"language-plaintext highlighter-rouge"=
>remaining_bytes(p)</code> is effectively:</em></p>

<div class=3D"language-c highlighter-rouge"><div class=3D"highlight"><pre c=
lass=3D"highlight"><code>    <span class=3D"n">object_size</span> <span cla=
ss=3D"o">-</span> <span class=3D"p">((</span><span class=3D"n">p</span> <sp=
an class=3D"o">%</span> <span class=3D"n">slab_size</span><span class=3D"p"=
>)</span> <span class=3D"o">%</span> <span class=3D"n">object_size</span><s=
pan class=3D"p">)</span>
</code></pre></div></div>

<p><em>Well, as anyone will tell you, division/modulus on a fast path is a =
non-starter. The first modulus is easy to deal with, we can replace <code c=
lass=3D"language-plaintext highlighter-rouge">% slab_size</code> with a bit=
-wise mask. However, as <code class=3D"language-plaintext highlighter-rouge=
">object_size</code> can be non-power-of-two values, we need to work a litt=
le harder.</em>=E2=80=9D</p>

<p>As you might guess, this process ends up with a link to Daniel Lemire=E2=
=80=99s article, <a href=3D"https://lemire.me/blog/2019/02/20/more-fun-with=
-fast-remainders-when-the-divisor-is-a-constant/">More fun with fast remain=
ders when the divisor is a constant</a>.</p>

<p>Interesting bonus: the same technique was added to zalloc.c in XNU (<a h=
ref=3D"https://twitter.com/AmarSaar/status/1588930560340422656">tweet</a>),=
 see <code class=3D"language-plaintext highlighter-rouge">copy_validate</co=
de> (osfmk/arm64/copyio.c).</p>

<h3 id=3D"castguard-microsoft">CastGuard, Microsoft<a class=3D"anchorjs-lin=
k " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#castgua=
rd-microsoft" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h3>

<p>Type confusion is a very challenging problem. As I stated in my BlueHatI=
L 2022 MTE talk, when I say =E2=80=9Ctype confusions=E2=80=9D, I=E2=80=99m =
referring to vulnerabilities where <strong>the 1st order primitive is a pur=
e, beautiful, straigtforward type confusion</strong>. If you take some OOB/=
UAF and create a type confusion on top of that, mitigations that kill OOB/U=
AF at their root cause will break your exploit. However, if the root cause =
of the bug is a straigtforward type confusion, this becomes a different sto=
ry.</p>

<p>Type confusions come in many flavors, and while this bug class is less c=
ommon than others, it is an important one since it bypasses most of the mit=
igations we discussed (MTE, CHERI, =E2=80=A6). A really interesting mitigat=
ion called CastGuard challenges this bug class. I=E2=80=99ll encourage you =
to check out Joe Bialek=E2=80=99s talk from Blackhat USA 2022 about it (<a =
href=3D"https://twitter.com/JosephBialek/status/1564322132645269504">tweet<=
/a>, <a href=3D"https://github.com/microsoft/MSRC-Security-Research/blob/ma=
ster/presentations/2022_08_BlackHatUSA/CastGuard%20Blackhat%202022.pdf">sli=
des</a>). Covers a great research and a great mitigation.</p>

<h3 id=3D"datapac-for-type-confusions-apple">dataPAC for type confusions, A=
pple<a class=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_s=
afety_blogpost_2022/#datapac-for-type-confusions-apple" aria-label=3D"Ancho=
r" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; =
padding-left: 0.375em;"></a></h3>

<p>In the Apple ecosystem, PAC has a few different purposes:</p>

<ul>
  <li>iPAC, which is used for CFI (backward-edge and forward-edge). This is=
 of course not in the scope of this blogpost because it doesn=E2=80=99t tar=
get 1st order primitives, and it=E2=80=99s old news.</li>
  <li>dataPAC, which I already mentioned in the context of kalloc_type and =
detailed how it got up the exploit process, therefore helps killing 1st ord=
er primitives of temporal safety bugs.</li>
</ul>

<p>In general, dataPAC reduces the number of possible exploitable type conf=
usions between pointers. Type confusions come in many forms and create very=
 powerful exploitation primitives. The interesting point is that dataPAC ca=
n help with addressing a lot of these primitives in contained environments,=
 such as IOKit, Objective-C, etc..</p>

<p>For example, a trivial attack is to replace a vtable pointer of type A w=
ith a vtable pointer of type B, creating the scenario of calling methods of=
 B instead of A, while operating on incorrect state/fields/registers. Anoth=
er great example is the isa-ptr in Objective-C, which is now signed with PA=
C (for context, see a lot of the excellent research published by <a href=3D=
"https://twitter.com/5aelo">Samuel Gro=C3=9F</a> (<a href=3D"https://google=
projectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html">one</a>=
, <a href=3D"https://saelo.github.io/presentations/offensivecon_20_no_click=
s.pdf">two</a>)). In many cases, such behaviors (that go through vtables/is=
a-ptr) happen quite close to the 1st order primitive.</p>

<p>While dataPAC targets a specific set of structures (it=E2=80=99s not a w=
ide mitigation you enable for every structure in one shot), it helps mitiga=
te possible type confusions by signing pointers with <strong>auxiliaries</s=
trong>. That=E2=80=99s very cool!</p>

<h3 id=3D"attack-surface-reduction--sandboxing">Attack surface reduction / =
sandboxing<a class=3D"anchorjs-link " href=3D"https://saaramar.github.io/me=
mory_safety_blogpost_2022/#attack-surface-reduction--sandboxing" aria-label=
=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorj=
s-icons; padding-left: 0.375em;"></a></h3>

<p>Reducing attack surfaces across security boundaries has a very high ROI.=
 It=E2=80=99s not always possible (in many cases you can=E2=80=99t give up =
on sets of features) and it may require a lot of busy work (sandboxing / is=
olation), but when you can pull it off, it introduces a very high security =
value. Less attack surface means less bugs. I would like to give a few exam=
ples of amazing moves in our industry. And yes, I know, we all have the sam=
e example in mind:</p>

<ul>
  <li>In iOS 16 Apple announced on AMAZING new configuration/mitigation cal=
led <a href=3D"https://support.apple.com/en-us/HT212650">Lockdown mode</a>.=
 A serious, significant reduce in features and attack surfaces, in favor of=
 better security. Luca (the one and only :)) of course mentioned this in hi=
s fantastic <a href=3D"https://www.youtube.com/watch?v=3D8mQAYeozl5I">Hexac=
on=E2=80=99s keynote</a> and you can see it in this great <a href=3D"https:=
//twitter.com/jifa/status/1580835350209265664">Twitter thread</a> about hig=
hlights from the keynote.</li>
  <li>In iOS 16 Apple moved the wifi stack out of the kernel to userspace (=
<a href=3D"https://twitter.com/_saagarjha/status/1534756996523601920">tweet=
</a>, <a href=3D"https://twitter.com/pedantcoder/status/1534759257832189952=
">tweet</a>).</li>
</ul>

<h2 id=3D"safe-language-solutions">Safe language solutions<a class=3D"ancho=
rjs-link " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#=
safe-language-solutions" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=
=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h=
2>

<p>With all due respect to mitigations, they don=E2=80=99t fix the actual p=
roblem. The approach of most of the memory safety mitigations is to detect =
the error in runtime and fastfail the process/system. In other words, the a=
pproach is to =E2=80=9C<strong>convert memory corruption primitives into Do=
S</strong>=E2=80=9D.</p>

<p>Note: there is a weird discussion in the world about =E2=80=9Cis trigger=
ing a crash the right thing to do when detecting memory corruption?=E2=80=
=9D. This discussion is weird because the answer is trivially YES. It is si=
gnificantly better (actually, it=E2=80=99s necessary) to crash rather than =
have someone corrupt memory and keep the execution running. Memory corrupti=
on means compromise of the system=E2=80=99s integrity/confidentiality. It m=
eans arbitrary code execution. Which means that among all the bad things th=
e attacker can do, they can DoS your process/system. Actually, from the use=
r=E2=80=99s point of view, intentionally crashing the process/system is usu=
ally the best thing they can hope for. Letting someone keep running after y=
ou know they corrupted memory is extremely irresponsible. If such a thing h=
appened, it clearly means the code has a severe bug.</p>

<p>While fastfail is a really good reaction to memory corruption, there is =
something even better - let=E2=80=99s use safe programming languages that s=
imply don=E2=80=99t allow bugs to exist to begin with. There is an obvious =
problem here - we built our industry upon unsafe programming languages, and=
 it=E2=80=99s incredibly expensive to rewrite everything (it=E2=80=99s unre=
alistic). However - at the bare minimum, we could develop future code in a =
safe language (not =E2=80=9Csafer=E2=80=9D, since anything is safer than C)=
.</p>

<h3 id=3D"rust">Rust<a class=3D"anchorjs-link " href=3D"https://saaramar.gi=
thub.io/memory_safety_blogpost_2022/#rust" aria-label=3D"Anchor" data-ancho=
rjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left:=
 0.375em;"></a></h3>

<p><strong>First of all, let me say this: Rust is amazing. It=E2=80=99s the=
 right, wise thing to do.</strong></p>

<p>There have been so many publications about Rust. I would just like to br=
iefly cover why Rust answers on all the memory safety properties we talked =
about. I won=E2=80=99t cover everything, just the most important / unique o=
nes.</p>

<h4 id=3D"temporal-safety">Temporal safety<a class=3D"anchorjs-link " href=
=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#temporal-safety=
" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em=
 / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>I especially like how Rust manages objects=E2=80=99 lifetimes. Rust isn=
=E2=80=99t a managed language (there isn=E2=80=99t a GC), and it doesn=E2=
=80=99t let programmers decide when to free objects (which is good, humans =
make mistakes). Instead, Rust makes sure it knows all the objects=E2=80=99 =
lifetimes in compile-time, and adds all the destructions itself. Suppose Ru=
st can=E2=80=99t figure out from your code the lifetime of some instance (a=
nd the instance isn=E2=80=99t static, which means it lives until the proces=
s/system terminates). In that case, Rust will tell you nicely: =E2=80=9Chey=
, I=E2=80=99m sorry, but your code isn=E2=80=99t good enough. Please take a=
 step back, understand what you want to do, well-define it, and come back t=
o me. Good luck!=E2=80=9D.</p>

<p>To quote the great book =E2=80=9C<em>Programming Rust</em>=E2=80=9D (by =
Jim Blandy &amp;&amp; Jason Orendorff, page 104):</p>

<p>=E2=80=9C<em>This is the essence of the process Rust uses for all code. =
Bringing more language features into the picture - data structures and func=
tion calls, say - introduces new sorts of constraints, but the principle re=
mains the same: first, understand the constraints arising from the way the =
program uses references; then, find lifetimes that satisfy them. This is no=
t so different from the process C and C++ programmers impose on themselves;=
 <strong>the difference is that Rust knows the rules, and enforces them</st=
rong>.</em>=E2=80=9D</p>

<p>With such an amazing approach, Rust enforces 100% temporal safety by des=
ign. You can=E2=80=99t have UAFs/double frees/dangling pointers if the comp=
iler can prove there isn=E2=80=99t an access to an object outside of its li=
fetime.</p>

<p><strong><u>Example</u></strong>: let me drop here one exaple for how Rus=
t makes sure you can=E2=80=99t break the rules. Rust has two famous traits:=
 <em>Drop</em> and <em>Copy</em>:</p>

<ul>
  <li><u>Drop</u>: When a value=E2=80=99s owner goes away, we say that Rust=
 <em>drops</em> the value. When Rust drops a value, it has to operate like =
a d=E2=80=99tor - free all the other values, heap allocations, and system r=
esources the value owns. Drops happen under a variety of circumstances: whe=
n a value goes out of scope, when you truncate a vector, removing elements =
from its end, and so on. Or in other words - when it removes the value from=
 the ownership tree somehow.</li>
  <li><u>Copy</u>: When the programmer copies instances of types, Rust must=
 decide whether to <em>move</em> or <em>copy</em> them. There is a signific=
ant difference - <em>move</em> means moving the value and leaving its sourc=
e as uninitialized, while <em>copy</em> means creating a copy of the value =
by shallow-copy the bits bit-by-bit.</li>
</ul>

<p>Rust permits values to have the <em>Copy</em> marker only if a shallow b=
it-by-bit copy is all it needs. Types that own any other resources (heap al=
locations/handles/fds/etc.) cannot implement <em>Copy</em>. Which leads us =
to the following basic rule (quoting <em>Programming Rust</em>, page 289): =
=E2=80=9C<em>Any type that implements the Drop trait cannot be Copy. <stron=
g>Rust persumes that if a type needs special cleanup code, it must also req=
uire special copying code, and thus can=E2=80=99t be Copy.</strong></em>=E2=
=80=9D</p>

<p>Indeed! If some value needs a special cleanup code (free/close/etc.), it=
 doesn=E2=80=99t make any sense to shallow-copy it. This is one example of =
how dangling pointers and other variations of temporal safety fun begin. Th=
erefore, saying =E2=80=9C<em>Drop</em> cannot be <em>Copy</em>=E2=80=9D mak=
es a lot of sense. <strong>This is what you have with Rust. Rules and restr=
ictions that make sense.</strong></p>

<h4 id=3D"concurrency-safety">Concurrency safety<a class=3D"anchorjs-link "=
 href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#concurrenc=
y-safety" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"f=
ont: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>For concurrency safety, Rust enforces a strict rule that every value has=
 one (and only one) owner with mutable access at any given point in time. Y=
ou can pass an immutable reference to concurrent threads, but you cannot do=
 that if there is a mutable reference to the value. To quote from the great=
 page <a href=3D"https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency=
.html">Fearless Concurrency with Rust</a>:</p>

<p>=E2=80=9C<em>Each reference is valid for a limited scope, which the comp=
iler will automatically determine. References come in two flavors:</em></p>

<ul>
  <li><em>Immutable references <code class=3D"language-plaintext highlighte=
r-rouge">&amp;T</code>, which allow sharing but not mutation. There can be =
multiple <code class=3D"language-plaintext highlighter-rouge">&amp;T</code>=
 references to the same value simultaneously, but the value cannot be mutat=
ed while those references are active.</em></li>
  <li><em>Mutable references <code class=3D"language-plaintext highlighter-=
rouge">&amp;mut T</code>, which allow mutation but not sharing. If there is=
 an <code class=3D"language-plaintext highlighter-rouge">&amp;mut T</code> =
reference to a value, <strong>there can be no other active references at th=
at time, but the value can be mutated</strong>.</em></li>
</ul>

<p><em>Rust checks these rules at compile time; borrowing has no runtime ov=
erhead</em>=E2=80=9D.</p>

<p>You know what I want to say about it, so let=E2=80=99s say it together -=
 <strong>Rust makes sense</strong>.</p>

<p>Basically, I believe once you have unconstrained concurrent mutation in =
a language, it gets everywhere.</p>

<h4 id=3D"definite-initialization-1">Definite initialization<a class=3D"anc=
horjs-link " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022=
/#definite-initialization-1" aria-label=3D"Anchor" data-anchorjs-icon=3D"=
=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"><=
/a></h4>

<p>That=E2=80=99s easy. Use of uninitialized memory simply cannot happen in=
 Rust;  the compiler won=E2=80=99t compile code that uses an uninitialized =
value. Everything is initialized, and there is no possible scenario to crea=
te an uninitialized value. For example, we talked about moving a value. In =
Rust, when you move a value, the source relinquishes ownership of the value=
 to the destination and becomes uninitialized. From this point forward, the=
 destination controls the value=E2=80=99s lifetime.</p>

<p>I have a lot to say about Rust - how the binary looks like, how the comp=
iler work, perf, memory usage, etc.; however, this blogpost is not the plac=
e for that (it gets too long). Fortunately, there is a lot of amazing publi=
c information all over the internet.</p>

<h4 id=3D"rust---status-information-and-community">Rust - status, informati=
on and community:<a class=3D"anchorjs-link " href=3D"https://saaramar.githu=
b.io/memory_safety_blogpost_2022/#rust---status-information-and-community" =
aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em /=
 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Many companies started to act a lot around Rust: encouraging developers =
to use it, raising awareness for the many advantages this great language in=
troduces, and releasing many free, open-source materials to help newcomers =
get familiar with the language and its ecosystem. Some great examples:</p>

<ul>
  <li>Microsoft: =E2=80=9CTake your first steps with Rust=E2=80=9D (<a href=
=3D"https://twitter.com/ryan_levick/status/1383804617461358598">tweet</a>, =
<a href=3D"https://learn.microsoft.com/en-us/training/paths/rust-first-step=
s/">training</a>)</li>
  <li>The Android team has open sourced their internal Rust Training (<a hr=
ef=3D"https://twitter.com/jeffvanderstoep/status/1605607312391131139">tweet=
</a>, <a href=3D"https://google.github.io/comprehensive-rust/">training</a>=
)</li>
  <li>AWS: <a href=3D"https://aws.amazon.com/blogs/opensource/sustainabilit=
y-with-rust/">Sustainability with Rust</a></li>
  <li>Meta: A brief history of Rust at Facebook (<a href=3D"https://twitter=
.com/fb_engineering/status/1387799140105658369">tweet</a>, <a href=3D"https=
://engineering.fb.com/2021/04/29/developer-tools/rust/">blogpost</a>)</li>
  <li><a href=3D"https://this-week-in-rust.org/">This Week In Rust</a></li>
</ul>

<p>Of course, it=E2=80=99s not just trainings, tweets and Mastodon posts! T=
here are fantastic, concrete steps towards Rust in production:</p>

<ul>
  <li>Memory Safe Languages in Android 13 (<a href=3D"https://twitter.com/j=
effvanderstoep/status/1598361767339491328">tweet</a>, <a href=3D"https://se=
curity.googleblog.com/2022/12/memory-safe-languages-in-android-13.html">blo=
gpost</a>). A great quote from this great blogpost: =E2=80=9C<em>As Android=
 migrates away from C/C++ to Java/Kotlin/Rust, we expect the number of memo=
ry safety vulnerabilities to continue to fall.</em>=E2=80=9D</li>
  <li>Windows dwrite font parsing (<a href=3D"https://twitter.com/dwizzzleM=
SFT/status/1578532292662005760">tweet</a>)</li>
  <li>Linux kernel: <a href=3D"https://twitter.com/sjvn/status/157187372520=
8989697">tweet</a></li>
  <li>Tales of the M1 GPU: <a href=3D"https://infosec.exchange/@AsahiLinux@=
treehouse.systems/109428114423594550">Mastodon post</a>, <a href=3D"https:/=
/asahilinux.org/2022/11/tales-of-the-m1-gpu/">blogpost</a></li>
</ul>

<p>Something that makes me very happy is that the AMAZING, OUTSTANDING <a h=
ref=3D"https://asahilinux.org/">Asahi Linux</a> project adopts Rust as well=
! Asahi Linux is a fantastic project that publishes great content and build=
s a fantastic Linux distribution. See Lina=E2=80=99s great <a href=3D"https=
://twitter.com/LinaAsahi/status/1577667445719912450">thread</a> about her e=
xperience with Rust. Specifically, this <a href=3D"https://twitter.com/Lina=
Asahi/status/1577667448966258690">tweet</a>:</p>

<p>=E2=80=9C<em>All the concurrency bugs just vanish with Rust! <strong>Mem=
ory gets freed when it needs to be freed!</strong> Once you learn to make R=
ust work with you, I feel like it guides you into writing correct code, eve=
n beyond the language=E2=80=99s safety promises. It=E2=80=99s seriously mag=
ic!=E2=80=A6</em>=E2=80=9D</p>

<p>In general, I highly recommend following up on that project. Some folks =
to follow for great content:</p>

<ul>
  <li>marcan: @marcan@treehouse.systems</li>
  <li>Alyssa Rosenzweig: @alyssa@treehouse.systems</li>
  <li>Asahi Lina: @lina@vt.social</li>
  <li>Sven Peter: @sven@treehouse.systems</li>
</ul>

<h3 id=3D"swift">Swift<a class=3D"anchorjs-link " href=3D"https://saaramar.=
github.io/memory_safety_blogpost_2022/#swift" aria-label=3D"Anchor" data-an=
chorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-le=
ft: 0.375em;"></a></h3>

<p>I didn=E2=80=99t talk much about Swift until now. The trigger for my int=
erest in Swift and the reason it=E2=80=99s part of this blogpost is somethi=
ng mentioned in WWDC22. I found it <strong>very exciting</strong>. Quoting =
the following <a href=3D"https://twitter.com/jacquesgt/status/1534207805699=
174401">tweet</a> by Jacques Fortier:</p>

<p>=E2=80=9C<em>I=E2=80=99m so proud of the Secure Enclave team=E2=80=99s w=
ork on iOS 16. The Secure Enclave is the foundation for a bunch of new secu=
rity features announced this year and has major improvements under the hood=
 this year. Including this bit of Swift news!=E2=80=A6</em>=E2=80=9D</p>

<p>The link in the tweet is to the video: =E2=80=9C<a href=3D"https://devel=
oper.apple.com/videos/play/wwdc2022/110354/">What=E2=80=99s new in Swift</a=
>=E2=80=9D. At 5:01, the video reads:</p>

<p>=E2=80=9C<em>=E2=80=A6Swift underwent some major changes this year. To m=
ake the standard library smaller for standalone, statically linked binaries=
, we dropped the dependency on an external Unicode support library, replaci=
ng it with a faster native implementation. Smaller, faster binaries are a h=
uge benefit when running on event-driven server solutions. You get static l=
inking on Linux by default to better support containerized deployments for =
the server. This size reduction makes Swift suitable for even restricted en=
vironments, which allowed us to use it in <strong><u>Apple's Secure Enclave=
 Processor</u></strong>. Swift is useful from apps to servers all the way d=
own to restricted processors; tying it all together is the package ecosyste=
m=E2=80=A6</em>=E2=80=9D</p>

<p>This is <strong>mind-blowing</strong>. It goes without saying that the S=
ecure Enclave is a critical component, and having a safer language used for=
 building parts of the TCB is very exciting. For me, it was surprising beca=
use while Swift seems like an excellent fit for apps and high-level program=
ming, it looks less fit for low-level OS development. However, now that it =
has made its way into the SEP, I believe this blogpost should also discuss =
Swift=E2=80=99s security properties. It=E2=80=99s common knowledge, but eve=
rything that gets into such a critical component as the SEP is important to=
 talk about.</p>

<h4 id=3D"stable-abi">Stable ABI<a class=3D"anchorjs-link " href=3D"https:/=
/saaramar.github.io/memory_safety_blogpost_2022/#stable-abi" aria-label=3D"=
Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-ic=
ons; padding-left: 0.375em;"></a></h4>

<p>Before I start being that annoying kid that talks about security, I=E2=
=80=99d like to point out that, unlike Rust, Swift has a table ABI (see thi=
s amazing <a href=3D"https://faultlore.com/blah/swift-abi/">blogpost</a>). =
That=E2=80=99s huge, and I would like to quote the fantastic author, <a hre=
f=3D"https://twitter.com/Gankra_">Aria Beingessner</a>, because it reflects=
 what I=E2=80=99m feeling: =E2=80=9C<em>The result is something I find endl=
essly fascinating, <strong>because I think Swift has pushed the notion of A=
BI stability farther than any language without much compromise</strong>.</e=
m>=E2=80=9D</p>

<h4 id=3D"security-properties">Security properties<a class=3D"anchorjs-link=
 " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#security=
-properties" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h4>

<p>Security-wise, Swift has a ton of great properties like Rust, such as:</=
p>

<ul>
  <li>It is a type safe language</li>
  <li>It enforces spatial safety</li>
  <li>It covers definite initialization perfectly (see <a href=3D"https://d=
ocs.swift.org/swift-book/LanguageGuide/Initialization.html">Initialization<=
/a> in the Swift book)</li>
  <li>For lifetimes, Swift uses automatic reference counting (ARC)</li>
</ul>

<p>In addition, incorrect operations such as reading a value while modifyin=
g it, are forbidden in Swift. A classic example of =E2=80=9Creading a value=
 while modifying it=E2=80=9D can be seen in the following example:</p>

<div class=3D"language-swift highlighter-rouge"><div class=3D"highlight"><p=
re class=3D"highlight"><code><span class=3D"k">var</span> <span class=3D"nv=
">numbers</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span><sp=
an class=3D"mi">3</span><span class=3D"p">,</span> <span class=3D"mi">2</sp=
an><span class=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">=
]</span>
<span class=3D"n">numbers</span><span class=3D"o">.</span><span class=3D"nf=
">removeAll</span><span class=3D"p">(</span><span class=3D"nv">where</span>=
<span class=3D"p">:</span> <span class=3D"p">{</span> <span class=3D"n">num=
ber</span> <span class=3D"k">in</span>
    <span class=3D"n">number</span> <span class=3D"o">=3D=3D</span> <span c=
lass=3D"n">numbers</span><span class=3D"o">.</span><span class=3D"n">count<=
/span>
<span class=3D"p">})</span>
</code></pre></div></div>

<p>Swift will prevent such behavior because there is an obvious overlap bet=
ween accesses to the array, and modifying the array requires exclusive acce=
ss.</p>

<p>Because I talked in detail about how such properties are achieved at the=
 language level, I won=E2=80=99t repeat myself (this blogpost is too long a=
s it is). Swift does things differently but achieves the same properties an=
d guarantees. Instead of repeating myself, I=E2=80=99ll focus on the main i=
mportant difference: <strong>concurrency safety</strong>.</p>

<p>While Swift built the basic blocks for developers to safely develop conc=
urrency (using Structured Concurrency), the key question is =E2=80=9Care th=
ere other ways to use concurrency?=E2=80=9D. If you could use other less-sa=
fe means to have concurrency, then safety might break, and we depend on the=
 developer. This is where problems begin. To read more, see the <a href=3D"=
https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html">Concurren=
cy page</a>.</p>

<p>The important point here is as follows: <strong>Swift is not memory safe=
 in the presence of unstructured concurrency</strong>. However, it=E2=80=99=
s important to be fair and note that you shouldn=E2=80=99t be able to trigg=
er memory corruptions in the presence of <strong>structured concurrency</st=
rong>.</p>

<p><u>Note</u>: Specifically for the SEP, this is probably not a big deal. =
But for an OS development, it=E2=80=99s critical.</p>

<h4 id=3D"example---unstructured-concurrency-breaks-memory-safety">Example =
- unstructured concurrency breaks memory safety<a class=3D"anchorjs-link " =
href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#example---u=
nstructured-concurrency-breaks-memory-safety" aria-label=3D"Anchor" data-an=
chorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-le=
ft: 0.375em;"></a></h4>

<p>Unstructured concurrency makes it possible to introduce data races. Let=
=E2=80=99s see an example that creates a UAF on a ARC object:</p>

<div class=3D"language-swift highlighter-rouge"><div class=3D"highlight"><p=
re class=3D"highlight"><code><span class=3D"kd">import</span> <span class=
=3D"kt">Foundation</span>

<span class=3D"kd">typealias</span> <span class=3D"kt">A</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">String</span>

<span class=3D"kd">struct</span> <span class=3D"kt">B</span> <span class=3D=
"p">{</span>
	<span class=3D"k">var</span> <span class=3D"nv">x</span><span class=3D"p">=
:</span> <span class=3D"kt">Int64</span>
	<span class=3D"k">var</span> <span class=3D"nv">y</span><span class=3D"p">=
:</span> <span class=3D"kt">Int64</span>
	<span class=3D"k">var</span> <span class=3D"nv">z</span><span class=3D"p">=
:</span> <span class=3D"kt">Int64</span>
	<span class=3D"k">var</span> <span class=3D"nv">w</span><span class=3D"p">=
:</span> <span class=3D"kt">Int64</span>
<span class=3D"p">}</span>

<span class=3D"kd">enum</span> <span class=3D"kt">TaggedType</span> <span c=
lass=3D"p">{</span>
	<span class=3D"k">case</span> <span class=3D"kt">A_type</span><span class=
=3D"p">(</span><span class=3D"kt">A</span><span class=3D"p">)</span>
	<span class=3D"k">case</span> <span class=3D"kt">B_type</span><span class=
=3D"p">(</span><span class=3D"kt">B</span><span class=3D"p">)</span>
<span class=3D"p">}</span>

<span class=3D"k">var</span> <span class=3D"nv">resource</span> <span class=
=3D"o">=3D</span> <span class=3D"kt">TaggedType</span><span class=3D"o">.</=
span><span class=3D"kt">A_type</span><span class=3D"p">(</span> <span class=
=3D"kt">A</span><span class=3D"p">(</span><span class=3D"s">""</span><span =
class=3D"p">)</span> <span class=3D"p">)</span>

<span class=3D"k">let</span> <span class=3D"nv">backgroundQueue</span> <spa=
n class=3D"o">=3D</span> <span class=3D"kt">DispatchQueue</span><span class=
=3D"p">(</span><span class=3D"nv">label</span><span class=3D"p">:</span> <s=
pan class=3D"s">"com.app.queue"</span><span class=3D"p">,</span> <span clas=
s=3D"nv">attributes</span><span class=3D"p">:</span> <span class=3D"o">.</s=
pan><span class=3D"n">concurrent</span><span class=3D"p">)</span>
<span class=3D"n">backgroundQueue</span><span class=3D"o">.</span><span cla=
ss=3D"n">async</span> <span class=3D"p">{</span>
	<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"kc"=
>true</span><span class=3D"p">)</span> <span class=3D"p">{</span> <span cla=
ss=3D"n">resource</span> <span class=3D"o">=3D</span> <span class=3D"kt">Ta=
ggedType</span><span class=3D"o">.</span><span class=3D"kt">A_type</span><s=
pan class=3D"p">(</span> <span class=3D"kt">A</span><span class=3D"p">(</sp=
an> <span class=3D"kt">String</span><span class=3D"p">(</span><span class=
=3D"nv">repeating</span><span class=3D"p">:</span><span class=3D"s">"C"</sp=
an><span class=3D"p">,</span> <span class=3D"nv">count</span><span class=3D=
"p">:</span> <span class=3D"mh">0x20</span><span class=3D"p">)</span> <span=
 class=3D"p">)</span> <span class=3D"p">)}</span>
<span class=3D"p">}</span>
<span class=3D"n">backgroundQueue</span><span class=3D"o">.</span><span cla=
ss=3D"n">async</span> <span class=3D"p">{</span>
	<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"kc"=
>true</span><span class=3D"p">)</span> <span class=3D"p">{</span> <span cla=
ss=3D"n">resource</span> <span class=3D"o">=3D</span> <span class=3D"kt">Ta=
ggedType</span><span class=3D"o">.</span><span class=3D"kt">B_type</span><s=
pan class=3D"p">(</span> <span class=3D"kt">B</span><span class=3D"p">(</sp=
an> <span class=3D"nv">x</span><span class=3D"p">:</span> <span class=3D"mh=
">0x4141414141414141</span><span class=3D"p">,</span> <span class=3D"nv">y<=
/span><span class=3D"p">:</span> <span class=3D"mh">0x4141414141414141</spa=
n><span class=3D"p">,</span> <span class=3D"nv">z</span><span class=3D"p">:=
</span> <span class=3D"mh">0x4141414141414141</span><span class=3D"p">,</sp=
an> <span class=3D"nv">w</span><span class=3D"p">:</span> <span class=3D"mh=
">0x4141414141414141</span><span class=3D"p">)</span> <span class=3D"p">)}<=
/span>
<span class=3D"p">}</span>

<span class=3D"k">while</span><span class=3D"p">(</span><span class=3D"kc">=
true</span><span class=3D"p">)</span> <span class=3D"p">{}</span>
</code></pre></div></div>

<p>Build and run:</p>

<div class=3D"language-bash highlighter-rouge"><div class=3D"highlight"><pr=
e class=3D"highlight"><code>saaramar@Saars-Air swift % lldb ./type_poc=20
<span class=3D"o">(</span>lldb<span class=3D"o">)</span> target create <spa=
n class=3D"s2">"./type_poc"</span>
Current executable <span class=3D"nb">set </span>to <span class=3D"s1">'/Us=
ers/saaramar/Documents/projects/swift/type_poc'</span> <span class=3D"o">(<=
/span>arm64<span class=3D"o">)</span><span class=3D"nb">.</span>
<span class=3D"o">(</span>lldb<span class=3D"o">)</span> run
Process 85466 launched: <span class=3D"s1">'/Users/saaramar/Documents/proje=
cts/swift/type_poc'</span> <span class=3D"o">(</span>arm64<span class=3D"o"=
>)</span>
Process 85466 stopped
<span class=3D"k">*</span> thread <span class=3D"c">#3, queue =3D 'com.app.=
queue', stop reason =3D EXC_BAD_ACCESS (code=3D1, address=3D0x1414141414141=
40)</span>
    frame <span class=3D"c">#0: 0x00000001a12f09b8 libobjc.A.dylib`objc_rel=
ease + 8</span>
libobjc.A.dylib<span class=3D"sb">`</span>objc_release:
-&gt;  0x1a12f09b8 &lt;+8&gt;:  ldr    x8, <span class=3D"o">[</span>x0]
    0x1a12f09bc &lt;+12&gt;: and    x9, x8, <span class=3D"c">#0x7fffffffff=
f8</span>
    0x1a12f09c0 &lt;+16&gt;: ldr    x10, <span class=3D"o">[</span>x9, <spa=
n class=3D"c">#0x20]</span>
    0x1a12f09c4 &lt;+20&gt;: tbz    w10, <span class=3D"c">#0x2, 0x1a12f0a2=
4    ; &lt;+116&gt;</span>
Target 0: <span class=3D"o">(</span>type_poc<span class=3D"o">)</span> stop=
ped.
<span class=3D"o">(</span>lldb<span class=3D"o">)</span>=20
</code></pre></div></div>

<p>Indeed, memory safety is broken. We introduced a UAF and triggered a seg=
fault in objc_release because we replaced the object between the initializa=
tion and the free. As you can see, this sequence is isa-ptr fetching vtable=
 sequence, which means we can replace this type with another type, drop the=
re an isa-ptr of another type, and have a powerful type confusion.</p>

<p><u>Note</u>: It=E2=80=99s worth mentioning that while it=E2=80=99s disab=
led by default, the compiler flag <code class=3D"language-plaintext highlig=
hter-rouge">-strict-concurrency=3Dcomplete</code> deals with that behavior =
and refuses to build this code.</p>

<h4 id=3D"swift-6">Swift 6?<a class=3D"anchorjs-link " href=3D"https://saar=
amar.github.io/memory_safety_blogpost_2022/#swift-6" aria-label=3D"Anchor" =
data-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; pad=
ding-left: 0.375em;"></a></h4>

<p>It=E2=80=99s important to mention that Swift refined their concurrent sa=
fety model. As was mentioned in the =E2=80=9C<a href=3D"https://developer.a=
pple.com/videos/play/wwdc2022/110354/">What=E2=80=99s new in Swift</a>=E2=
=80=9D video, Apple set <strong>a new goal to Swift 6: to advance from memo=
ry safety to thread safety.</strong> It=E2=80=99s also mentioned in the int=
eresting announcements post =E2=80=9C<a href=3D"https://forums.swift.org/t/=
on-the-road-to-swift-6/32862">On the road to Swift 6</a>=E2=80=9D:</p>

<p>=E2=80=9C<em>What will differentiate Swift 6 from the Swift 5.x releases=
 will be a significant change in the capabilities of the language. At this =
point, that change is improved concurrency support, <strong>and further pro=
gress towards the memory ownership model as outlined in John McCall=E2=80=
=99s</strong> <a href=3D"https://github.com/apple/swift/blob/main/docs/Owne=
rshipManifesto.md">ownership manifesto</a>. These are major changes to the =
language that will take discussion, investigation, and time to implement. I=
nstead of announcing a specific timeline for =E2=80=9CSwift 6=E2=80=9D, the=
 plan is for the community to be a part of seeing these efforts progress, w=
ith focused efforts and goals, and we release Swift 6 when those efforts cu=
lminate. It will be an exciting journey, and I am proud to be part of this =
community that will make it happen.</em>=E2=80=9D</p>

<p>I=E2=80=99m looking forward to see how this model would look and how it =
would affect Swift programming.</p>

<h2 id=3D"safety-in-low-level">Safety in low level<a class=3D"anchorjs-link=
 " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#safety-i=
n-low-level" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=8B" style=
=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h2>

<p>It=E2=80=99s obvious that for new code (and for a lot of existing =E2=80=
=9Csecurity sensitive=E2=80=9D components) safe languages are a far better =
choice than anything else. It literally means =E2=80=9Clet=E2=80=99s have n=
o memory safety bugs=E2=80=9D. And a safe systems language such as Rust is =
going to be a fantastic fit for a lot of the performance-critical code. How=
ever, there are some cases where Rust security properties could not be enfo=
rced, and these are the low-level core parts of our OSes.</p>

<p>The core parts of OSes (bootloaders, MM, etc.) involve doing unsafe thin=
gs. A classic example is memory allocators. The allocator has to construct =
a notion of objects out of a flat address range. Safe Rust can=E2=80=99t ex=
press these things and unsafe Rust doesn=E2=80=99t give us significant bene=
fits over modern C++ code that uses the type system to convey security prop=
erties.</p>

<p>These cases are interesting - on the one hand, they are a tiny part of t=
he codebase. On the other hand, these tiny parts usually run with high priv=
ileges and dramatically impact the overall system. In such cases, MTE/CHERI=
 play pretty nicely - they help ensure that whatever bugs we have in these =
areas are killed at their root cause (probabilistically/deterministically).=
</p>

<p>This is exactly why MSR, MSRC and Azure Silicon pushed for this AMAZING =
project of CheriIoT (<a href=3D"https://twitter.com/amarsaar/status/1567098=
543755722752">tweet</a>, <a href=3D"https://msrc-blog.microsoft.com/2022/09=
/06/whats-the-smallest-variety-of-cheri/">blogost</a>): scaling CHERI down =
to RISC-V32E, the smallest core RISC-V specification. <strong>I=E2=80=99m v=
ery excited about this project</strong>, and I hope once we will open-sourc=
e the ISA and the prototype, more folks across the industry could join.</p>

<h3 id=3D"huge-impact-on-the-iot-space">Huge impact on the IoT space<a clas=
s=3D"anchorjs-link " href=3D"https://saaramar.github.io/memory_safety_blogp=
ost_2022/#huge-impact-on-the-iot-space" aria-label=3D"Anchor" data-anchorjs=
-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.=
375em;"></a></h3>

<p>I=E2=80=99m very excited about this work. Scaling CHERI down to small co=
res could be a life-changer to the IoT and embedded ecosystems. It=E2=80=99=
s pretty depressing that these ecosystems are built upon a massive set of d=
ifferent codebases written in unsafe programming language and (in most case=
s) with 0 mitigations. These CHERI RV32E cores could be a fantastic solutio=
n - get the new hardware, rebuild your codebase with the new toolchain, and=
 get powerful security properties!</p>

<p>The new memory-safe microcontroller design deterministically kills spati=
al and temporal safety and allows compartmentalization RTOS.</p>

<h2 id=3D"sum-up">Sum up<a class=3D"anchorjs-link " href=3D"https://saarama=
r.github.io/memory_safety_blogpost_2022/#sum-up" aria-label=3D"Anchor" data=
-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding=
-left: 0.375em;"></a></h2>

<h3 id=3D"post-memory-safety-days">Post memory safety days<a class=3D"ancho=
rjs-link " href=3D"https://saaramar.github.io/memory_safety_blogpost_2022/#=
post-memory-safety-days" aria-label=3D"Anchor" data-anchorjs-icon=3D"=EE=A7=
=8B" style=3D"font: 1em / 1 anchorjs-icons; padding-left: 0.375em;"></a></h=
3>

<p>I hope this blogpost helps summarize some of the exciting approaches to =
mitigate memory safety.</p>

<p>Many people like to ask =E2=80=9Cwhat will be the future after memory sa=
fety is achieved?=E2=80=9D. Well, even in a perfect world, where everyone b=
uilds everything in memory-safe languages which hit all the properties we d=
efined, there would still be:</p>

<ul>
  <li>unsafe blocks</li>
  <li>logic bugs and design flaws</li>
</ul>

<p>However, while looking forward to such a future, I=E2=80=99m afraid we h=
ave a long journey until we get there.</p>

<h3 id=3D"credit">Credit<a class=3D"anchorjs-link " href=3D"https://saarama=
r.github.io/memory_safety_blogpost_2022/#credit" aria-label=3D"Anchor" data=
-anchorjs-icon=3D"=EE=A7=8B" style=3D"font: 1em / 1 anchorjs-icons; padding=
-left: 0.375em;"></a></h3>

<p>Huge thanks to <strong>David Chisnall</strong> for the great feedback! T=
he next round of beers is on me :)</p>

<p>Thanks,</p>

<p>Saar Amar (@amarsaar@infosec.exchange)</p>



     =20
    </div>
   =20
   =20
 =20

<div id=3D"rememberry__extension__root" style=3D"all: unset;"><template sha=
dowmode=3D"open"><main data-reactroot=3D""><!-- react-empty: 2 --></main></=
template></div></body></html>
------MultipartBoundary--wjIHSQZCJmHgwf21IKTve3eTQB1OPTtbiORbabUjXQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-da242d00-b111-4cfb-94a5-4cb51c5518cd@mhtml.blink

@charset "utf-8";

.anchorjs-link { opacity: 0; text-decoration: none; -webkit-font-smoothing:=
 antialiased; }

:hover > .anchorjs-link, .anchorjs-link:focus { opacity: 1; }

[data-anchorjs-icon]::after { content: attr(data-anchorjs-icon); }

@font-face { font-family: anchorjs-icons; src: url("data:n/a;base64,AAEAAAA=
LAIAAAwAwT1MvMg8yG2cAAAE4AAAAYGNtYXDp3gC3AAABpAAAAExnYXNwAAAAEAAAA9wAAAAIZ2=
x5ZlQCcfwAAAH4AAABCGhlYWQHFvHyAAAAvAAAADZoaGVhBnACFwAAAPQAAAAkaG10eASAADEAA=
AGYAAAADGxvY2EACACEAAAB8AAAAAhtYXhwAAYAVwAAARgAAAAgbmFtZQGOH9cAAAMAAAAAunBv=
c3QAAwAAAAADvAAAACAAAQAAAAEAAHzE2p9fDzz1AAkEAAAAAADRecUWAAAAANQA6R8AAAAAAoA=
CwAAAAAgAAgAAAAAAAAABAAADwP/AAAACgAAA/9MCrQABAAAAAAAAAAAAAAAAAAAAAwABAAAAAw=
BVAAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAMCQAGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJA=
AAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAg//0DwP/AAEADwABAAAAAAQAAAAAA=
AAAAAAAAIAAAAAAAAAIAAAACgAAxAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADAAAAA=
IAAgAAgAAACDpy//9//8AAAAg6cv//f///+EWNwADAAEAAAAAAAAAAAAAAAAACACEAAEAAAAAAA=
AAAAAAAAAxAAACAAQARAKAAsAAKwBUAAABIiYnJjQ3NzY2MzIWFxYUBwcGIicmNDc3NjQnJiYjI=
gYHBwYUFxYUBwYGIwciJicmNDc3NjIXFhQHBwYUFxYWMzI2Nzc2NCcmNDc2MhcWFAcHBgYjARQG=
DAUtLXoWOR8fORYtLTgKGwoKCjgaGg0gEhIgDXoaGgkJBQwHdR85Fi0tOAobCgoKOBoaDSASEiA=
NehoaCQkKGwotLXoWOR8BMwUFLYEuehYXFxYugC44CQkKGwo4GkoaDQ0NDXoaShoKGwoFBe8XFi=
6ALjgJCQobCjgaShoNDQ0NehpKGgobCgoKLYEuehYXAAAADACWAAEAAAAAAAEACAAAAAEAAAAAA=
AIAAwAIAAEAAAAAAAMACAAAAAEAAAAAAAQACAAAAAEAAAAAAAUAAQALAAEAAAAAAAYACAAAAAMA=
AQQJAAEAEAAMAAMAAQQJAAIABgAcAAMAAQQJAAMAEAAMAAMAAQQJAAQAEAAMAAMAAQQJAAUAAgA=
iAAMAAQQJAAYAEAAMYW5jaG9yanM0MDBAAGEAbgBjAGgAbwByAGoAcwA0ADAAMABAAAAAAwAAAA=
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAH//wAP") format("truetype"); }
------MultipartBoundary--wjIHSQZCJmHgwf21IKTve3eTQB1OPTtbiORbabUjXQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-5d70fe1c-fa51-485f-93dc-ec7a2186a898@mhtml.blink

@charset "utf-8";

@font-face { font-family: rbicon; src: url("chrome-extension://dipiagiiohfl=
jcicegpgffpbnjmgjcnf/fonts/rbicon.woff2") format("woff2"); font-weight: nor=
mal; font-style: normal; }
------MultipartBoundary--wjIHSQZCJmHgwf21IKTve3eTQB1OPTtbiORbabUjXQ----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://saaramar.github.io/memory_safety_blogpost_2022/assets/css/style.css?v=4faa13cab2e817edbdaf73ade3ecb64add45344b

@charset "utf-8";

html { font-family: sans-serif; text-size-adjust: 100%; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, main, menu, na=
v, section { display: block; }

summary { display: list-item; }

audio, canvas, progress, video { display: inline-block; }

audio:not([controls]) { display: none; height: 0px; }

progress { vertical-align: baseline; }

template, [hidden] { display: none !important; }

a { background-color: transparent; }

a:active, a:hover { outline-width: 0px; }

abbr[title] { border-bottom: none; text-decoration: underline dotted; }

b, strong { font-weight: inherit; }

b, strong { font-weight: bolder; }

dfn { font-style: italic; }

h1 { font-size: 2em; margin: 0.67em 0px; }

mark { background-color: rgb(255, 255, 0); color: rgb(0, 0, 0); }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

img { border-style: none; }

svg:not(:root) { overflow: hidden; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

figure { margin: 1em 40px; }

hr { box-sizing: content-box; height: 0px; overflow: visible; }

button, input, select, textarea { font: inherit; margin: 0px; }

optgroup { font-weight: bold; }

button, input { overflow: visible; }

button, select { text-transform: none; }

button, html [type=3D"button"], [type=3D"reset"], [type=3D"submit"] { appea=
rance: button; }

fieldset { border: 1px solid rgb(192, 192, 192); margin: 0px 2px; padding: =
0.35em 0.625em 0.75em; }

legend { box-sizing: border-box; color: inherit; display: table; max-width:=
 100%; padding: 0px; white-space: normal; }

textarea { overflow: auto; }

[type=3D"checkbox"], [type=3D"radio"] { box-sizing: border-box; padding: 0p=
x; }

[type=3D"number"]::-webkit-inner-spin-button, [type=3D"number"]::-webkit-ou=
ter-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

[type=3D"search"]::-webkit-search-cancel-button, [type=3D"search"]::-webkit=
-search-decoration { appearance: none; }

::-webkit-input-placeholder { color: inherit; opacity: 0.54; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

* { box-sizing: border-box; }

input, select, textarea, button { font-family: inherit; font-size: inherit;=
 line-height: inherit; }

body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetic=
a, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symb=
ol"; font-size: 14px; line-height: 1.5; color: rgb(36, 41, 46); background-=
color: rgb(255, 255, 255); }

a { color: rgb(3, 102, 214); text-decoration: none; }

a:hover { text-decoration: underline; }

b, strong { font-weight: 600; }

hr, .rule { height: 0px; margin: 15px 0px; overflow: hidden; background: tr=
ansparent; border-width: 0px 0px 1px; border-top-style: initial; border-rig=
ht-style: initial; border-left-style: initial; border-top-color: initial; b=
order-right-color: initial; border-left-color: initial; border-image: initi=
al; border-bottom-style: solid; border-bottom-color: rgb(223, 226, 229); }

hr::before, .rule::before { display: table; content: ""; }

hr::after, .rule::after { display: table; clear: both; content: ""; }

table { border-spacing: 0px; border-collapse: collapse; }

td, th { padding: 0px; }

button { cursor: pointer; border-radius: 0px; }

[hidden][hidden] { display: none !important; }

details summary { cursor: pointer; }

details:not([open]) > :not(summary) { display: none !important; }

h1, h2, h3, h4, h5, h6 { margin-top: 0px; margin-bottom: 0px; }

h1 { font-size: 32px; font-weight: 600; }

h2 { font-size: 24px; font-weight: 600; }

h3 { font-size: 20px; font-weight: 600; }

h4 { font-size: 16px; font-weight: 600; }

h5 { font-size: 14px; font-weight: 600; }

h6 { font-size: 12px; font-weight: 600; }

p { margin-top: 0px; margin-bottom: 10px; }

small { font-size: 90%; }

blockquote { margin: 0px; }

ul, ol { padding-left: 0px; margin-top: 0px; margin-bottom: 0px; }

ol ol, ul ol { list-style-type: lower-roman; }

ul ul ol, ul ol ol, ol ul ol, ol ol ol { list-style-type: lower-alpha; }

dd { margin-left: 0px; }

tt, code { font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo,=
 Courier, monospace; font-size: 12px; }

pre { margin-top: 0px; margin-bottom: 0px; font-family: SFMono-Regular, Con=
solas, "Liberation Mono", Menlo, Courier, monospace; font-size: 12px; }

.octicon { vertical-align: text-bottom; }

.anim-fade-in { animation-name: fade-in; animation-duration: 1s; animation-=
timing-function: ease-in-out; }

.anim-fade-in.fast { animation-duration: 300ms; }

@keyframes fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.anim-fade-out { animation-name: fade-out; animation-duration: 1s; animatio=
n-timing-function: ease-out; }

.anim-fade-out.fast { animation-duration: 0.3s; }

@keyframes fade-out {=20
  0% { opacity: 1; }
  100% { opacity: 0; }
}

.anim-fade-up { opacity: 0; animation-name: fade-up; animation-duration: 0.=
3s; animation-fill-mode: forwards; animation-timing-function: ease-out; ani=
mation-delay: 1s; }

@keyframes fade-up {=20
  0% { opacity: 0.8; transform: translateY(100%); }
  100% { opacity: 1; transform: translateY(0px); }
}

.anim-fade-down { animation-name: fade-down; animation-duration: 0.3s; anim=
ation-fill-mode: forwards; animation-timing-function: ease-in; }

@keyframes fade-down {=20
  0% { opacity: 1; transform: translateY(0px); }
  100% { opacity: 0.5; transform: translateY(100%); }
}

.anim-grow-x { width: 0%; animation-name: grow-x; animation-duration: 0.3s;=
 animation-fill-mode: forwards; animation-timing-function: ease; animation-=
delay: 0.5s; }

@keyframes grow-x {=20
  100% { width: 100%; }
}

.anim-shrink-x { animation-name: shrink-x; animation-duration: 0.3s; animat=
ion-fill-mode: forwards; animation-timing-function: ease-in-out; animation-=
delay: 0.5s; }

@keyframes shrink-x {=20
  100% { width: 0%; }
}

.anim-scale-in { animation-name: scale-in; animation-duration: 0.15s; anima=
tion-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5); }

@keyframes scale-in {=20
  0% { opacity: 0; transform: scale(0.5); }
  100% { opacity: 1; transform: scale(1); }
}

.anim-pulse { animation-name: pulse; animation-duration: 2s; animation-timi=
ng-function: linear; animation-iteration-count: infinite; }

@keyframes pulse {=20
  0% { opacity: 0.3; }
  10% { opacity: 1; }
  100% { opacity: 0.3; }
}

.anim-pulse-in { animation-name: pulse-in; animation-duration: 0.5s; }

@keyframes pulse-in {=20
  0% { transform: scale3d(1, 1, 1); }
  50% { transform: scale3d(1.1, 1.1, 1.1); }
  100% { transform: scale3d(1, 1, 1); }
}

.hover-grow { transition: transform 0.3s ease 0s; backface-visibility: hidd=
en; }

.hover-grow:hover { transform: scale(1.025); }

.border { border: 1px solid rgb(225, 228, 232) !important; }

.border-y { border-top: 1px solid rgb(225, 228, 232) !important; border-bot=
tom: 1px solid rgb(225, 228, 232) !important; }

.border-0 { border: 0px !important; }

.border-dashed { border-style: dashed !important; }

.border-blue { border-color: rgb(3, 102, 214) !important; }

.border-blue-light { border-color: rgb(200, 225, 255) !important; }

.border-green { border-color: rgb(52, 208, 88) !important; }

.border-green-light { border-color: rgb(162, 203, 172) !important; }

.border-red { border-color: rgb(215, 58, 73) !important; }

.border-red-light { border-color: rgb(206, 160, 165) !important; }

.border-purple { border-color: rgb(111, 66, 193) !important; }

.border-yellow { border-color: rgb(217, 208, 165) !important; }

.border-gray-light { border-color: rgb(234, 236, 239) !important; }

.border-gray-dark { border-color: rgb(209, 213, 218) !important; }

.border-black-fade { border-color: rgba(27, 31, 35, 0.15) !important; }

.border-top { border-top: 1px solid rgb(225, 228, 232) !important; }

.border-right { border-right: 1px solid rgb(225, 228, 232) !important; }

.border-bottom { border-bottom: 1px solid rgb(225, 228, 232) !important; }

.border-left { border-left: 1px solid rgb(225, 228, 232) !important; }

.border-top-0 { border-top: 0px !important; }

.border-right-0 { border-right: 0px !important; }

.border-bottom-0 { border-bottom: 0px !important; }

.border-left-0 { border-left: 0px !important; }

.rounded-0 { border-radius: 0px !important; }

.rounded-1 { border-radius: 3px !important; }

.rounded-2 { border-radius: 6px !important; }

.rounded-top-0 { border-top-left-radius: 0px !important; border-top-right-r=
adius: 0px !important; }

.rounded-top-1 { border-top-left-radius: 3px !important; border-top-right-r=
adius: 3px !important; }

.rounded-top-2 { border-top-left-radius: 6px !important; border-top-right-r=
adius: 6px !important; }

.rounded-right-0 { border-top-right-radius: 0px !important; border-bottom-r=
ight-radius: 0px !important; }

.rounded-right-1 { border-top-right-radius: 3px !important; border-bottom-r=
ight-radius: 3px !important; }

.rounded-right-2 { border-top-right-radius: 6px !important; border-bottom-r=
ight-radius: 6px !important; }

.rounded-bottom-0 { border-bottom-right-radius: 0px !important; border-bott=
om-left-radius: 0px !important; }

.rounded-bottom-1 { border-bottom-right-radius: 3px !important; border-bott=
om-left-radius: 3px !important; }

.rounded-bottom-2 { border-bottom-right-radius: 6px !important; border-bott=
om-left-radius: 6px !important; }

.rounded-left-0 { border-bottom-left-radius: 0px !important; border-top-lef=
t-radius: 0px !important; }

.rounded-left-1 { border-bottom-left-radius: 3px !important; border-top-lef=
t-radius: 3px !important; }

.rounded-left-2 { border-bottom-left-radius: 6px !important; border-top-lef=
t-radius: 6px !important; }

@media (min-width: 544px) {
  .border-sm-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-sm-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-sm-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-sm-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-sm-top-0 { border-top: 0px !important; }
  .border-sm-right-0 { border-right: 0px !important; }
  .border-sm-bottom-0 { border-bottom: 0px !important; }
  .border-sm-left-0 { border-left: 0px !important; }
  .rounded-sm-0 { border-radius: 0px !important; }
  .rounded-sm-1 { border-radius: 3px !important; }
  .rounded-sm-2 { border-radius: 6px !important; }
  .rounded-sm-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-sm-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-sm-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-sm-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-sm-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-sm-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-sm-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-sm-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-sm-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-sm-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-sm-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-sm-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

@media (min-width: 768px) {
  .border-md-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-md-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-md-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-md-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-md-top-0 { border-top: 0px !important; }
  .border-md-right-0 { border-right: 0px !important; }
  .border-md-bottom-0 { border-bottom: 0px !important; }
  .border-md-left-0 { border-left: 0px !important; }
  .rounded-md-0 { border-radius: 0px !important; }
  .rounded-md-1 { border-radius: 3px !important; }
  .rounded-md-2 { border-radius: 6px !important; }
  .rounded-md-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-md-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-md-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-md-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-md-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-md-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-md-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-md-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-md-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-md-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-md-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-md-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

@media (min-width: 1012px) {
  .border-lg-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-lg-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-lg-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-lg-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-lg-top-0 { border-top: 0px !important; }
  .border-lg-right-0 { border-right: 0px !important; }
  .border-lg-bottom-0 { border-bottom: 0px !important; }
  .border-lg-left-0 { border-left: 0px !important; }
  .rounded-lg-0 { border-radius: 0px !important; }
  .rounded-lg-1 { border-radius: 3px !important; }
  .rounded-lg-2 { border-radius: 6px !important; }
  .rounded-lg-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-lg-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-lg-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-lg-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-lg-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-lg-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-lg-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-lg-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-lg-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-lg-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-lg-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-lg-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

@media (min-width: 1280px) {
  .border-xl-top { border-top: 1px solid rgb(225, 228, 232) !important; }
  .border-xl-right { border-right: 1px solid rgb(225, 228, 232) !important;=
 }
  .border-xl-bottom { border-bottom: 1px solid rgb(225, 228, 232) !importan=
t; }
  .border-xl-left { border-left: 1px solid rgb(225, 228, 232) !important; }
  .border-xl-top-0 { border-top: 0px !important; }
  .border-xl-right-0 { border-right: 0px !important; }
  .border-xl-bottom-0 { border-bottom: 0px !important; }
  .border-xl-left-0 { border-left: 0px !important; }
  .rounded-xl-0 { border-radius: 0px !important; }
  .rounded-xl-1 { border-radius: 3px !important; }
  .rounded-xl-2 { border-radius: 6px !important; }
  .rounded-xl-top-0 { border-top-left-radius: 0px !important; border-top-ri=
ght-radius: 0px !important; }
  .rounded-xl-top-1 { border-top-left-radius: 3px !important; border-top-ri=
ght-radius: 3px !important; }
  .rounded-xl-top-2 { border-top-left-radius: 6px !important; border-top-ri=
ght-radius: 6px !important; }
  .rounded-xl-right-0 { border-top-right-radius: 0px !important; border-bot=
tom-right-radius: 0px !important; }
  .rounded-xl-right-1 { border-top-right-radius: 3px !important; border-bot=
tom-right-radius: 3px !important; }
  .rounded-xl-right-2 { border-top-right-radius: 6px !important; border-bot=
tom-right-radius: 6px !important; }
  .rounded-xl-bottom-0 { border-bottom-right-radius: 0px !important; border=
-bottom-left-radius: 0px !important; }
  .rounded-xl-bottom-1 { border-bottom-right-radius: 3px !important; border=
-bottom-left-radius: 3px !important; }
  .rounded-xl-bottom-2 { border-bottom-right-radius: 6px !important; border=
-bottom-left-radius: 6px !important; }
  .rounded-xl-left-0 { border-bottom-left-radius: 0px !important; border-to=
p-left-radius: 0px !important; }
  .rounded-xl-left-1 { border-bottom-left-radius: 3px !important; border-to=
p-left-radius: 3px !important; }
  .rounded-xl-left-2 { border-bottom-left-radius: 6px !important; border-to=
p-left-radius: 6px !important; }
}

.circle { border-radius: 50% !important; }

.box-shadow { box-shadow: rgba(27, 31, 35, 0.1) 0px 1px 1px !important; }

.box-shadow-medium { box-shadow: rgba(27, 31, 35, 0.15) 0px 1px 5px !import=
ant; }

.box-shadow-large { box-shadow: rgba(27, 31, 35, 0.15) 0px 1px 15px !import=
ant; }

.box-shadow-extra-large { box-shadow: rgba(27, 31, 35, 0.07) 0px 10px 50px =
!important; }

.box-shadow-none { box-shadow: none !important; }

.bg-white { background-color: rgb(255, 255, 255) !important; }

.bg-blue { background-color: rgb(3, 102, 214) !important; }

.bg-blue-light { background-color: rgb(241, 248, 255) !important; }

.bg-gray-dark { background-color: rgb(36, 41, 46) !important; }

.bg-gray { background-color: rgb(246, 248, 250) !important; }

.bg-gray-light { background-color: rgb(250, 251, 252) !important; }

.bg-green { background-color: rgb(40, 167, 69) !important; }

.bg-green-light { background-color: rgb(220, 255, 228) !important; }

.bg-red { background-color: rgb(215, 58, 73) !important; }

.bg-red-light { background-color: rgb(255, 220, 224) !important; }

.bg-yellow { background-color: rgb(255, 211, 61) !important; }

.bg-yellow-light { background-color: rgb(255, 245, 177) !important; }

.bg-purple { background-color: rgb(111, 66, 193) !important; }

.bg-purple-light { background-color: rgb(245, 240, 255) !important; }

.bg-shade-gradient { background-image: linear-gradient(rgba(27, 31, 35, 0.0=
67), rgba(27, 31, 35, 0)) !important; background-repeat: no-repeat !importa=
nt; background-size: 100% 200px !important; }

.text-blue { color: rgb(3, 102, 214) !important; }

.text-red { color: rgb(203, 36, 49) !important; }

.text-gray-light { color: rgb(106, 115, 125) !important; }

.text-gray { color: rgb(88, 96, 105) !important; }

.text-gray-dark { color: rgb(36, 41, 46) !important; }

.text-green { color: rgb(40, 167, 69) !important; }

.text-orange { color: rgb(160, 65, 0) !important; }

.text-orange-light { color: rgb(227, 98, 9) !important; }

.text-purple { color: rgb(111, 66, 193) !important; }

.text-white { color: rgb(255, 255, 255) !important; }

.text-inherit { color: inherit !important; }

.text-pending { color: rgb(176, 136, 0) !important; }

.bg-pending { color: rgb(219, 171, 9) !important; }

.link-gray { color: rgb(88, 96, 105) !important; }

.link-gray:hover { color: rgb(3, 102, 214) !important; }

.link-gray-dark { color: rgb(36, 41, 46) !important; }

.link-gray-dark:hover { color: rgb(3, 102, 214) !important; }

.link-hover-blue:hover { color: rgb(3, 102, 214) !important; }

.muted-link { color: rgb(88, 96, 105) !important; }

.muted-link:hover { text-decoration: none; color: rgb(3, 102, 214) !importa=
nt; }

.details-overlay[open] > summary::before { position: fixed; inset: 0px; z-i=
ndex: 80; display: block; cursor: default; content: " "; background: transp=
arent; }

.details-overlay-dark[open] > summary::before { z-index: 99; background: rg=
ba(27, 31, 35, 0.5); }

.flex-row { flex-direction: row !important; }

.flex-row-reverse { flex-direction: row-reverse !important; }

.flex-column { flex-direction: column !important; }

.flex-wrap { flex-wrap: wrap !important; }

.flex-nowrap { flex-wrap: nowrap !important; }

.flex-justify-start { justify-content: flex-start !important; }

.flex-justify-end { justify-content: flex-end !important; }

.flex-justify-center { justify-content: center !important; }

.flex-justify-between { justify-content: space-between !important; }

.flex-justify-around { justify-content: space-around !important; }

.flex-items-start { align-items: flex-start !important; }

.flex-items-end { align-items: flex-end !important; }

.flex-items-center { align-items: center !important; }

.flex-items-baseline { align-items: baseline !important; }

.flex-items-stretch { align-items: stretch !important; }

.flex-content-start { align-content: flex-start !important; }

.flex-content-end { align-content: flex-end !important; }

.flex-content-center { align-content: center !important; }

.flex-content-between { align-content: space-between !important; }

.flex-content-around { align-content: space-around !important; }

.flex-content-stretch { align-content: stretch !important; }

.flex-auto { flex: 1 1 auto !important; }

.flex-shrink-0 { flex-shrink: 0 !important; }

.flex-self-auto { align-self: auto !important; }

.flex-self-start { align-self: flex-start !important; }

.flex-self-end { align-self: flex-end !important; }

.flex-self-center { align-self: center !important; }

.flex-self-baseline { align-self: baseline !important; }

.flex-self-stretch { align-self: stretch !important; }

.flex-item-equal { flex-grow: 1; flex-basis: 0px; }

@media (min-width: 544px) {
  .flex-sm-row { flex-direction: row !important; }
  .flex-sm-row-reverse { flex-direction: row-reverse !important; }
  .flex-sm-column { flex-direction: column !important; }
  .flex-sm-wrap { flex-wrap: wrap !important; }
  .flex-sm-nowrap { flex-wrap: nowrap !important; }
  .flex-sm-justify-start { justify-content: flex-start !important; }
  .flex-sm-justify-end { justify-content: flex-end !important; }
  .flex-sm-justify-center { justify-content: center !important; }
  .flex-sm-justify-between { justify-content: space-between !important; }
  .flex-sm-justify-around { justify-content: space-around !important; }
  .flex-sm-items-start { align-items: flex-start !important; }
  .flex-sm-items-end { align-items: flex-end !important; }
  .flex-sm-items-center { align-items: center !important; }
  .flex-sm-items-baseline { align-items: baseline !important; }
  .flex-sm-items-stretch { align-items: stretch !important; }
  .flex-sm-content-start { align-content: flex-start !important; }
  .flex-sm-content-end { align-content: flex-end !important; }
  .flex-sm-content-center { align-content: center !important; }
  .flex-sm-content-between { align-content: space-between !important; }
  .flex-sm-content-around { align-content: space-around !important; }
  .flex-sm-content-stretch { align-content: stretch !important; }
  .flex-sm-auto { flex: 1 1 auto !important; }
  .flex-sm-shrink-0 { flex-shrink: 0 !important; }
  .flex-sm-self-auto { align-self: auto !important; }
  .flex-sm-self-start { align-self: flex-start !important; }
  .flex-sm-self-end { align-self: flex-end !important; }
  .flex-sm-self-center { align-self: center !important; }
  .flex-sm-self-baseline { align-self: baseline !important; }
  .flex-sm-self-stretch { align-self: stretch !important; }
  .flex-sm-item-equal { flex-grow: 1; flex-basis: 0px; }
}

@media (min-width: 768px) {
  .flex-md-row { flex-direction: row !important; }
  .flex-md-row-reverse { flex-direction: row-reverse !important; }
  .flex-md-column { flex-direction: column !important; }
  .flex-md-wrap { flex-wrap: wrap !important; }
  .flex-md-nowrap { flex-wrap: nowrap !important; }
  .flex-md-justify-start { justify-content: flex-start !important; }
  .flex-md-justify-end { justify-content: flex-end !important; }
  .flex-md-justify-center { justify-content: center !important; }
  .flex-md-justify-between { justify-content: space-between !important; }
  .flex-md-justify-around { justify-content: space-around !important; }
  .flex-md-items-start { align-items: flex-start !important; }
  .flex-md-items-end { align-items: flex-end !important; }
  .flex-md-items-center { align-items: center !important; }
  .flex-md-items-baseline { align-items: baseline !important; }
  .flex-md-items-stretch { align-items: stretch !important; }
  .flex-md-content-start { align-content: flex-start !important; }
  .flex-md-content-end { align-content: flex-end !important; }
  .flex-md-content-center { align-content: center !important; }
  .flex-md-content-between { align-content: space-between !important; }
  .flex-md-content-around { align-content: space-around !important; }
  .flex-md-content-stretch { align-content: stretch !important; }
  .flex-md-auto { flex: 1 1 auto !important; }
  .flex-md-shrink-0 { flex-shrink: 0 !important; }
  .flex-md-self-auto { align-self: auto !important; }
  .flex-md-self-start { align-self: flex-start !important; }
  .flex-md-self-end { align-self: flex-end !important; }
  .flex-md-self-center { align-self: center !important; }
  .flex-md-self-baseline { align-self: baseline !important; }
  .flex-md-self-stretch { align-self: stretch !important; }
  .flex-md-item-equal { flex-grow: 1; flex-basis: 0px; }
}

@media (min-width: 1012px) {
  .flex-lg-row { flex-direction: row !important; }
  .flex-lg-row-reverse { flex-direction: row-reverse !important; }
  .flex-lg-column { flex-direction: column !important; }
  .flex-lg-wrap { flex-wrap: wrap !important; }
  .flex-lg-nowrap { flex-wrap: nowrap !important; }
  .flex-lg-justify-start { justify-content: flex-start !important; }
  .flex-lg-justify-end { justify-content: flex-end !important; }
  .flex-lg-justify-center { justify-content: center !important; }
  .flex-lg-justify-between { justify-content: space-between !important; }
  .flex-lg-justify-around { justify-content: space-around !important; }
  .flex-lg-items-start { align-items: flex-start !important; }
  .flex-lg-items-end { align-items: flex-end !important; }
  .flex-lg-items-center { align-items: center !important; }
  .flex-lg-items-baseline { align-items: baseline !important; }
  .flex-lg-items-stretch { align-items: stretch !important; }
  .flex-lg-content-start { align-content: flex-start !important; }
  .flex-lg-content-end { align-content: flex-end !important; }
  .flex-lg-content-center { align-content: center !important; }
  .flex-lg-content-between { align-content: space-between !important; }
  .flex-lg-content-around { align-content: space-around !important; }
  .flex-lg-content-stretch { align-content: stretch !important; }
  .flex-lg-auto { flex: 1 1 auto !important; }
  .flex-lg-shrink-0 { flex-shrink: 0 !important; }
  .flex-lg-self-auto { align-self: auto !important; }
  .flex-lg-self-start { align-self: flex-start !important; }
  .flex-lg-self-end { align-self: flex-end !important; }
  .flex-lg-self-center { align-self: center !important; }
  .flex-lg-self-baseline { align-self: baseline !important; }
  .flex-lg-self-stretch { align-self: stretch !important; }
  .flex-lg-item-equal { flex-grow: 1; flex-basis: 0px; }
}

@media (min-width: 1280px) {
  .flex-xl-row { flex-direction: row !important; }
  .flex-xl-row-reverse { flex-direction: row-reverse !important; }
  .flex-xl-column { flex-direction: column !important; }
  .flex-xl-wrap { flex-wrap: wrap !important; }
  .flex-xl-nowrap { flex-wrap: nowrap !important; }
  .flex-xl-justify-start { justify-content: flex-start !important; }
  .flex-xl-justify-end { justify-content: flex-end !important; }
  .flex-xl-justify-center { justify-content: center !important; }
  .flex-xl-justify-between { justify-content: space-between !important; }
  .flex-xl-justify-around { justify-content: space-around !important; }
  .flex-xl-items-start { align-items: flex-start !important; }
  .flex-xl-items-end { align-items: flex-end !important; }
  .flex-xl-items-center { align-items: center !important; }
  .flex-xl-items-baseline { align-items: baseline !important; }
  .flex-xl-items-stretch { align-items: stretch !important; }
  .flex-xl-content-start { align-content: flex-start !important; }
  .flex-xl-content-end { align-content: flex-end !important; }
  .flex-xl-content-center { align-content: center !important; }
  .flex-xl-content-between { align-content: space-between !important; }
  .flex-xl-content-around { align-content: space-around !important; }
  .flex-xl-content-stretch { align-content: stretch !important; }
  .flex-xl-auto { flex: 1 1 auto !important; }
  .flex-xl-shrink-0 { flex-shrink: 0 !important; }
  .flex-xl-self-auto { align-self: auto !important; }
  .flex-xl-self-start { align-self: flex-start !important; }
  .flex-xl-self-end { align-self: flex-end !important; }
  .flex-xl-self-center { align-self: center !important; }
  .flex-xl-self-baseline { align-self: baseline !important; }
  .flex-xl-self-stretch { align-self: stretch !important; }
  .flex-xl-item-equal { flex-grow: 1; flex-basis: 0px; }
}

.position-static { position: static !important; }

.position-relative { position: relative !important; }

.position-absolute { position: absolute !important; }

.position-fixed { position: fixed !important; }

.top-0 { top: 0px !important; }

.right-0 { right: 0px !important; }

.bottom-0 { bottom: 0px !important; }

.left-0 { left: 0px !important; }

.v-align-middle { vertical-align: middle !important; }

.v-align-top { vertical-align: top !important; }

.v-align-bottom { vertical-align: bottom !important; }

.v-align-text-top { vertical-align: text-top !important; }

.v-align-text-bottom { vertical-align: text-bottom !important; }

.v-align-baseline { vertical-align: baseline !important; }

.overflow-hidden { overflow: hidden !important; }

.overflow-scroll { overflow: scroll !important; }

.overflow-auto { overflow: auto !important; }

.clearfix::before { display: table; content: ""; }

.clearfix::after { display: table; clear: both; content: ""; }

.float-left { float: left !important; }

.float-right { float: right !important; }

.float-none { float: none !important; }

@media (min-width: 544px) {
  .float-sm-left { float: left !important; }
  .float-sm-right { float: right !important; }
  .float-sm-none { float: none !important; }
}

@media (min-width: 768px) {
  .float-md-left { float: left !important; }
  .float-md-right { float: right !important; }
  .float-md-none { float: none !important; }
}

@media (min-width: 1012px) {
  .float-lg-left { float: left !important; }
  .float-lg-right { float: right !important; }
  .float-lg-none { float: none !important; }
}

@media (min-width: 1280px) {
  .float-xl-left { float: left !important; }
  .float-xl-right { float: right !important; }
  .float-xl-none { float: none !important; }
}

.width-fit { max-width: 100% !important; }

.width-full { width: 100% !important; }

.height-fit { max-height: 100% !important; }

.height-full { height: 100% !important; }

.min-width-0 { min-width: 0px !important; }

.direction-rtl { direction: rtl !important; }

.direction-ltr { direction: ltr !important; }

@media (min-width: 544px) {
  .direction-sm-rtl { direction: rtl !important; }
  .direction-sm-ltr { direction: ltr !important; }
}

@media (min-width: 768px) {
  .direction-md-rtl { direction: rtl !important; }
  .direction-md-ltr { direction: ltr !important; }
}

@media (min-width: 1012px) {
  .direction-lg-rtl { direction: rtl !important; }
  .direction-lg-ltr { direction: ltr !important; }
}

@media (min-width: 1280px) {
  .direction-xl-rtl { direction: rtl !important; }
  .direction-xl-ltr { direction: ltr !important; }
}

.m-0 { margin: 0px !important; }

.mt-0 { margin-top: 0px !important; }

.mr-0 { margin-right: 0px !important; }

.mb-0 { margin-bottom: 0px !important; }

.ml-0 { margin-left: 0px !important; }

.mx-0 { margin-right: 0px !important; margin-left: 0px !important; }

.my-0 { margin-top: 0px !important; margin-bottom: 0px !important; }

.m-1 { margin: 4px !important; }

.mt-1 { margin-top: 4px !important; }

.mr-1 { margin-right: 4px !important; }

.mb-1 { margin-bottom: 4px !important; }

.ml-1 { margin-left: 4px !important; }

.mt-n1 { margin-top: -4px !important; }

.mr-n1 { margin-right: -4px !important; }

.mb-n1 { margin-bottom: -4px !important; }

.ml-n1 { margin-left: -4px !important; }

.mx-1 { margin-right: 4px !important; margin-left: 4px !important; }

.my-1 { margin-top: 4px !important; margin-bottom: 4px !important; }

.m-2 { margin: 8px !important; }

.mt-2 { margin-top: 8px !important; }

.mr-2 { margin-right: 8px !important; }

.mb-2 { margin-bottom: 8px !important; }

.ml-2 { margin-left: 8px !important; }

.mt-n2 { margin-top: -8px !important; }

.mr-n2 { margin-right: -8px !important; }

.mb-n2 { margin-bottom: -8px !important; }

.ml-n2 { margin-left: -8px !important; }

.mx-2 { margin-right: 8px !important; margin-left: 8px !important; }

.my-2 { margin-top: 8px !important; margin-bottom: 8px !important; }

.m-3 { margin: 16px !important; }

.mt-3 { margin-top: 16px !important; }

.mr-3 { margin-right: 16px !important; }

.mb-3 { margin-bottom: 16px !important; }

.ml-3 { margin-left: 16px !important; }

.mt-n3 { margin-top: -16px !important; }

.mr-n3 { margin-right: -16px !important; }

.mb-n3 { margin-bottom: -16px !important; }

.ml-n3 { margin-left: -16px !important; }

.mx-3 { margin-right: 16px !important; margin-left: 16px !important; }

.my-3 { margin-top: 16px !important; margin-bottom: 16px !important; }

.m-4 { margin: 24px !important; }

.mt-4 { margin-top: 24px !important; }

.mr-4 { margin-right: 24px !important; }

.mb-4 { margin-bottom: 24px !important; }

.ml-4 { margin-left: 24px !important; }

.mt-n4 { margin-top: -24px !important; }

.mr-n4 { margin-right: -24px !important; }

.mb-n4 { margin-bottom: -24px !important; }

.ml-n4 { margin-left: -24px !important; }

.mx-4 { margin-right: 24px !important; margin-left: 24px !important; }

.my-4 { margin-top: 24px !important; margin-bottom: 24px !important; }

.m-5 { margin: 32px !important; }

.mt-5 { margin-top: 32px !important; }

.mr-5 { margin-right: 32px !important; }

.mb-5 { margin-bottom: 32px !important; }

.ml-5 { margin-left: 32px !important; }

.mt-n5 { margin-top: -32px !important; }

.mr-n5 { margin-right: -32px !important; }

.mb-n5 { margin-bottom: -32px !important; }

.ml-n5 { margin-left: -32px !important; }

.mx-5 { margin-right: 32px !important; margin-left: 32px !important; }

.my-5 { margin-top: 32px !important; margin-bottom: 32px !important; }

.m-6 { margin: 40px !important; }

.mt-6 { margin-top: 40px !important; }

.mr-6 { margin-right: 40px !important; }

.mb-6 { margin-bottom: 40px !important; }

.ml-6 { margin-left: 40px !important; }

.mt-n6 { margin-top: -40px !important; }

.mr-n6 { margin-right: -40px !important; }

.mb-n6 { margin-bottom: -40px !important; }

.ml-n6 { margin-left: -40px !important; }

.mx-6 { margin-right: 40px !important; margin-left: 40px !important; }

.my-6 { margin-top: 40px !important; margin-bottom: 40px !important; }

.mx-auto { margin-right: auto !important; margin-left: auto !important; }

@media (min-width: 544px) {
  .m-sm-0 { margin: 0px !important; }
  .mt-sm-0 { margin-top: 0px !important; }
  .mr-sm-0 { margin-right: 0px !important; }
  .mb-sm-0 { margin-bottom: 0px !important; }
  .ml-sm-0 { margin-left: 0px !important; }
  .mx-sm-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-sm-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-sm-1 { margin: 4px !important; }
  .mt-sm-1 { margin-top: 4px !important; }
  .mr-sm-1 { margin-right: 4px !important; }
  .mb-sm-1 { margin-bottom: 4px !important; }
  .ml-sm-1 { margin-left: 4px !important; }
  .mt-sm-n1 { margin-top: -4px !important; }
  .mr-sm-n1 { margin-right: -4px !important; }
  .mb-sm-n1 { margin-bottom: -4px !important; }
  .ml-sm-n1 { margin-left: -4px !important; }
  .mx-sm-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-sm-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-sm-2 { margin: 8px !important; }
  .mt-sm-2 { margin-top: 8px !important; }
  .mr-sm-2 { margin-right: 8px !important; }
  .mb-sm-2 { margin-bottom: 8px !important; }
  .ml-sm-2 { margin-left: 8px !important; }
  .mt-sm-n2 { margin-top: -8px !important; }
  .mr-sm-n2 { margin-right: -8px !important; }
  .mb-sm-n2 { margin-bottom: -8px !important; }
  .ml-sm-n2 { margin-left: -8px !important; }
  .mx-sm-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-sm-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-sm-3 { margin: 16px !important; }
  .mt-sm-3 { margin-top: 16px !important; }
  .mr-sm-3 { margin-right: 16px !important; }
  .mb-sm-3 { margin-bottom: 16px !important; }
  .ml-sm-3 { margin-left: 16px !important; }
  .mt-sm-n3 { margin-top: -16px !important; }
  .mr-sm-n3 { margin-right: -16px !important; }
  .mb-sm-n3 { margin-bottom: -16px !important; }
  .ml-sm-n3 { margin-left: -16px !important; }
  .mx-sm-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-sm-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-sm-4 { margin: 24px !important; }
  .mt-sm-4 { margin-top: 24px !important; }
  .mr-sm-4 { margin-right: 24px !important; }
  .mb-sm-4 { margin-bottom: 24px !important; }
  .ml-sm-4 { margin-left: 24px !important; }
  .mt-sm-n4 { margin-top: -24px !important; }
  .mr-sm-n4 { margin-right: -24px !important; }
  .mb-sm-n4 { margin-bottom: -24px !important; }
  .ml-sm-n4 { margin-left: -24px !important; }
  .mx-sm-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-sm-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-sm-5 { margin: 32px !important; }
  .mt-sm-5 { margin-top: 32px !important; }
  .mr-sm-5 { margin-right: 32px !important; }
  .mb-sm-5 { margin-bottom: 32px !important; }
  .ml-sm-5 { margin-left: 32px !important; }
  .mt-sm-n5 { margin-top: -32px !important; }
  .mr-sm-n5 { margin-right: -32px !important; }
  .mb-sm-n5 { margin-bottom: -32px !important; }
  .ml-sm-n5 { margin-left: -32px !important; }
  .mx-sm-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-sm-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-sm-6 { margin: 40px !important; }
  .mt-sm-6 { margin-top: 40px !important; }
  .mr-sm-6 { margin-right: 40px !important; }
  .mb-sm-6 { margin-bottom: 40px !important; }
  .ml-sm-6 { margin-left: 40px !important; }
  .mt-sm-n6 { margin-top: -40px !important; }
  .mr-sm-n6 { margin-right: -40px !important; }
  .mb-sm-n6 { margin-bottom: -40px !important; }
  .ml-sm-n6 { margin-left: -40px !important; }
  .mx-sm-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-sm-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-sm-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

@media (min-width: 768px) {
  .m-md-0 { margin: 0px !important; }
  .mt-md-0 { margin-top: 0px !important; }
  .mr-md-0 { margin-right: 0px !important; }
  .mb-md-0 { margin-bottom: 0px !important; }
  .ml-md-0 { margin-left: 0px !important; }
  .mx-md-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-md-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-md-1 { margin: 4px !important; }
  .mt-md-1 { margin-top: 4px !important; }
  .mr-md-1 { margin-right: 4px !important; }
  .mb-md-1 { margin-bottom: 4px !important; }
  .ml-md-1 { margin-left: 4px !important; }
  .mt-md-n1 { margin-top: -4px !important; }
  .mr-md-n1 { margin-right: -4px !important; }
  .mb-md-n1 { margin-bottom: -4px !important; }
  .ml-md-n1 { margin-left: -4px !important; }
  .mx-md-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-md-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-md-2 { margin: 8px !important; }
  .mt-md-2 { margin-top: 8px !important; }
  .mr-md-2 { margin-right: 8px !important; }
  .mb-md-2 { margin-bottom: 8px !important; }
  .ml-md-2 { margin-left: 8px !important; }
  .mt-md-n2 { margin-top: -8px !important; }
  .mr-md-n2 { margin-right: -8px !important; }
  .mb-md-n2 { margin-bottom: -8px !important; }
  .ml-md-n2 { margin-left: -8px !important; }
  .mx-md-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-md-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-md-3 { margin: 16px !important; }
  .mt-md-3 { margin-top: 16px !important; }
  .mr-md-3 { margin-right: 16px !important; }
  .mb-md-3 { margin-bottom: 16px !important; }
  .ml-md-3 { margin-left: 16px !important; }
  .mt-md-n3 { margin-top: -16px !important; }
  .mr-md-n3 { margin-right: -16px !important; }
  .mb-md-n3 { margin-bottom: -16px !important; }
  .ml-md-n3 { margin-left: -16px !important; }
  .mx-md-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-md-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-md-4 { margin: 24px !important; }
  .mt-md-4 { margin-top: 24px !important; }
  .mr-md-4 { margin-right: 24px !important; }
  .mb-md-4 { margin-bottom: 24px !important; }
  .ml-md-4 { margin-left: 24px !important; }
  .mt-md-n4 { margin-top: -24px !important; }
  .mr-md-n4 { margin-right: -24px !important; }
  .mb-md-n4 { margin-bottom: -24px !important; }
  .ml-md-n4 { margin-left: -24px !important; }
  .mx-md-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-md-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-md-5 { margin: 32px !important; }
  .mt-md-5 { margin-top: 32px !important; }
  .mr-md-5 { margin-right: 32px !important; }
  .mb-md-5 { margin-bottom: 32px !important; }
  .ml-md-5 { margin-left: 32px !important; }
  .mt-md-n5 { margin-top: -32px !important; }
  .mr-md-n5 { margin-right: -32px !important; }
  .mb-md-n5 { margin-bottom: -32px !important; }
  .ml-md-n5 { margin-left: -32px !important; }
  .mx-md-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-md-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-md-6 { margin: 40px !important; }
  .mt-md-6 { margin-top: 40px !important; }
  .mr-md-6 { margin-right: 40px !important; }
  .mb-md-6 { margin-bottom: 40px !important; }
  .ml-md-6 { margin-left: 40px !important; }
  .mt-md-n6 { margin-top: -40px !important; }
  .mr-md-n6 { margin-right: -40px !important; }
  .mb-md-n6 { margin-bottom: -40px !important; }
  .ml-md-n6 { margin-left: -40px !important; }
  .mx-md-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-md-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-md-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

@media (min-width: 1012px) {
  .m-lg-0 { margin: 0px !important; }
  .mt-lg-0 { margin-top: 0px !important; }
  .mr-lg-0 { margin-right: 0px !important; }
  .mb-lg-0 { margin-bottom: 0px !important; }
  .ml-lg-0 { margin-left: 0px !important; }
  .mx-lg-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-lg-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-lg-1 { margin: 4px !important; }
  .mt-lg-1 { margin-top: 4px !important; }
  .mr-lg-1 { margin-right: 4px !important; }
  .mb-lg-1 { margin-bottom: 4px !important; }
  .ml-lg-1 { margin-left: 4px !important; }
  .mt-lg-n1 { margin-top: -4px !important; }
  .mr-lg-n1 { margin-right: -4px !important; }
  .mb-lg-n1 { margin-bottom: -4px !important; }
  .ml-lg-n1 { margin-left: -4px !important; }
  .mx-lg-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-lg-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-lg-2 { margin: 8px !important; }
  .mt-lg-2 { margin-top: 8px !important; }
  .mr-lg-2 { margin-right: 8px !important; }
  .mb-lg-2 { margin-bottom: 8px !important; }
  .ml-lg-2 { margin-left: 8px !important; }
  .mt-lg-n2 { margin-top: -8px !important; }
  .mr-lg-n2 { margin-right: -8px !important; }
  .mb-lg-n2 { margin-bottom: -8px !important; }
  .ml-lg-n2 { margin-left: -8px !important; }
  .mx-lg-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-lg-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-lg-3 { margin: 16px !important; }
  .mt-lg-3 { margin-top: 16px !important; }
  .mr-lg-3 { margin-right: 16px !important; }
  .mb-lg-3 { margin-bottom: 16px !important; }
  .ml-lg-3 { margin-left: 16px !important; }
  .mt-lg-n3 { margin-top: -16px !important; }
  .mr-lg-n3 { margin-right: -16px !important; }
  .mb-lg-n3 { margin-bottom: -16px !important; }
  .ml-lg-n3 { margin-left: -16px !important; }
  .mx-lg-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-lg-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-lg-4 { margin: 24px !important; }
  .mt-lg-4 { margin-top: 24px !important; }
  .mr-lg-4 { margin-right: 24px !important; }
  .mb-lg-4 { margin-bottom: 24px !important; }
  .ml-lg-4 { margin-left: 24px !important; }
  .mt-lg-n4 { margin-top: -24px !important; }
  .mr-lg-n4 { margin-right: -24px !important; }
  .mb-lg-n4 { margin-bottom: -24px !important; }
  .ml-lg-n4 { margin-left: -24px !important; }
  .mx-lg-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-lg-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-lg-5 { margin: 32px !important; }
  .mt-lg-5 { margin-top: 32px !important; }
  .mr-lg-5 { margin-right: 32px !important; }
  .mb-lg-5 { margin-bottom: 32px !important; }
  .ml-lg-5 { margin-left: 32px !important; }
  .mt-lg-n5 { margin-top: -32px !important; }
  .mr-lg-n5 { margin-right: -32px !important; }
  .mb-lg-n5 { margin-bottom: -32px !important; }
  .ml-lg-n5 { margin-left: -32px !important; }
  .mx-lg-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-lg-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-lg-6 { margin: 40px !important; }
  .mt-lg-6 { margin-top: 40px !important; }
  .mr-lg-6 { margin-right: 40px !important; }
  .mb-lg-6 { margin-bottom: 40px !important; }
  .ml-lg-6 { margin-left: 40px !important; }
  .mt-lg-n6 { margin-top: -40px !important; }
  .mr-lg-n6 { margin-right: -40px !important; }
  .mb-lg-n6 { margin-bottom: -40px !important; }
  .ml-lg-n6 { margin-left: -40px !important; }
  .mx-lg-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-lg-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-lg-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

@media (min-width: 1280px) {
  .m-xl-0 { margin: 0px !important; }
  .mt-xl-0 { margin-top: 0px !important; }
  .mr-xl-0 { margin-right: 0px !important; }
  .mb-xl-0 { margin-bottom: 0px !important; }
  .ml-xl-0 { margin-left: 0px !important; }
  .mx-xl-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .my-xl-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .m-xl-1 { margin: 4px !important; }
  .mt-xl-1 { margin-top: 4px !important; }
  .mr-xl-1 { margin-right: 4px !important; }
  .mb-xl-1 { margin-bottom: 4px !important; }
  .ml-xl-1 { margin-left: 4px !important; }
  .mt-xl-n1 { margin-top: -4px !important; }
  .mr-xl-n1 { margin-right: -4px !important; }
  .mb-xl-n1 { margin-bottom: -4px !important; }
  .ml-xl-n1 { margin-left: -4px !important; }
  .mx-xl-1 { margin-right: 4px !important; margin-left: 4px !important; }
  .my-xl-1 { margin-top: 4px !important; margin-bottom: 4px !important; }
  .m-xl-2 { margin: 8px !important; }
  .mt-xl-2 { margin-top: 8px !important; }
  .mr-xl-2 { margin-right: 8px !important; }
  .mb-xl-2 { margin-bottom: 8px !important; }
  .ml-xl-2 { margin-left: 8px !important; }
  .mt-xl-n2 { margin-top: -8px !important; }
  .mr-xl-n2 { margin-right: -8px !important; }
  .mb-xl-n2 { margin-bottom: -8px !important; }
  .ml-xl-n2 { margin-left: -8px !important; }
  .mx-xl-2 { margin-right: 8px !important; margin-left: 8px !important; }
  .my-xl-2 { margin-top: 8px !important; margin-bottom: 8px !important; }
  .m-xl-3 { margin: 16px !important; }
  .mt-xl-3 { margin-top: 16px !important; }
  .mr-xl-3 { margin-right: 16px !important; }
  .mb-xl-3 { margin-bottom: 16px !important; }
  .ml-xl-3 { margin-left: 16px !important; }
  .mt-xl-n3 { margin-top: -16px !important; }
  .mr-xl-n3 { margin-right: -16px !important; }
  .mb-xl-n3 { margin-bottom: -16px !important; }
  .ml-xl-n3 { margin-left: -16px !important; }
  .mx-xl-3 { margin-right: 16px !important; margin-left: 16px !important; }
  .my-xl-3 { margin-top: 16px !important; margin-bottom: 16px !important; }
  .m-xl-4 { margin: 24px !important; }
  .mt-xl-4 { margin-top: 24px !important; }
  .mr-xl-4 { margin-right: 24px !important; }
  .mb-xl-4 { margin-bottom: 24px !important; }
  .ml-xl-4 { margin-left: 24px !important; }
  .mt-xl-n4 { margin-top: -24px !important; }
  .mr-xl-n4 { margin-right: -24px !important; }
  .mb-xl-n4 { margin-bottom: -24px !important; }
  .ml-xl-n4 { margin-left: -24px !important; }
  .mx-xl-4 { margin-right: 24px !important; margin-left: 24px !important; }
  .my-xl-4 { margin-top: 24px !important; margin-bottom: 24px !important; }
  .m-xl-5 { margin: 32px !important; }
  .mt-xl-5 { margin-top: 32px !important; }
  .mr-xl-5 { margin-right: 32px !important; }
  .mb-xl-5 { margin-bottom: 32px !important; }
  .ml-xl-5 { margin-left: 32px !important; }
  .mt-xl-n5 { margin-top: -32px !important; }
  .mr-xl-n5 { margin-right: -32px !important; }
  .mb-xl-n5 { margin-bottom: -32px !important; }
  .ml-xl-n5 { margin-left: -32px !important; }
  .mx-xl-5 { margin-right: 32px !important; margin-left: 32px !important; }
  .my-xl-5 { margin-top: 32px !important; margin-bottom: 32px !important; }
  .m-xl-6 { margin: 40px !important; }
  .mt-xl-6 { margin-top: 40px !important; }
  .mr-xl-6 { margin-right: 40px !important; }
  .mb-xl-6 { margin-bottom: 40px !important; }
  .ml-xl-6 { margin-left: 40px !important; }
  .mt-xl-n6 { margin-top: -40px !important; }
  .mr-xl-n6 { margin-right: -40px !important; }
  .mb-xl-n6 { margin-bottom: -40px !important; }
  .ml-xl-n6 { margin-left: -40px !important; }
  .mx-xl-6 { margin-right: 40px !important; margin-left: 40px !important; }
  .my-xl-6 { margin-top: 40px !important; margin-bottom: 40px !important; }
  .mx-xl-auto { margin-right: auto !important; margin-left: auto !important=
; }
}

.p-0 { padding: 0px !important; }

.pt-0 { padding-top: 0px !important; }

.pr-0 { padding-right: 0px !important; }

.pb-0 { padding-bottom: 0px !important; }

.pl-0 { padding-left: 0px !important; }

.px-0 { padding-right: 0px !important; padding-left: 0px !important; }

.py-0 { padding-top: 0px !important; padding-bottom: 0px !important; }

.p-1 { padding: 4px !important; }

.pt-1 { padding-top: 4px !important; }

.pr-1 { padding-right: 4px !important; }

.pb-1 { padding-bottom: 4px !important; }

.pl-1 { padding-left: 4px !important; }

.px-1 { padding-right: 4px !important; padding-left: 4px !important; }

.py-1 { padding-top: 4px !important; padding-bottom: 4px !important; }

.p-2 { padding: 8px !important; }

.pt-2 { padding-top: 8px !important; }

.pr-2 { padding-right: 8px !important; }

.pb-2 { padding-bottom: 8px !important; }

.pl-2 { padding-left: 8px !important; }

.px-2 { padding-right: 8px !important; padding-left: 8px !important; }

.py-2 { padding-top: 8px !important; padding-bottom: 8px !important; }

.p-3 { padding: 16px !important; }

.pt-3 { padding-top: 16px !important; }

.pr-3 { padding-right: 16px !important; }

.pb-3 { padding-bottom: 16px !important; }

.pl-3 { padding-left: 16px !important; }

.px-3 { padding-right: 16px !important; padding-left: 16px !important; }

.py-3 { padding-top: 16px !important; padding-bottom: 16px !important; }

.p-4 { padding: 24px !important; }

.pt-4 { padding-top: 24px !important; }

.pr-4 { padding-right: 24px !important; }

.pb-4 { padding-bottom: 24px !important; }

.pl-4 { padding-left: 24px !important; }

.px-4 { padding-right: 24px !important; padding-left: 24px !important; }

.py-4 { padding-top: 24px !important; padding-bottom: 24px !important; }

.p-5 { padding: 32px !important; }

.pt-5 { padding-top: 32px !important; }

.pr-5 { padding-right: 32px !important; }

.pb-5 { padding-bottom: 32px !important; }

.pl-5 { padding-left: 32px !important; }

.px-5 { padding-right: 32px !important; padding-left: 32px !important; }

.py-5 { padding-top: 32px !important; padding-bottom: 32px !important; }

.p-6 { padding: 40px !important; }

.pt-6 { padding-top: 40px !important; }

.pr-6 { padding-right: 40px !important; }

.pb-6 { padding-bottom: 40px !important; }

.pl-6 { padding-left: 40px !important; }

.px-6 { padding-right: 40px !important; padding-left: 40px !important; }

.py-6 { padding-top: 40px !important; padding-bottom: 40px !important; }

@media (min-width: 544px) {
  .p-sm-0 { padding: 0px !important; }
  .pt-sm-0 { padding-top: 0px !important; }
  .pr-sm-0 { padding-right: 0px !important; }
  .pb-sm-0 { padding-bottom: 0px !important; }
  .pl-sm-0 { padding-left: 0px !important; }
  .px-sm-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-sm-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-sm-1 { padding: 4px !important; }
  .pt-sm-1 { padding-top: 4px !important; }
  .pr-sm-1 { padding-right: 4px !important; }
  .pb-sm-1 { padding-bottom: 4px !important; }
  .pl-sm-1 { padding-left: 4px !important; }
  .px-sm-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-sm-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-sm-2 { padding: 8px !important; }
  .pt-sm-2 { padding-top: 8px !important; }
  .pr-sm-2 { padding-right: 8px !important; }
  .pb-sm-2 { padding-bottom: 8px !important; }
  .pl-sm-2 { padding-left: 8px !important; }
  .px-sm-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-sm-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-sm-3 { padding: 16px !important; }
  .pt-sm-3 { padding-top: 16px !important; }
  .pr-sm-3 { padding-right: 16px !important; }
  .pb-sm-3 { padding-bottom: 16px !important; }
  .pl-sm-3 { padding-left: 16px !important; }
  .px-sm-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-sm-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-sm-4 { padding: 24px !important; }
  .pt-sm-4 { padding-top: 24px !important; }
  .pr-sm-4 { padding-right: 24px !important; }
  .pb-sm-4 { padding-bottom: 24px !important; }
  .pl-sm-4 { padding-left: 24px !important; }
  .px-sm-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-sm-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-sm-5 { padding: 32px !important; }
  .pt-sm-5 { padding-top: 32px !important; }
  .pr-sm-5 { padding-right: 32px !important; }
  .pb-sm-5 { padding-bottom: 32px !important; }
  .pl-sm-5 { padding-left: 32px !important; }
  .px-sm-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-sm-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-sm-6 { padding: 40px !important; }
  .pt-sm-6 { padding-top: 40px !important; }
  .pr-sm-6 { padding-right: 40px !important; }
  .pb-sm-6 { padding-bottom: 40px !important; }
  .pl-sm-6 { padding-left: 40px !important; }
  .px-sm-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-sm-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

@media (min-width: 768px) {
  .p-md-0 { padding: 0px !important; }
  .pt-md-0 { padding-top: 0px !important; }
  .pr-md-0 { padding-right: 0px !important; }
  .pb-md-0 { padding-bottom: 0px !important; }
  .pl-md-0 { padding-left: 0px !important; }
  .px-md-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-md-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-md-1 { padding: 4px !important; }
  .pt-md-1 { padding-top: 4px !important; }
  .pr-md-1 { padding-right: 4px !important; }
  .pb-md-1 { padding-bottom: 4px !important; }
  .pl-md-1 { padding-left: 4px !important; }
  .px-md-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-md-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-md-2 { padding: 8px !important; }
  .pt-md-2 { padding-top: 8px !important; }
  .pr-md-2 { padding-right: 8px !important; }
  .pb-md-2 { padding-bottom: 8px !important; }
  .pl-md-2 { padding-left: 8px !important; }
  .px-md-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-md-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-md-3 { padding: 16px !important; }
  .pt-md-3 { padding-top: 16px !important; }
  .pr-md-3 { padding-right: 16px !important; }
  .pb-md-3 { padding-bottom: 16px !important; }
  .pl-md-3 { padding-left: 16px !important; }
  .px-md-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-md-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-md-4 { padding: 24px !important; }
  .pt-md-4 { padding-top: 24px !important; }
  .pr-md-4 { padding-right: 24px !important; }
  .pb-md-4 { padding-bottom: 24px !important; }
  .pl-md-4 { padding-left: 24px !important; }
  .px-md-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-md-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-md-5 { padding: 32px !important; }
  .pt-md-5 { padding-top: 32px !important; }
  .pr-md-5 { padding-right: 32px !important; }
  .pb-md-5 { padding-bottom: 32px !important; }
  .pl-md-5 { padding-left: 32px !important; }
  .px-md-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-md-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-md-6 { padding: 40px !important; }
  .pt-md-6 { padding-top: 40px !important; }
  .pr-md-6 { padding-right: 40px !important; }
  .pb-md-6 { padding-bottom: 40px !important; }
  .pl-md-6 { padding-left: 40px !important; }
  .px-md-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-md-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

@media (min-width: 1012px) {
  .p-lg-0 { padding: 0px !important; }
  .pt-lg-0 { padding-top: 0px !important; }
  .pr-lg-0 { padding-right: 0px !important; }
  .pb-lg-0 { padding-bottom: 0px !important; }
  .pl-lg-0 { padding-left: 0px !important; }
  .px-lg-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-lg-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-lg-1 { padding: 4px !important; }
  .pt-lg-1 { padding-top: 4px !important; }
  .pr-lg-1 { padding-right: 4px !important; }
  .pb-lg-1 { padding-bottom: 4px !important; }
  .pl-lg-1 { padding-left: 4px !important; }
  .px-lg-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-lg-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-lg-2 { padding: 8px !important; }
  .pt-lg-2 { padding-top: 8px !important; }
  .pr-lg-2 { padding-right: 8px !important; }
  .pb-lg-2 { padding-bottom: 8px !important; }
  .pl-lg-2 { padding-left: 8px !important; }
  .px-lg-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-lg-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-lg-3 { padding: 16px !important; }
  .pt-lg-3 { padding-top: 16px !important; }
  .pr-lg-3 { padding-right: 16px !important; }
  .pb-lg-3 { padding-bottom: 16px !important; }
  .pl-lg-3 { padding-left: 16px !important; }
  .px-lg-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-lg-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-lg-4 { padding: 24px !important; }
  .pt-lg-4 { padding-top: 24px !important; }
  .pr-lg-4 { padding-right: 24px !important; }
  .pb-lg-4 { padding-bottom: 24px !important; }
  .pl-lg-4 { padding-left: 24px !important; }
  .px-lg-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-lg-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-lg-5 { padding: 32px !important; }
  .pt-lg-5 { padding-top: 32px !important; }
  .pr-lg-5 { padding-right: 32px !important; }
  .pb-lg-5 { padding-bottom: 32px !important; }
  .pl-lg-5 { padding-left: 32px !important; }
  .px-lg-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-lg-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-lg-6 { padding: 40px !important; }
  .pt-lg-6 { padding-top: 40px !important; }
  .pr-lg-6 { padding-right: 40px !important; }
  .pb-lg-6 { padding-bottom: 40px !important; }
  .pl-lg-6 { padding-left: 40px !important; }
  .px-lg-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-lg-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

@media (min-width: 1280px) {
  .p-xl-0 { padding: 0px !important; }
  .pt-xl-0 { padding-top: 0px !important; }
  .pr-xl-0 { padding-right: 0px !important; }
  .pb-xl-0 { padding-bottom: 0px !important; }
  .pl-xl-0 { padding-left: 0px !important; }
  .px-xl-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .py-xl-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .p-xl-1 { padding: 4px !important; }
  .pt-xl-1 { padding-top: 4px !important; }
  .pr-xl-1 { padding-right: 4px !important; }
  .pb-xl-1 { padding-bottom: 4px !important; }
  .pl-xl-1 { padding-left: 4px !important; }
  .px-xl-1 { padding-right: 4px !important; padding-left: 4px !important; }
  .py-xl-1 { padding-top: 4px !important; padding-bottom: 4px !important; }
  .p-xl-2 { padding: 8px !important; }
  .pt-xl-2 { padding-top: 8px !important; }
  .pr-xl-2 { padding-right: 8px !important; }
  .pb-xl-2 { padding-bottom: 8px !important; }
  .pl-xl-2 { padding-left: 8px !important; }
  .px-xl-2 { padding-right: 8px !important; padding-left: 8px !important; }
  .py-xl-2 { padding-top: 8px !important; padding-bottom: 8px !important; }
  .p-xl-3 { padding: 16px !important; }
  .pt-xl-3 { padding-top: 16px !important; }
  .pr-xl-3 { padding-right: 16px !important; }
  .pb-xl-3 { padding-bottom: 16px !important; }
  .pl-xl-3 { padding-left: 16px !important; }
  .px-xl-3 { padding-right: 16px !important; padding-left: 16px !important;=
 }
  .py-xl-3 { padding-top: 16px !important; padding-bottom: 16px !important;=
 }
  .p-xl-4 { padding: 24px !important; }
  .pt-xl-4 { padding-top: 24px !important; }
  .pr-xl-4 { padding-right: 24px !important; }
  .pb-xl-4 { padding-bottom: 24px !important; }
  .pl-xl-4 { padding-left: 24px !important; }
  .px-xl-4 { padding-right: 24px !important; padding-left: 24px !important;=
 }
  .py-xl-4 { padding-top: 24px !important; padding-bottom: 24px !important;=
 }
  .p-xl-5 { padding: 32px !important; }
  .pt-xl-5 { padding-top: 32px !important; }
  .pr-xl-5 { padding-right: 32px !important; }
  .pb-xl-5 { padding-bottom: 32px !important; }
  .pl-xl-5 { padding-left: 32px !important; }
  .px-xl-5 { padding-right: 32px !important; padding-left: 32px !important;=
 }
  .py-xl-5 { padding-top: 32px !important; padding-bottom: 32px !important;=
 }
  .p-xl-6 { padding: 40px !important; }
  .pt-xl-6 { padding-top: 40px !important; }
  .pr-xl-6 { padding-right: 40px !important; }
  .pb-xl-6 { padding-bottom: 40px !important; }
  .pl-xl-6 { padding-left: 40px !important; }
  .px-xl-6 { padding-right: 40px !important; padding-left: 40px !important;=
 }
  .py-xl-6 { padding-top: 40px !important; padding-bottom: 40px !important;=
 }
}

.p-responsive { padding-right: 16px !important; padding-left: 16px !importa=
nt; }

@media (min-width: 544px) {
  .p-responsive { padding-right: 40px !important; padding-left: 40px !impor=
tant; }
}

@media (min-width: 1012px) {
  .p-responsive { padding-right: 16px !important; padding-left: 16px !impor=
tant; }
}

.h1 { font-size: 26px !important; }

@media (min-width: 768px) {
  .h1 { font-size: 32px !important; }
}

.h2 { font-size: 22px !important; }

@media (min-width: 768px) {
  .h2 { font-size: 24px !important; }
}

.h3 { font-size: 18px !important; }

@media (min-width: 768px) {
  .h3 { font-size: 20px !important; }
}

.h4 { font-size: 16px !important; }

.h5 { font-size: 14px !important; }

.h6 { font-size: 12px !important; }

.h1, .h2, .h3, .h4, .h5, .h6 { font-weight: 600 !important; }

.f1 { font-size: 26px !important; }

@media (min-width: 768px) {
  .f1 { font-size: 32px !important; }
}

.f2 { font-size: 22px !important; }

@media (min-width: 768px) {
  .f2 { font-size: 24px !important; }
}

.f3 { font-size: 18px !important; }

@media (min-width: 768px) {
  .f3 { font-size: 20px !important; }
}

.f4 { font-size: 16px !important; }

@media (min-width: 768px) {
  .f4 { font-size: 16px !important; }
}

.f5 { font-size: 14px !important; }

.f6 { font-size: 12px !important; }

.f00-light { font-size: 40px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f00-light { font-size: 48px !important; }
}

.f0-light { font-size: 32px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f0-light { font-size: 40px !important; }
}

.f1-light { font-size: 26px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f1-light { font-size: 32px !important; }
}

.f2-light { font-size: 22px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f2-light { font-size: 24px !important; }
}

.f3-light { font-size: 18px !important; font-weight: 300 !important; }

@media (min-width: 768px) {
  .f3-light { font-size: 20px !important; }
}

.text-small { font-size: 12px !important; }

.lead { margin-bottom: 30px; font-size: 20px; font-weight: 300; color: rgb(=
88, 96, 105); }

.lh-condensed-ultra { line-height: 1 !important; }

.lh-condensed { line-height: 1.25 !important; }

.lh-default { line-height: 1.5 !important; }

.lh-0 { line-height: 0 !important; }

.text-right { text-align: right !important; }

.text-left { text-align: left !important; }

.text-center { text-align: center !important; }

@media (min-width: 544px) {
  .text-sm-right { text-align: right !important; }
  .text-sm-left { text-align: left !important; }
  .text-sm-center { text-align: center !important; }
}

@media (min-width: 768px) {
  .text-md-right { text-align: right !important; }
  .text-md-left { text-align: left !important; }
  .text-md-center { text-align: center !important; }
}

@media (min-width: 1012px) {
  .text-lg-right { text-align: right !important; }
  .text-lg-left { text-align: left !important; }
  .text-lg-center { text-align: center !important; }
}

@media (min-width: 1280px) {
  .text-xl-right { text-align: right !important; }
  .text-xl-left { text-align: left !important; }
  .text-xl-center { text-align: center !important; }
}

.text-normal { font-weight: 400 !important; }

.text-bold { font-weight: 600 !important; }

.text-italic { font-style: italic !important; }

.text-uppercase { text-transform: uppercase !important; }

.text-underline { text-decoration: underline !important; }

.no-underline { text-decoration: none !important; }

.no-wrap { white-space: nowrap !important; }

.ws-normal { white-space: normal !important; }

.wb-break-all { word-break: break-all !important; }

.text-emphasized { font-weight: 600; color: rgb(36, 41, 46); }

.list-style-none { list-style: none !important; }

.text-shadow-dark { text-shadow: rgba(27, 31, 35, 0.25) 0px 1px 1px, rgba(2=
7, 31, 35, 0.75) 0px 1px 25px; }

.text-shadow-light { text-shadow: rgba(255, 255, 255, 0.5) 0px 1px 0px; }

.text-mono { font-family: SFMono-Regular, Consolas, "Liberation Mono", Menl=
o, Courier, monospace; }

.user-select-none { user-select: none !important; }

.d-block { display: block !important; }

.d-flex { display: flex !important; }

.d-inline { display: inline !important; }

.d-inline-block { display: inline-block !important; }

.d-inline-flex { display: inline-flex !important; }

.d-none { display: none !important; }

.d-table { display: table !important; }

.d-table-cell { display: table-cell !important; }

@media (min-width: 544px) {
  .d-sm-block { display: block !important; }
  .d-sm-flex { display: flex !important; }
  .d-sm-inline { display: inline !important; }
  .d-sm-inline-block { display: inline-block !important; }
  .d-sm-inline-flex { display: inline-flex !important; }
  .d-sm-none { display: none !important; }
  .d-sm-table { display: table !important; }
  .d-sm-table-cell { display: table-cell !important; }
}

@media (min-width: 768px) {
  .d-md-block { display: block !important; }
  .d-md-flex { display: flex !important; }
  .d-md-inline { display: inline !important; }
  .d-md-inline-block { display: inline-block !important; }
  .d-md-inline-flex { display: inline-flex !important; }
  .d-md-none { display: none !important; }
  .d-md-table { display: table !important; }
  .d-md-table-cell { display: table-cell !important; }
}

@media (min-width: 1012px) {
  .d-lg-block { display: block !important; }
  .d-lg-flex { display: flex !important; }
  .d-lg-inline { display: inline !important; }
  .d-lg-inline-block { display: inline-block !important; }
  .d-lg-inline-flex { display: inline-flex !important; }
  .d-lg-none { display: none !important; }
  .d-lg-table { display: table !important; }
  .d-lg-table-cell { display: table-cell !important; }
}

@media (min-width: 1280px) {
  .d-xl-block { display: block !important; }
  .d-xl-flex { display: flex !important; }
  .d-xl-inline { display: inline !important; }
  .d-xl-inline-block { display: inline-block !important; }
  .d-xl-inline-flex { display: inline-flex !important; }
  .d-xl-none { display: none !important; }
  .d-xl-table { display: table !important; }
  .d-xl-table-cell { display: table-cell !important; }
}

.v-hidden { visibility: hidden !important; }

.v-visible { visibility: visible !important; }

@media (max-width: 544px) {
  .hide-sm { display: none !important; }
}

@media (min-width: 544px) and (max-width: 768px) {
  .hide-md { display: none !important; }
}

@media (min-width: 768px) and (max-width: 1012px) {
  .hide-lg { display: none !important; }
}

@media (min-width: 1012px) {
  .hide-xl { display: none !important; }
}

.table-fixed { table-layout: fixed !important; }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; overf=
low: hidden; clip: rect(0px, 0px, 0px, 0px); overflow-wrap: normal; border:=
 0px; }

.show-on-focus { position: absolute; width: 1px; height: 1px; margin: 0px; =
overflow: hidden; clip: rect(1px, 1px, 1px, 1px); }

.show-on-focus:focus { z-index: 20; width: auto; height: auto; clip: auto; =
}

.container { width: 980px; margin-right: auto; margin-left: auto; }

.container::before { display: table; content: ""; }

.container::after { display: table; clear: both; content: ""; }

.container-md { max-width: 768px; margin-right: auto; margin-left: auto; }

.container-lg { max-width: 1012px; margin-right: auto; margin-left: auto; }

.container-xl { max-width: 1280px; margin-right: auto; margin-left: auto; }

.columns { margin-right: -10px; margin-left: -10px; }

.columns::before { display: table; content: ""; }

.columns::after { display: table; clear: both; content: ""; }

.column { float: left; padding-right: 10px; padding-left: 10px; }

.one-third { width: 33.3333%; }

.two-thirds { width: 66.6667%; }

.one-fourth { width: 25%; }

.one-half { width: 50%; }

.three-fourths { width: 75%; }

.one-fifth { width: 20%; }

.four-fifths { width: 80%; }

.centered { display: block; float: none; margin-right: auto; margin-left: a=
uto; }

.col-1 { width: 8.33333%; }

.col-2 { width: 16.6667%; }

.col-3 { width: 25%; }

.col-4 { width: 33.3333%; }

.col-5 { width: 41.6667%; }

.col-6 { width: 50%; }

.col-7 { width: 58.3333%; }

.col-8 { width: 66.6667%; }

.col-9 { width: 75%; }

.col-10 { width: 83.3333%; }

.col-11 { width: 91.6667%; }

.col-12 { width: 100%; }

@media (min-width: 544px) {
  .col-sm-1 { width: 8.33333%; }
  .col-sm-2 { width: 16.6667%; }
  .col-sm-3 { width: 25%; }
  .col-sm-4 { width: 33.3333%; }
  .col-sm-5 { width: 41.6667%; }
  .col-sm-6 { width: 50%; }
  .col-sm-7 { width: 58.3333%; }
  .col-sm-8 { width: 66.6667%; }
  .col-sm-9 { width: 75%; }
  .col-sm-10 { width: 83.3333%; }
  .col-sm-11 { width: 91.6667%; }
  .col-sm-12 { width: 100%; }
}

@media (min-width: 768px) {
  .col-md-1 { width: 8.33333%; }
  .col-md-2 { width: 16.6667%; }
  .col-md-3 { width: 25%; }
  .col-md-4 { width: 33.3333%; }
  .col-md-5 { width: 41.6667%; }
  .col-md-6 { width: 50%; }
  .col-md-7 { width: 58.3333%; }
  .col-md-8 { width: 66.6667%; }
  .col-md-9 { width: 75%; }
  .col-md-10 { width: 83.3333%; }
  .col-md-11 { width: 91.6667%; }
  .col-md-12 { width: 100%; }
}

@media (min-width: 1012px) {
  .col-lg-1 { width: 8.33333%; }
  .col-lg-2 { width: 16.6667%; }
  .col-lg-3 { width: 25%; }
  .col-lg-4 { width: 33.3333%; }
  .col-lg-5 { width: 41.6667%; }
  .col-lg-6 { width: 50%; }
  .col-lg-7 { width: 58.3333%; }
  .col-lg-8 { width: 66.6667%; }
  .col-lg-9 { width: 75%; }
  .col-lg-10 { width: 83.3333%; }
  .col-lg-11 { width: 91.6667%; }
  .col-lg-12 { width: 100%; }
}

@media (min-width: 1280px) {
  .col-xl-1 { width: 8.33333%; }
  .col-xl-2 { width: 16.6667%; }
  .col-xl-3 { width: 25%; }
  .col-xl-4 { width: 33.3333%; }
  .col-xl-5 { width: 41.6667%; }
  .col-xl-6 { width: 50%; }
  .col-xl-7 { width: 58.3333%; }
  .col-xl-8 { width: 66.6667%; }
  .col-xl-9 { width: 75%; }
  .col-xl-10 { width: 83.3333%; }
  .col-xl-11 { width: 91.6667%; }
  .col-xl-12 { width: 100%; }
}

.gutter { margin-right: -16px; margin-left: -16px; }

.gutter > [class*=3D"col-"] { padding-right: 16px !important; padding-left:=
 16px !important; }

.gutter-condensed { margin-right: -8px; margin-left: -8px; }

.gutter-condensed > [class*=3D"col-"] { padding-right: 8px !important; padd=
ing-left: 8px !important; }

.gutter-spacious { margin-right: -24px; margin-left: -24px; }

.gutter-spacious > [class*=3D"col-"] { padding-right: 24px !important; padd=
ing-left: 24px !important; }

@media (min-width: 544px) {
  .gutter-sm { margin-right: -16px; margin-left: -16px; }
  .gutter-sm > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-sm-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-sm-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-sm-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-sm-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

@media (min-width: 768px) {
  .gutter-md { margin-right: -16px; margin-left: -16px; }
  .gutter-md > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-md-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-md-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-md-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-md-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

@media (min-width: 1012px) {
  .gutter-lg { margin-right: -16px; margin-left: -16px; }
  .gutter-lg > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-lg-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-lg-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-lg-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-lg-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

@media (min-width: 1280px) {
  .gutter-xl { margin-right: -16px; margin-left: -16px; }
  .gutter-xl > [class*=3D"col-"] { padding-right: 16px !important; padding-=
left: 16px !important; }
  .gutter-xl-condensed { margin-right: -8px; margin-left: -8px; }
  .gutter-xl-condensed > [class*=3D"col-"] { padding-right: 8px !important;=
 padding-left: 8px !important; }
  .gutter-xl-spacious { margin-right: -24px; margin-left: -24px; }
  .gutter-xl-spacious > [class*=3D"col-"] { padding-right: 24px !important;=
 padding-left: 24px !important; }
}

.offset-1 { margin-left: 8.33333% !important; }

.offset-2 { margin-left: 16.6667% !important; }

.offset-3 { margin-left: 25% !important; }

.offset-4 { margin-left: 33.3333% !important; }

.offset-5 { margin-left: 41.6667% !important; }

.offset-6 { margin-left: 50% !important; }

.offset-7 { margin-left: 58.3333% !important; }

.offset-8 { margin-left: 66.6667% !important; }

.offset-9 { margin-left: 75% !important; }

.offset-10 { margin-left: 83.3333% !important; }

.offset-11 { margin-left: 91.6667% !important; }

@media (min-width: 544px) {
  .offset-sm-1 { margin-left: 8.33333% !important; }
  .offset-sm-2 { margin-left: 16.6667% !important; }
  .offset-sm-3 { margin-left: 25% !important; }
  .offset-sm-4 { margin-left: 33.3333% !important; }
  .offset-sm-5 { margin-left: 41.6667% !important; }
  .offset-sm-6 { margin-left: 50% !important; }
  .offset-sm-7 { margin-left: 58.3333% !important; }
  .offset-sm-8 { margin-left: 66.6667% !important; }
  .offset-sm-9 { margin-left: 75% !important; }
  .offset-sm-10 { margin-left: 83.3333% !important; }
  .offset-sm-11 { margin-left: 91.6667% !important; }
}

@media (min-width: 768px) {
  .offset-md-1 { margin-left: 8.33333% !important; }
  .offset-md-2 { margin-left: 16.6667% !important; }
  .offset-md-3 { margin-left: 25% !important; }
  .offset-md-4 { margin-left: 33.3333% !important; }
  .offset-md-5 { margin-left: 41.6667% !important; }
  .offset-md-6 { margin-left: 50% !important; }
  .offset-md-7 { margin-left: 58.3333% !important; }
  .offset-md-8 { margin-left: 66.6667% !important; }
  .offset-md-9 { margin-left: 75% !important; }
  .offset-md-10 { margin-left: 83.3333% !important; }
  .offset-md-11 { margin-left: 91.6667% !important; }
}

@media (min-width: 1012px) {
  .offset-lg-1 { margin-left: 8.33333% !important; }
  .offset-lg-2 { margin-left: 16.6667% !important; }
  .offset-lg-3 { margin-left: 25% !important; }
  .offset-lg-4 { margin-left: 33.3333% !important; }
  .offset-lg-5 { margin-left: 41.6667% !important; }
  .offset-lg-6 { margin-left: 50% !important; }
  .offset-lg-7 { margin-left: 58.3333% !important; }
  .offset-lg-8 { margin-left: 66.6667% !important; }
  .offset-lg-9 { margin-left: 75% !important; }
  .offset-lg-10 { margin-left: 83.3333% !important; }
  .offset-lg-11 { margin-left: 91.6667% !important; }
}

@media (min-width: 1280px) {
  .offset-xl-1 { margin-left: 8.33333% !important; }
  .offset-xl-2 { margin-left: 16.6667% !important; }
  .offset-xl-3 { margin-left: 25% !important; }
  .offset-xl-4 { margin-left: 33.3333% !important; }
  .offset-xl-5 { margin-left: 41.6667% !important; }
  .offset-xl-6 { margin-left: 50% !important; }
  .offset-xl-7 { margin-left: 58.3333% !important; }
  .offset-xl-8 { margin-left: 66.6667% !important; }
  .offset-xl-9 { margin-left: 75% !important; }
  .offset-xl-10 { margin-left: 83.3333% !important; }
  .offset-xl-11 { margin-left: 91.6667% !important; }
}

.markdown-body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI"=
, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Seg=
oe UI Symbol"; font-size: 16px; line-height: 1.5; overflow-wrap: break-word=
; }

.markdown-body::before { display: table; content: ""; }

.markdown-body::after { display: table; clear: both; content: ""; }

.markdown-body > :first-child { margin-top: 0px !important; }

.markdown-body > :last-child { margin-bottom: 0px !important; }

.markdown-body a:not([href]) { color: inherit; text-decoration: none; }

.markdown-body .absent { color: rgb(203, 36, 49); }

.markdown-body .anchor { float: left; padding-right: 4px; margin-left: -20p=
x; line-height: 1; }

.markdown-body .anchor:focus { outline: none; }

.markdown-body p, .markdown-body blockquote, .markdown-body ul, .markdown-b=
ody ol, .markdown-body dl, .markdown-body table, .markdown-body pre { margi=
n-top: 0px; margin-bottom: 16px; }

.markdown-body hr { height: 0.25em; padding: 0px; margin: 24px 0px; backgro=
und-color: rgb(225, 228, 232); border: 0px; }

.markdown-body blockquote { padding: 0px 1em; color: rgb(106, 115, 125); bo=
rder-left: 0.25em solid rgb(223, 226, 229); }

.markdown-body blockquote > :first-child { margin-top: 0px; }

.markdown-body blockquote > :last-child { margin-bottom: 0px; }

.markdown-body kbd { display: inline-block; padding: 3px 5px; font-size: 11=
px; line-height: 10px; color: rgb(68, 77, 86); vertical-align: middle; back=
ground-color: rgb(250, 251, 252); border-width: 1px; border-style: solid; b=
order-color: rgb(198, 203, 209) rgb(198, 203, 209) rgb(149, 157, 165); bord=
er-image: initial; border-radius: 3px; box-shadow: rgb(149, 157, 165) 0px -=
1px 0px inset; }

.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4,=
 .markdown-body h5, .markdown-body h6 { margin-top: 24px; margin-bottom: 16=
px; font-weight: 600; line-height: 1.25; }

.markdown-body h1 .octicon-link, .markdown-body h2 .octicon-link, .markdown=
-body h3 .octicon-link, .markdown-body h4 .octicon-link, .markdown-body h5 =
.octicon-link, .markdown-body h6 .octicon-link { color: rgb(27, 31, 35); ve=
rtical-align: middle; visibility: hidden; }

.markdown-body h1:hover .anchor, .markdown-body h2:hover .anchor, .markdown=
-body h3:hover .anchor, .markdown-body h4:hover .anchor, .markdown-body h5:=
hover .anchor, .markdown-body h6:hover .anchor { text-decoration: none; }

.markdown-body h1:hover .anchor .octicon-link, .markdown-body h2:hover .anc=
hor .octicon-link, .markdown-body h3:hover .anchor .octicon-link, .markdown=
-body h4:hover .anchor .octicon-link, .markdown-body h5:hover .anchor .octi=
con-link, .markdown-body h6:hover .anchor .octicon-link { visibility: visib=
le; }

.markdown-body h1 tt, .markdown-body h1 code, .markdown-body h2 tt, .markdo=
wn-body h2 code, .markdown-body h3 tt, .markdown-body h3 code, .markdown-bo=
dy h4 tt, .markdown-body h4 code, .markdown-body h5 tt, .markdown-body h5 c=
ode, .markdown-body h6 tt, .markdown-body h6 code { font-size: inherit; }

.markdown-body h1 { padding-bottom: 0.3em; font-size: 2em; border-bottom: 1=
px solid rgb(234, 236, 239); }

.markdown-body h2 { padding-bottom: 0.3em; font-size: 1.5em; border-bottom:=
 1px solid rgb(234, 236, 239); }

.markdown-body h3 { font-size: 1.25em; }

.markdown-body h4 { font-size: 1em; }

.markdown-body h5 { font-size: 0.875em; }

.markdown-body h6 { font-size: 0.85em; color: rgb(106, 115, 125); }

.markdown-body ul, .markdown-body ol { padding-left: 2em; }

.markdown-body ul.no-list, .markdown-body ol.no-list { padding: 0px; list-s=
tyle-type: none; }

.markdown-body ul ul, .markdown-body ul ol, .markdown-body ol ol, .markdown=
-body ol ul { margin-top: 0px; margin-bottom: 0px; }

.markdown-body li { }

.markdown-body li > p { margin-top: 16px; }

.markdown-body li + li { margin-top: 0.25em; }

.markdown-body dl { padding: 0px; }

.markdown-body dl dt { padding: 0px; margin-top: 16px; font-size: 1em; font=
-style: italic; font-weight: 600; }

.markdown-body dl dd { padding: 0px 16px; margin-bottom: 16px; }

.markdown-body table { display: block; width: 100%; overflow: auto; }

.markdown-body table th { font-weight: 600; }

.markdown-body table th, .markdown-body table td { padding: 6px 13px; borde=
r: 1px solid rgb(223, 226, 229); }

.markdown-body table tr { background-color: rgb(255, 255, 255); border-top:=
 1px solid rgb(198, 203, 209); }

.markdown-body table tr:nth-child(2n) { background-color: rgb(246, 248, 250=
); }

.markdown-body table img { background-color: transparent; }

.markdown-body img { max-width: 100%; box-sizing: content-box; background-c=
olor: rgb(255, 255, 255); }

.markdown-body img[align=3D"right"] { padding-left: 20px; }

.markdown-body img[align=3D"left"] { padding-right: 20px; }

.markdown-body .emoji { max-width: none; vertical-align: text-top; backgrou=
nd-color: transparent; }

.markdown-body span.frame { display: block; overflow: hidden; }

.markdown-body span.frame > span { display: block; float: left; width: auto=
; padding: 7px; margin: 13px 0px 0px; overflow: hidden; border: 1px solid r=
gb(223, 226, 229); }

.markdown-body span.frame span img { display: block; float: left; }

.markdown-body span.frame span span { display: block; padding: 5px 0px 0px;=
 clear: both; color: rgb(36, 41, 46); }

.markdown-body span.align-center { display: block; overflow: hidden; clear:=
 both; }

.markdown-body span.align-center > span { display: block; margin: 13px auto=
 0px; overflow: hidden; text-align: center; }

.markdown-body span.align-center span img { margin: 0px auto; text-align: c=
enter; }

.markdown-body span.align-right { display: block; overflow: hidden; clear: =
both; }

.markdown-body span.align-right > span { display: block; margin: 13px 0px 0=
px; overflow: hidden; text-align: right; }

.markdown-body span.align-right span img { margin: 0px; text-align: right; =
}

.markdown-body span.float-left { display: block; float: left; margin-right:=
 13px; overflow: hidden; }

.markdown-body span.float-left span { margin: 13px 0px 0px; }

.markdown-body span.float-right { display: block; float: right; margin-left=
: 13px; overflow: hidden; }

.markdown-body span.float-right > span { display: block; margin: 13px auto =
0px; overflow: hidden; text-align: right; }

.markdown-body code, .markdown-body tt { padding: 0.2em 0.4em; margin: 0px;=
 font-size: 85%; background-color: rgba(27, 31, 35, 0.05); border-radius: 3=
px; }

.markdown-body code br, .markdown-body tt br { display: none; }

.markdown-body del code { text-decoration: inherit; }

.markdown-body pre { overflow-wrap: normal; }

.markdown-body pre > code { padding: 0px; margin: 0px; font-size: 100%; wor=
d-break: normal; white-space: pre; background: transparent; border: 0px; }

.markdown-body .highlight { margin-bottom: 16px; }

.markdown-body .highlight pre { margin-bottom: 0px; word-break: normal; }

.markdown-body .highlight pre, .markdown-body pre { padding: 16px; overflow=
: auto; font-size: 85%; line-height: 1.45; background-color: rgb(246, 248, =
250); border-radius: 3px; }

.markdown-body pre code, .markdown-body pre tt { display: inline; padding: =
0px; margin: 0px; overflow: visible; line-height: inherit; overflow-wrap: n=
ormal; background-color: transparent; border: 0px; }

.markdown-body .csv-data td, .markdown-body .csv-data th { padding: 5px; ov=
erflow: hidden; font-size: 12px; line-height: 1; text-align: left; white-sp=
ace: nowrap; }

.markdown-body .csv-data .blob-num { padding: 10px 8px 9px; text-align: rig=
ht; background: rgb(255, 255, 255); border: 0px; }

.markdown-body .csv-data tr { border-top: 0px; }

.markdown-body .csv-data th { font-weight: 600; background: rgb(246, 248, 2=
50); border-top: 0px; }

.highlight table td { padding: 5px; }

.highlight table pre { margin: 0px; }

.highlight .cm { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cp { color: rgb(153, 153, 153); font-weight: bold; }

.highlight .c1 { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cs { color: rgb(153, 153, 153); font-weight: bold; font-style: =
italic; }

.highlight .c, .highlight .cd { color: rgb(153, 153, 136); font-style: ital=
ic; }

.highlight .err { color: rgb(166, 23, 23); background-color: rgb(227, 210, =
210); }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .ge { color: rgb(0, 0, 0); font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .kc { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kd { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kn { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kp { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kr { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .kt { color: rgb(68, 85, 136); font-weight: bold; }

.highlight .k, .highlight .kv { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .mf { color: rgb(0, 153, 153); }

.highlight .mh { color: rgb(0, 153, 153); }

.highlight .il { color: rgb(0, 153, 153); }

.highlight .mi { color: rgb(0, 153, 153); }

.highlight .mo { color: rgb(0, 153, 153); }

.highlight .m, .highlight .mb, .highlight .mx { color: rgb(0, 153, 153); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .s { color: rgb(221, 17, 68); }

.highlight .na { color: rgb(0, 128, 128); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .nb { color: rgb(0, 134, 179); }

.highlight .nc { color: rgb(68, 85, 136); font-weight: bold; }

.highlight .no { color: rgb(0, 128, 128); }

.highlight .nd { color: rgb(60, 93, 93); font-weight: bold; }

.highlight .ni { color: rgb(128, 0, 128); }

.highlight .ne { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nf { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nl { color: rgb(153, 0, 0); font-weight: bold; }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: rgb(0, 0, 128); }

.highlight .vc { color: rgb(0, 128, 128); }

.highlight .vg { color: rgb(0, 128, 128); }

.highlight .vi { color: rgb(0, 128, 128); }

.highlight .nv { color: rgb(0, 128, 128); }

.highlight .ow { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .o { color: rgb(0, 0, 0); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight { background-color: rgb(248, 248, 248); }
------MultipartBoundary--wjIHSQZCJmHgwf21IKTve3eTQB1OPTtbiORbabUjXQ------
